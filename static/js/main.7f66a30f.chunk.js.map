{"version":3,"sources":["api/masterData.js","helper/treefilter.js","actions/index.js","reducers/reducer_designer.js","helper/dummyMetadata.js","reducers/reducer_mainApp.js","helper/util.js","reducers/reducer_hierarchyDesigner.js","reducers/reducer_reportApp.js","components/chartApiManager.js","reducers/reducer_dashboard.js","reducers/reducer_datadesigner.js","reducers/index.js","components/navbar.js","components/noobSplitter.js","containers/designerContentBase.js","containers/hierearchyTree.js","hoc/noobControlsHoc.js","controls/section.js","controls/richtext.js","controls/combo.js","controls/textbox.js","helper/wordSplitter.js","controls/table.js","controls/label.js","helper/notification.js","charts/dcjsBarChart.js","components/toolItem.js","components/toolbox.js","form/FormText.js","form/FormCheckbox.js","form/FormDropDown.js","form/IconSelector.js","form/ColorSelector.js","form/FormRadio.js","form/FormDateRange.js","form/FormFilterInput.js","form/FormImageCoord.js","form/FormRichText.js","form/formFilterDyanamicInput.js","form/Form.js","form/FormTreeDropDown.js","controls/treeDropdown.js","helper/chartHelper.js","helper/metadataManager.js","charts/pieChart.js","charts/barChart.js","charts/lineChart.js","charts/gauge_rechart.js","charts/gauge.js","components/noobForm.js","constants.js","components/noobControlLandingPad.js","components/editDialog.js","components/noobControl.js","charts/gaugejs_react.js","controls/pagebreak.js","controls/imageMapperLib.js","controls/imageMap.js","controls/datepicker.js","containers/externalContainer.js","components/noobControlContent.js","components/reportControl.js","api/pageApiManager.js","api/ExecutiveSummaryLogic.js","components/reportForm.js","components/toolbar.js","containers/hierarchyConfigPanel.js","containers/dashboardContent.js","components/treeView.js","components/toolAvailableData.js","components/scrollTracker.js","containers/settingsContent.js","components/imageMapConfigDialog.js","containers/propertiesPanel.js","components/toolPanel.js","components/designerForm.js","components/designerToolbar.js","containers/dashboardDesignerContent.js","components/saveAs.js","components/openDialog.js","containers/formsDesignerContent.js","components/hierDesignerToolbar.js","containers/hierarchyDesigner.js","containers/specialTabContent.js","containers/downloadCenterContent.js","components/MyEditor.js","containers/dataDesignerContent.js","containers/trialPage.js","containers/mainContent.js","ReportApp.js","App.js","index.js"],"names":["axios","create","baseURL","toks","document","URL","replace","split","length","getDocUrlWithoutPort","getAprBaseUrl","getDocUrlWithoutPortFrontEnd","aprFrontEndApi","titleMatcher","filterText","node","title","toLowerCase","indexOf","nodeExists","filter","matcher","children","find","child","filterTree","filtered","map","Object","assign","findNodeByKey","data","key","i","item","index","parentArr","childFind","sanitizeTreeData","nodeList","retList","currNode","cleanNode","parent","hierStack","push","reconstructHierarchyStack","apiNodes","stack","apiNode","CLICK_MENU","DRAG_TOOLITEM_START","SELECT_TOOLPANEL_TREE","SELECT_HIER_DESIGNER_TREE","UPDATE_HIER_DESIGNER_TREE","INSERT_HIER_DESIGNER_TREE","FILTER_HIER_DESIGNER_TREE","FETCH_HIERARCHY","FETCH_HIERARCHYCONSO","FETCH_AVAILABLEDATA","FETCH_HIERARCHYVIEWS","FETCH_DIMENSIONS","FETCH_HIERARCHYKPI","FETCH_IMAGES","SAVE_DESIGNER_LAYOUT","SAVE_HIER_DESIGN_NODE","menuClicked","menuName","type","payload","selectToolPanelTree","hierarchyNode","selectHierDesignerTree","updateHierDesignerTree","hierarchyArr","filterHierDesignerTree","insertNewNode","saveNodeConfig","nodeInfo","fetchHierarchyViews","dispatch","a","console","log","get","response","fetchImages","selectedControl","controlId","selectedPage","updateLayout","updatedControls","openLayout","controls","layoutData","saveLayout","layout","name","post","layoutJson","JSON","stringify","numRows","rows","numCols","columns","pageFilterFields","pageApiData","saveHierarchyView","hierarchyData","userSettings","formattedHierarchyData","hierarchyJson","nodeSettingsJson","requestDownloadReport","requestParams","responseType","headers","updateControlProps","newControlData","updateLayoutProps","newLayoutProps","deleteControl","controlData","selectDashboardTree","selectedNodeKey","clickChartSlice","sliceInfo","seriesInfo","groupingStackStr","datasetId","selectChartGroup","groupVal","metadata","clickPageLink","DUMMY_APR_METADATA","server","requestTypes","description","dataType","enumValues","defaultValue","dimensions","items","aggregations","defaultState","activeMenu","tabIndex","draggingToolItem","toolPanelTreeSelected","masterHierarchy","masterAvailableData","masterLayouts","masterHierarchyViews","masterMetadata","masterImages","tabIndexMapping","mapView","analysisView","home","downloadCenter","formsDesigner","hierarchyDesigner","affiliate","settings","addOrUpdateLayout","stateLayouts","newLayout","findSameLayoutIndex","findIndex","s","splice","uuidv4","c","r","Math","random","toString","getMonthEndDate","inDate","Date","getFullYear","getMonth","createMonthDate","dateStr","d","isNaN","isValidDate","resizingControlId","x","y","w","h","ctrlType","level","dashLayout","dashLayoutData","dataKey","RequestParams","dataTypes","Dimensions","measures","expression","value","pageSelected","defaultControlData","label","apiFieldName","placeholder","richTextData","dataProps","requestType","filterName","filterValue","options","text","showFilters","showPaginator","showFooter","specifyColumns","categories","seriesName","stacked","icon","backgroundColor","color","fontSize","alignment","linkedPage","groupings","filtersList","imageProps","image","areas","unit","url","assignIdAndDefaultData","control","currId","ctrl","forEach","layoutCtrl","setControlSelected","affectedControls","selected","unselectAllControls","updatedControl","findControlIndex","newControl","updateControlImgMapProps","actionPayload","newMap","updatedLayoutProps","parseInt","handleDeleteControl","deletedControl","hierarchyMaster","hierarchyTree","selectedNode","handleInsert","newState","newNode","nodeType","category","selectedNodeObj","lastIndex","handleFilter","filteredData","nodes","reduce","acc","curr","concat","filterTreeEx","handleSaveHierDesignNode","state","inputSetting","userSettingsFindIdx","dropdownOptions","computeMaxIndex","maxIndex","currCtrlBtmIdx","currEndIdx","data1","start","offset","percent","endIndex","render1Section_1","bigLayout","getOtherControlFilters","datasetFilters","currCtrlId","controlFilterInfo","stacks","keys","longestStack","e","stackInfo","prop","origObj","Name","Value","getOwnControlHigherLevelFilters","currGroupingsArr","currGroupingStr","ReformatControlFilters","postObj","Array","isArray","parameters","currFilter","fetchData","setIsLoading","setApiData","currControlGrouping","pageFilters","Grouping","otherControlFilters","ownHigherLevelFilters","catch","error","result","chartClickFilters","chartTempGroupings","processChartClick","filtersRoot","controlFilters","sliceInfoClone","processChartGroups","removeLowerLevelFilters","groupValStr","groupsToRemove","g","hierarchyConso","hierarchyKpi","convertTreeData","apiTreeData","fullPath","nodeName","rest","convertDropDownOptions","apiDropdowns","columnName","datatype","rootReducer","combineReducers","mainApp","action","includes","designer","newStateSelectCtrl","newStateSelectPage","newStateUpdProps","newStateUpdImageMapProps","newStateUpdLayoutProps","newStateDeleteControl","reformatted","insertedState","filterState","saveNodeState","fetchedViewState","parse","reportApp","dashboard","defaultView","treeData","firstNode","newFilters","newFilter","newGroupings","dataDesigner","NavBarMobile","props","handleMenuClick","menuClickDispatcher","handleSidebarToggle","handleSidebarHide","bind","burgerPushed","this","setState","Sidebar","Pushable","as","Menu","animation","inverted","vertical","visible","width","direction","size","getNavBarMenuItemElements","activeItem","Pusher","dimmed","style","height","onClick","className","Component","NavBarDesktop","withAlignment","navBarMenuItems","itemClass","evt","onMenuClicked","getNavbarChildren","connect","bindActionCreators","Responsive","onlyMobile","minWidth","onlyTablet","DEFAULT_SPLIT_SIZES","NoobSplitter","getCurrentPixels","currPercent","window","innerWidth","isVerySmall","currPixels","getMinsize","sizes","getDefaultSizes","id","onSplitDragEnd","onSplitDragStart","handleSplitterBtnClick","createGutter","defaultSize","addRemoveContentTransition","newSize","showCollapseArrow","showExpandArrow","onDragEnd","gutterBtnArrow","getElementById","classList","remove","add","args","bAdd","contentElems","getElementsByClassName","elem","transition","gutterElem","createElement","gutterBtn","appendChild","addEventListener","minSize","child1","child2","gutterSize","onDragStart","snapOffset","cursor","gutter","overflow","DesignerContentBase","onWindowResize","rightPixels","currRightPercent","leftPixels","defaultSizes","React","HierarchyDesignerTree","componentDidMount","firstLevelKeys","getFirstLevelKeys","expandedKeys","componentDidUpdate","prevProps","nodeSelectedObj","parentObj","onExpand","Icon","getSwitcherIcon","isLeaf","expanded","onDrop","info","bUpdated","dropKey","eventKey","dragKey","dragNode","dragParentPos","getParentPosStr","pos","dropPos","isBottomGap","dropPosition","Number","dragObj","dropObj","dropToGap","newDropIdx","onHierarchyChanged","defaultExpandedKeys","defaultSelectedKeys","defaultCheckedKeys","nodePos","lastIndexOf","substr","nodeItem","searchText","currChild","satisfiesFilter","hiddenSettingsNames","nodeSettings","listNodes","currItem","findUserSettings","shouldHide","hiddenNodesSettings","tempSettings","dispName","renderTreeNodes","padding","showLine","selectable","draggable","onDragEnter","checkable","defaultExpandAll","selectedKeys","onSelect","onSelectCb","onCheck","switcherIcon","defaultProps","noobControlHoc","WrappedComponent","stopPropagation","onMouseDown","controlSelected","domNode","ReactDOM","findDOMNode","styles","classNames","combinedStyle","sectionProps","propType","styleMap","CODE","fontFamily","getBlockStyle","block","getType","initialState","apiDataAvailable","apiData","EditorState","createWithContent","ContentState","createFromText","html","jsonObj","retHtml","formatJsonObjAsHtml","stateFromHTML","convertFromRaw","useState","editorState","setEditorState","useEffect","contentState","getCurrentContent","hasText","getBlockMap","first","blockStyleFn","customStyleMap","spellCheck","readOnly","richTextProps","toolTip","metadataField","metadataPropType","Dropdown","fluid","multiple","selection","search","button","fontWeight","right","left","Input","string","str","toUpperCase","statuses","computeKpi","kpiName","totalTargets","good","sampleColumns","Header","Footer","TestCustomProp","accessor","FooterColSpan","customColSpan","colType","DefaultColumnFilter","column","preFilteredRows","setFilter","onChange","target","undefined","TableBase","columnsToUse","dataToUse","designMode","iArea","targetName","timeInControl","timeInAlarm","timeMvOutOfLimits","kpi1","kpi2","kpi3","kpi4","kpi5","kpi6","kpi7","kpi8","kpi9","kpi10","subRows","getSampleData","firstData","splitWord","generateColumns","totalCols","getTotalNumColumns","colArray","origArr","ret","memoColumns","useMemo","memoData","filterTypes","row","rowValue","values","String","startsWith","getPageSize","defaultColumn","Filter","useTable","pageIndex","pageSize","useFilters","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","footerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","headerGroup","iHeaderGrp","getHeaderGroupProps","thisWidth","custProp","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","col","canFilter","hasFilterableColumn","getRowProps","cells","cell","getCellProps","getAdditionalCellProps","colSpan","disabled","tableProps","watchedField","watchedValue","watchableField","labelToShow","labelStyles","justifyContent","handleLinkClick","paddingLeft","marginLeft","labelProps","NotifType","insert","container","animationIn","animationOut","dismiss","duration","onScreen","pauseOnHover","showIcon","ShowMessage","titleIn","typeIn","messageIn","store","addNotification","message","dc","require","dimensionKpi","crossfilter","diagKpis","kpiStatuses","diags","iDiag","kpis","iKpi","diagName","kpiname","kpiStatus","kpiValue","generateData","dimension","groupKpi","group","theChart","rowChart","myRefChart","current","ordinalColors","elasticX","createRef","ref","ToolItemDragTypes","ToolItem","useDrag","minW","controlType","minH","toolItemTypeName","end","monitor","didDrop","handleEndDrag","collect","isDragging","drag","iconClass","displayName","toolBoxItems","getToolItemByName","tool","ToolBox","containerWidth","toolItem","FormText","rules","numeric","small","useContext","FormContext","register","setValue","unregister","paddingTop","paddingBottom","Field","Popup","basic","opacity","content","trigger","display","FormCheckbox","Checkbox","onChangeEvent","checked","FormDropDown","isRequired","required","fieldWrapperStyle","FormIconSelector","intialicon","currVal","myState","setMyState","onInput","FormColorSelector","intialcolor","FormRadio","dateRangeDropdownOptions","FormDateRange","initialValue","alwaysCustomRange","showMonthYearPicker","dateFormat","startDate","setStartDate","endDate","setEndDate","disableDatePicker","setDisableDatePicker","effectiveFormat","errors","selectsStart","date","selectsEnd","minDate","conditionOptions","FormFilterInput","FormImageCoord","currColor","setCurrColor","handleChangeName","handleChangeColor","StyleButton","onToggle","preventDefault","active","BLOCK_TYPES","BlockStyleControls","getSelection","blockType","getBlockForKey","getStartKey","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","FormRichText","initialData","refEditor","useRef","getInitialState","currEditorState","inlineStyle","RichUtils","toggleInlineStyle","toggleBlockType","focus","handleKeyCommand","command","onTab","rawContent","convertToRaw","FormFilterDynamicInput","filterFieldOptions","initialFilters","parentId","filters","setFilters","currParentId","setCurrParentId","Button","primary","filterToUse","renderFilters","createContext","Form","onSubmit","inputObj","inputObjId","setControlValues","setStateCb","setStateHook","useForm","handleSubmit","watch","obj","sanitizeObj","Provider","handleChange","path","iStyle","viewBox","fill","verticalAlign","getSvg","transform","iconProps","iconPropsFunction","FormTreeDropDown","labelClassName","searchPlaceholder","showSearch","allowClear","maxTagTextLength","treeNodeFilterProp","treeIcon","treeCheckStrictly","pointing","TreeDropdown","dropdownStyle","maxHeight","dropdownPopupAlign","adjustY","adjustX","extractName","groupingArr","join","filterObj","fields","_","pick","getMetadataOptions","field","descriptionJsx","subheader","getMetadataTreeDropdownOptions","names","treeFields","treeOptions","convertApiMetadataDims","apiMetadataDims","stackValue","getMetadataDimTreeDropdownOptions","dimName","findDimName","findInTree","arrTree","findChildren","sampleData","sampleGroups","COLORS","PieForReport","PI","chartContainerEl","rect","getClientRects","margin","top","bottom","renderPie","renderLegend","renderActiveShape","RADIAN","cx","cy","midAngle","innerRadius","outerRadius","startAngle","endAngle","sin","cos","PieResponsiveDataBase","onPieClick","sectorInfo","activeIndex","handleChartClick","getGroupingStackStr","groupingStack","groupingBoundVal","renderPieWithData","formattedData","formatApiData","datasetFilter","controlIdFilter","dataIndex","propVal","calculateActiveIndex","labelLine","isAnimationActive","activeShape","entry","onGroupSelect","initialGroupingVal","handleGroupSelect","grouping","previousProps","previousState","layoutName","treeDefaultExpandAll","PieResponsiveData","PieWithData","pieClickCallback","wrapperStyle","pieProps","BarChartForReport","renderChartContents","bAnimate","stackId","tick","interval","axisLine","CustomizedAxisTick","stroke","dy","textAnchor","PureComponent","CustomizedAxisTickTrial","BarChartWithData","seriesList","secondaryList","strokeWidth","BarResponsiveData","handleClick","seriesVal","activeCategoryIndex","activeSeries","origCatObj","origSeriesName","renderBars","uniqSeriesVals","seriesIndex","renderCustomizedLabel","mySeriesName","trianglePts","sideLen","points","getDataIndex","currDataCatObj","renderChartContentsUngroupedData","aggregation","uniq","getUniqueValues","currData","currCategoryVal","currCategoryObj","findRetList","formatBarchartData","stackStr","filterAtGroup","findFilterAtGroup","newStackStr","getChartContents","barProps","Series1","CustomizedLabel","textVal","dateParsed","dateObj","toLocaleDateString","renderLineChartContents","strokeDasharray","dot","animationDuration","currSeriesName","currSeriesVal","reformatLineChartData","allUniqeSeriesVals","reportMode","lineProps","nrOfLevels","textColor","colors","marginInPercent","maxWidth","chartValue","parseFloat","colorData","activeSectorIndex","cur","arr","curMax","b","sumValues","arrowData","pieRadius","Arrow","mx","my","strokeLinecap","ActiveSectorMark","renderGaugePlate","renderGaugeNeedle","gaugeProps","NoobForm","onMouseLeave","onMouseMove","onResizerMouseDown","onMouseUp","onDropControl","checkDroppable","controlIds","domControl","findControlDomById","rectContainer","yDelta","touches","clientY","xDelta","clientX","contains","origHeight","origWidth","rectResizing","checkOverlaps","checkLandingPadOverlap","findLandingPadsByParentControl","landingPad","rectLandingPad","hasOverlap","landingPadPotDrops","keyQuery","querySelectorAll","rect1","rect2","noHorzCollision","noVertCollision","bot","foundInvalid","overlapsFound","dataset","controltype","layoutw","layouth","dom","event","clearAllTemporaryClasses","domResizing","calculateNewSize","resizedControlPojo","findControlPojo","controlDom","layoutx","layouty","findControl","from","resizedControlDom","domControls","findPotentialDrops","maxX","maxY","currControl","currX","currY","retEl","firstChild","nextSibling","resizer","inX","inY","draggedItem","landingPadInfo","ControlDragTypes","CONTROL","checkDroppableControlLandingPad","checkDroppableControl","checkDroppableToolItem","droppedControl","retVal","landingPadX","layoutPos","landingPadY","landingPadsAll","landingPadsCovered","findCoveredLandingPads","controlsCovered","findCoveredControls","potentialDropsAll","removePreviousPotentialDrops","deficitW","deficitH","designerDom","query","querySelector","currLandingPadDom","potentialDropsNow","getPotentialDropsForMoving","potentialDropsPrevious","getPotentialDropsForNewItem","draggedItemW","draggedItemH","hoveredControlData","rectDraggedItem","foundOverlapWithDraggedItem","rectCurr","hasOverlapStrict","overlappedDom","prev","ctrlDest","itemDropped","landingPadPos","handleToolItemDrop","handleControlMoveWithLandingPad","handleControlMove","newDate","itemDroppedNew","ctrlDestNew","parentDropCallback","resizerMouseDown","parentCheckDroppable","isSelected","layoutWidth","iRow","iCol","adjustedX","adjustedY","fillMap","flatCoord","n","controlJsx","renderControl","jsx","newFills","getFills","emptyControlPojo","createEmptyControl","emptyControlJsx","renderControlsWithLayout","renderControlsAsSingleCol","controlsList","renderControls","controlsJsx","divStyle","onTouchEnd","onTouchMove","canDropCollectHandler","keyLandingPad","canDrop","ex","LandingPad","domParentCtrlId","canDropParentCallback","dropParentCallback","useDrop","accept","layoutPosIn","canDropCallback","isOver","canDropInLandingPad","drop","droppedItem","shallow","parentctrlid","LandingPads","droppingItemType","droppingItem","noobControlCanDropCallback","noobControlDropCallback","landingPadStyle","gridTemplateColumns","gridTemplateRows","j","createLandingPads","modalStyle","EditDialog","controlInfo","Modal","closeIcon","closeOnDimmerClick","Content","Description","ownProps","myId","stateControlData","canDropMe","isOverShallow","getItemType","getItem","ctrlStyle","widthOfCtrl","gridRowEnd","gridColumnEnd","domCtrlId","onTouchStart","Gauge","canvas","span","gauge","observer","MutationObserver","mutationsList","textChangeHandler","innerText","observe","characterData","attributes","childList","subtree","disconnect","donut","Donut","CanvasGauge","setTextField","setOptions","maxValue","setMinValue","minValue","animationSpeed","set","textRenderer","TextRenderer","percentage","displayedValue","el","innerHTML","toFixed","heightPx","widthPx","angle","lineWidth","radiusScale","pointer","limitMax","limitMin","strokeColor","generateGradient","highDpiSupport","staticZones","strokeStyle","min","max","staticLabels","font","labels","fractionDigits","ImageMapper","f","absPos","position","pointerEvents","zIndex","img","userSelect","watchedProps","nextProps","propChanged","some","isEqual","updateCacheMap","initCanvas","coords","fillColor","ctx","fillStyle","strokeRect","fillRect","beginPath","arc","closePath","v","slice","unshift","moveTo","lineTo","clientWidth","clientHeight","getContext","onLoad","renderPrefilledAreas","area","shape","getAttribute","onMouseEnter","clearRect","onImageClick","onImageMouseMove","imgWidth","scale","coord","preFillColor","scaleCoords","scaledCoords","val","idx","center","computeCenter","extendedArea","_id","onMouseOver","hoverOn","onMouseOut","hoverOff","mouseMove","click","href","src","useMap","alt","imageClick","imageMouseMove","renderAreas","MAP","MAP2","imageLoaded","scaledImgW","scaledImgH","hoveredArea","imageLoadHandler","origImgW","srcElement","origImgH","Image","onload","getImageUrl","maxWidthPx","propsMaxWidth","useOther","areaName","lowestProp","getLastGroupingItem","findApiData","kvPairsStr","imageUrl","mapToUse","getMapToUse","computedSize","computeWidthHeight","enterArea","leaveArea","getTipPosition","getTooltip","imageMapProps","buttonName","btnOnclick","ExternalContainerBase","getContentDiv","mode","isReporting","NoobControlContent","canDrag","isLoading","controlDataClone","groupValue","groupingValue","Dimmer","Loader","fetchPageData","fetchPageDataAsync","bogusDataUuids","findExecSummaryRecords","downloadParams","analysisPeriodFilter","analysisPeriod","cleanApiDataList","uuid","sort","aprStart","aprEnd","currAnalysisDate","analysisEndDate","closestApiDataStart","refDate","currApiData","currApiStart","findClosestStartDate","closestApiDataEndDate","filterExecSummaryByUuid","uuidParam","p","latestRecord","currLatestDate","currRecord","findRecordWithLatestEndDate","ReportForm","filteredApiData","isControlSolo","formWidth","groupsList","maxRow","findLastNonEmptyRow","currGroup","currGroupPagination","bSetPagination","groupType","pageBreak","groups","formStyle","pageBreakBefore","renderGroups","renderToolbarBtn","clsName","btnType","callback","Toolbar","menuItems","titleTooltip","renderFullMenu","renderCollapsedMenu","renderPageOptions","savedLayouts","setValueFunc","inherit","pageAssoc","childDefaultPage","displayWeb","displayReport","displayAsMapView","displayAsAnalysisView","findInheritedPage","findUserSetting","formArgs","inheritedPageRowStyle","renderHierPanelContent","DashboardContent","getLayoutName","setting","findNode","getLayoutObj","findLayout","renderDatasetFilters","border","iDataset","currDatasetFilters","iCtrl","currControlFilter","currStackStr","iStack","currStackFilter","onSubmitFilter","filterData","layoutObj","pageFiltersFormatted","layoutFilter","toLocaleLowerCase","AnalysisPeriod","renderPageFilter","setPageFilterControlValues","renderPageToolbar","formData","pageFilter","renderForm","hierarchyView","controlledExpansion","DesignerContentbase","DemoTree","selKey","selectedNodes","tree","domTreeNodes","checkedKeys","onEdit","setTimeout","onDel","confirm","setTreeRef","Filterer","treeDataArr","convertMasterDataToKeys","filterTreeNode","childNodes","availableItems","findMatchHierarchy","m","selectionType","hierarchy","kpiNameList","findMatchCategory","findMatchNodeType","kpi","GetAvailableItems","convertToDropdownOptions","imagesStrArr","SettingsContent","reduxStoreImages","useSelector","useDispatch","Segment","method","encType","settingsImageDropdown","filename","fileName","then","DEFAULTMAP","DEFAULT_COORDS","ImageMapConfigDialog","initialImage","initialMap","showOpenForm","onCloseOpenConfigDialog","dropdownImage","addingHotspot","setAddingHotspot","setMap","generateSpotName","candidateVal","candidateName","open","areaData","applyImageMapProps","mapParam","toggle","Actions","floated","nativeEvent","layerX","layerY","currCoords","mapClone","toolItemType","filterSettingsObj","setLayoutValues","applyUserTreeSettings","treeDataNoSettings","u","formattedNode","bShow","setShowConfigDialog","submittedData","onSubmitLayoutForm","onDelete","getSpecialProps","specialProps","renderCommonProps","renderProps","controlProps","namePrefix","foundSpecialProp","propDisabled","watchableFieldName","watchedFieldValue","shouldDisableProp","IconSelector","ColorSelector","renderMetadataField","metaFieldName","metaSpecialProps","renderLayoutProps","watchableFieldInitialValue","findWatchableField","getWatchableFieldName","showConfigDialog","setWatchedFieldValue","Divider","horizontal","renderControlProps","Message","header","DEFAULT_SIZES","AccordionPanel","onClickCollapseExpand","isCollapsed","panelContent","iconName","defaultPanelItems","helpText","ToolPanel","recalculatePanelSizes","panelsData","oneSize","panel","getPanelSizes","addRemovePanelTransition","panelEls","panelEl","panelDataClone","selectedPanelData","newPanelsData","getPanelContent","panelId","createPanels","panelItems","initializedPanelData","clonePanelsData","currPanelData","ResponsiveReactGridLayout","generateDOM","layouts","lg","l","static","borderRadius","comboInfo","renderContent","DesignerForm","mounted","initialLayout","measureBeforeMount","useCSSTransforms","isDroppable","rowHeight","onLayoutChange","cols","md","sm","xs","xxs","compactType","DesignerToolbar","DashboardDesignerContent","SaveAsDialog","showSaveForm","formLabel","onSave","onClose","scrolling","OpenDialog","onOpen","formsDesignerContent","configPageSettings","saveCallback","handleSave","saveAsCallback","openedLayoutName","handleCloseSave","layoutToUse","getLayoutToUse","openCallback","handleCloseOpenDlg","handleOpenLayout","defaultReturn","layoutFromApi","lastUpdateDate","HierarchyToolbar","onInsert","onSearchText","clsNamesDeleteBtn","bEnableDelete","ToolbarPanel","HierarchyDesigner","deletedNode","deletedNodeObj","currentTarget","SpecialTabContent","hierarchyPropName","findSettingNode","findFirstNode","setPdfFormValues","createLinkifyPlugin","component","alert","downloadOptions","formatDate","constructReportTitle","execReport","DownloadCenterContent","downloadExecReport","createObjectURL","Blob","link","setAttribute","body","downloading","setDownloading","downloadProgress","setDownloadProgress","apiResponse","execReports","tag","convertApiMetadataFilters","apiMetadata","metadataDims","requestItems","onTreeSelect","extra","renderFilterSegment","filterFields","filtersMetadata","renderFilterFields","DataDesignerForm","previewIcon","previewText","fetchingPreview","formInvalid","renderPreviewTable","renderDataDesignerPanelContent","DataDesignerContainer","HierarchyScope","hierDsgnKpiGroup","dimensionsMetadata","dummyVendorModels","categoryLookup","itemConds","generateApiData","retlist","currVendor","currModel","deviceId","vendor","model","itemCond","getDimensionObj","cfData","groupingsList","pickedData","metaDimHier4Pie","metaDimHier4Bar","reformatMetaDim","metaDimArray","metaNode","panes","menuItem","pane","Tab","Pane","mainAppState","renderActiveOnly","extractLayouts","nodesArr","findNodeLayout","controlsArr","childrenControls","adjustControlCoords","currLayoutControls","currRowOffset","currLayoutName","lastNonEmptyRow","adjustedControls","newY","allControls","allLayouts","apiDataMap","iLayout","reformattedControls","mergeLayoutControls","allControlsLayoutData","vals","getFirstVal","searchParams","getRequestParams","App","fetchSavedLayouts","isTouch","documentElement","DndProvider","backend","HTML5Backend","TouchBackend","fetchHierarchy","masterData","fetchHierarchyKpi","fetchHierarchyConso","fetchDimensions","createStore","reducers","applyMiddleware","thunk"],"mappings":"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","file":"static/js/main.7f66a30f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst getDocUrlWithoutPort = () => {\r\n    const temp = document.URL.replace(\"http://\", '');\r\n    var toks = temp.split(':');\r\n    if (toks && toks.length > 0) {\r\n        return `http://${toks[0]}:60000/api`;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default axios.create({\r\n    //baseURL: 'http://localhost:60000/api'\r\n    baseURL: getDocUrlWithoutPort() || 'http://localhost:60000/api'\r\n    //baseURL: 'http://localhost:3001'\r\n});\r\n\r\n\r\nconst getDocUrlWithoutPortFrontEnd = () => {\r\n    const temp = document.URL.replace(\"http://\", '');\r\n    var toks = temp.split(':');\r\n    if (toks && toks.length > 0) {\r\n        return `http://${toks[0]}:5000`;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport const getAprBaseUrl = () => {\r\n    return getDocUrlWithoutPortFrontEnd() || 'http://localhost:5000';\r\n}\r\n\r\nexport const aprFrontEndApi = axios.create({\r\n    baseURL: getAprBaseUrl()\r\n});\r\n","// Helper functions for tree\r\n// TODO: Rename this file to TreeHelper instead\r\nexport const defaultMatcher = (filterText, node) => {\r\n    return node.name.toLowerCase().indexOf(filterText.toLowerCase()) !== -1;\r\n};\r\n\r\nexport const titleMatcher = (filterText, node) => {\r\n    return node.title.toLowerCase().indexOf(filterText.toLowerCase()) !== -1;\r\n};\r\n\r\n// Returns true or false only\r\nexport const nodeExists = (node, filter, matcher) => {\r\n    return matcher(filter, node) || // i match\r\n        (node.children && // or i have decendents and one of them match\r\n            node.children.length &&\r\n            !!node.children.find(child => nodeExists(child, filter, matcher)));\r\n};\r\n\r\nexport const filterTreeEx = (nodes, filter, matcher = titleMatcher) => {\r\n    return nodes.reduce( (acc, curr) => {\r\n        return acc.concat(filterTree(curr, filter, matcher))\r\n    }, []);\r\n};\r\n\r\n\r\nexport const filterTree = (node, filter, matcher = titleMatcher) => {\r\n    // If im an exact match then all my children get to stay\r\n    if (matcher(filter, node) || !node.children) {\r\n        return node;\r\n    }\r\n    // If not then only keep the ones that match or have matching descendants\r\n    const filtered = node.children\r\n        .filter(child => nodeExists(child, filter, matcher))\r\n        .map(child => filterTree(child, filter, matcher));\r\n    return Object.assign({}, node, {children: filtered});\r\n};\r\n\r\nexport const expandFilteredNodes = (node, filter, matcher = defaultMatcher) => {\r\n    let children = node.children;\r\n    if (!children || children.length === 0) {\r\n        return Object.assign({}, node, {toggled: false});\r\n    }\r\n    const childrenWithMatches = node.children.filter(child => nodeExists(child, filter, matcher));\r\n    const shouldExpand = childrenWithMatches.length > 0;\r\n    // If im going to expand, go through all the matches and see if thier children need to expand\r\n    if (shouldExpand) {\r\n        children = childrenWithMatches.map(child => {\r\n            return expandFilteredNodes(child, filter, matcher);\r\n        });\r\n    }\r\n    return Object.assign({}, node, {\r\n        children: children,\r\n        toggled: shouldExpand\r\n    });\r\n};\r\n\r\nexport const findNodeByKey = (data, key) => {\r\n    if (!data) {\r\n        return null;\r\n    }\r\n    for (let i = 0; i < data.length; i++) {\r\n        let item = data[i];\r\n        if (item.key === key) {        \r\n            return {\r\n                item,\r\n                index: i,\r\n                parentArr: data\r\n            };\r\n        }\r\n        if (item.children) {\r\n            let childFind = findNodeByKey(item.children, key);\r\n            if (childFind) {\r\n                return childFind;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const findNodeByPos = (data, posArr, currLevel=0) => {\r\n    // if (posArr.length === currLevel) {\r\n    //     return data[posArr]\r\n    // }\r\n}\r\n\r\n\r\n// Remove the 'parent' object so that we can stringify the object\r\nexport const sanitizeTreeData = (nodeList) => {\r\n    let retList = [];\r\n\r\n    //debugger\r\n    for (let i = 0; i < nodeList.length; i++) {\r\n        let currNode = nodeList[i];\r\n        let {parent, hierStack, ...cleanNode} = {...currNode};\r\n        if (cleanNode.children) {\r\n            cleanNode.children = sanitizeTreeData(cleanNode.children)\r\n        }\r\n        retList.push(cleanNode);\r\n    }\r\n\r\n    return retList;\r\n}\r\n\r\nexport const reconstructHierarchyStack = (apiNodes, stack=[], parent=null) => {\r\n    if (!apiNodes) {\r\n      return null;\r\n    }\r\n  \r\n    for(let i = 0; i < apiNodes.length; i++) {\r\n      let apiNode = apiNodes[i];\r\n      apiNode.hierStack = [...stack, i];\r\n      apiNode.parent = parent;\r\n      reconstructHierarchyStack(apiNode.children, apiNode.hierStack, apiNode);\r\n    }\r\n  \r\n    return apiNodes;\r\n}\r\n\r\nexport const applyUserTreeSettings = (treeDataNoSettings, userSettings) => {\r\n    if (!treeDataNoSettings || !userSettings) {\r\n        return [];\r\n    }\r\n\r\n    let retList = [];\r\n    for (let i = 0; i < treeDataNoSettings.length; i++) {\r\n        let currNode = treeDataNoSettings[i];\r\n        let findUserSetting = userSettings.find(u => u.key === currNode.key);\r\n        let formattedNode = {...currNode, value: currNode.key};\r\n        retList.push(formattedNode);\r\n        if (findUserSetting) {\r\n            formattedNode.title = findUserSetting.dispName;\r\n        }\r\n        formattedNode.children = applyUserTreeSettings(formattedNode.children, userSettings);\r\n    }\r\n\r\n    return retList;\r\n}","import masterData, {aprFrontEndApi} from '../api/masterData';\r\nimport _ from 'lodash';\r\nimport {sanitizeTreeData} from '../helper/treefilter';\r\n\r\nexport const CLICK_MENU = \"CLICK_MENU\";\r\nexport const DRAG_TOOLITEM_START = \"DRAG_TOOLITEM_START\";\r\nexport const SELECT_TOOLPANEL_TREE = \"SELECT_TOOLPANEL_TREE\"\r\nexport const SELECT_HIER_DESIGNER_TREE = \"SELECT_HIER_DESIGNER_TREE\"\r\nexport const UPDATE_HIER_DESIGNER_TREE = \"UPDATE_HIER_DESIGNER_TREE\"\r\nexport const INSERT_HIER_DESIGNER_TREE = \"INSERT_HIER_DESIGNER_TREE\"\r\nexport const FILTER_HIER_DESIGNER_TREE = \"FILTER_HIER_DESIGNER_TREE\"\r\nexport const FETCH_HIERARCHY = \"FETCH_HIERARCHY\"\r\nexport const FETCH_HIERARCHYCONSO = \"FETCH_HIERARCHYCONSO\"\r\nexport const FETCH_AVAILABLEDATA = \"FETCH_AVAILABLEDATA\"\r\nexport const FETCH_SAVEDLAYOUTS = \"FETCH_SAVEDLAYOUTS\"\r\nexport const FETCH_HIERARCHYVIEWS = \"FETCH_HIERARCHYVIEWS\"\r\nexport const FETCH_DIMENSIONS = \"FETCH_DIMENSIONS\"\r\nexport const FETCH_HIERARCHYKPI = \"FETCH_HIERARCHYKPI\"\r\nexport const FETCH_IMAGES = \"FETCH_IMAGES\"\r\nexport const SELECT_CONTROL = \"SELECT_CONTROL\"\r\nexport const SELECT_PAGE = \"SELECT_PAGE\"\r\nexport const UPDATE_DESIGNER_LAYOUT = \"UPDATE_DESIGNER_LAYOUT\";\r\nexport const OPEN_LAYOUT = \"OPEN_LAYOUT\";\r\nexport const SAVE_DESIGNER_LAYOUT = \"SAVE_DESIGNER_LAYOUT\";\r\nexport const UPDATE_CONTROL_PROPS = \"UPDATE_CONTROL_PROPS\";\r\nexport const UPDATE_LAYOUT_PROPS = \"UPDATE_LAYOUT_PROPS\";\r\nexport const DELETE_CONTROL = \"DELETE_CONTROL\";\r\nexport const SAVE_HIER_DESIGN_NODE = \"SAVE_HIER_DESIGN_NODE\";\r\nexport const SAVE_HIERARCHYVIEW = \"SAVE_HIERARCHYVIEW\";\r\nexport const SELECT_DASHBOARD_TREE = \"SELECT_DASHBOARD_TREE\";\r\nexport const CLICK_CHART_SLICE = \"CLICK_CHART_SLICE\";\r\nexport const SELECT_CHART_GROUP = \"SELECT_CHART_GROUP\";\r\nexport const APPLY_IMAGEMAP_PROPS = \"APPLY_IMAGEMAP_PROPS\";\r\nexport const CLICK_PAGE_LINK = \"CLICK_PAGE_LINK\";\r\n\r\nexport function menuClicked(menuName) { \r\n    return {\r\n      type: CLICK_MENU,\r\n      payload: menuName\r\n    };\r\n}\r\n\r\nexport function toolItemDragged(toolName) { \r\n  return {\r\n    type: DRAG_TOOLITEM_START,\r\n    payload: toolName\r\n  };\r\n}\r\n\r\nexport function selectToolPanelTree(hierarchyNode) {\r\n  return {\r\n    type: SELECT_TOOLPANEL_TREE,\r\n    payload: {\r\n      ...hierarchyNode\r\n    }\r\n  };\r\n}\r\n\r\nexport function selectHierDesignerTree(hierarchyNode) {\r\n  return {\r\n    type: SELECT_HIER_DESIGNER_TREE,\r\n    payload: {\r\n      ...hierarchyNode\r\n    }\r\n  };\r\n}\r\n\r\nexport function updateHierDesignerTree(hierarchyArr) {\r\n  return {\r\n    type: UPDATE_HIER_DESIGNER_TREE,\r\n    payload: hierarchyArr\r\n  }\r\n}\r\n\r\n// Not used anymore\r\nexport function filterHierDesignerTree(filter) {\r\n  return {\r\n    type: FILTER_HIER_DESIGNER_TREE,\r\n    payload: filter\r\n  }\r\n}\r\n\r\n\r\nexport function insertNewNode() {\r\n  // No payload since the reducer knows who is the selected node\r\n  return {\r\n    type: INSERT_HIER_DESIGNER_TREE\r\n  }\r\n}\r\n\r\n// Actually, this is just \"Apply\" to local state\r\n// This does not persist to the database yet\r\nexport function saveNodeConfig(nodeInfo) {\r\n  return {\r\n    type: SAVE_HIER_DESIGN_NODE,\r\n    payload: nodeInfo\r\n  }\r\n}\r\n\r\nexport const fetchHierarchy = () => async dispatch => { \r\n  console.log('[action] fetchHierarchy');\r\n  let response = await masterData.get('hierarchy');\r\n\r\n  dispatch({\r\n    type: FETCH_HIERARCHY,\r\n    payload: response\r\n  });\r\n\r\n  return true;\r\n}\r\n\r\n// Get the consolidated hierarchy from various collection dates\r\nexport const fetchHierarchyConso = () => async dispatch => { \r\n  console.log('[action] fetchHierarchyConso');\r\n  let response = await masterData.get('hierarchy/conso');\r\n\r\n  dispatch({\r\n    type: FETCH_HIERARCHYCONSO,\r\n    payload: response\r\n  });\r\n\r\n  return true;\r\n}\r\n\r\nexport const fetchSavedLayouts = () => async dispatch => { \r\n  console.log('[action] fetchSavedLayouts');\r\n  //const response = await masterData.get('layout')\r\n  const response = await aprFrontEndApi.get('fetchSavedLayouts')\r\n\r\n  dispatch({\r\n    type: FETCH_SAVEDLAYOUTS,\r\n    payload: response\r\n  });\r\n}\r\n\r\nexport const fetchHierarchyViews = () => async dispatch => { \r\n  console.log('[action] fetchHierarchyViews');\r\n  //const response = await masterData.get('hierarchyviews')\r\n  const response = await aprFrontEndApi.get('fetchHierarchyViews')\r\n\r\n  dispatch({\r\n    type: FETCH_HIERARCHYVIEWS,\r\n    payload: response\r\n  });\r\n}\r\n\r\nexport const fetchDimensions = () => async dispatch => { \r\n  console.log('[action] fetchDimensions');\r\n  const response = await masterData.get('dimensions')\r\n\r\n  dispatch({\r\n    type: FETCH_DIMENSIONS,\r\n    payload: response\r\n  });\r\n}\r\n\r\nexport const fetchHierarchyKpi = () => async dispatch => { \r\n  console.log('[action] fetchHierarchyKpi');\r\n  const response = await masterData.get('HierarchyKpi')\r\n\r\n  dispatch({\r\n    type: FETCH_HIERARCHYKPI,\r\n    payload: response\r\n  });\r\n}\r\n\r\nexport const fetchImages = () => async dispatch => { \r\n  console.log('[action] fetchImages');\r\n  const response = await aprFrontEndApi.get('getfilelist')\r\n\r\n  dispatch({\r\n    type: FETCH_IMAGES,\r\n    payload: response\r\n  });\r\n}\r\n\r\nexport const deleteImage = (filename) => async dispatch => { \r\n  console.log('[action] fetchImages');\r\n  const response = await aprFrontEndApi.post('deletefile', {\r\n    name: filename\r\n  })\r\n}\r\n\r\nexport const selectedControl = (controlId) => {\r\n  return {\r\n    type: SELECT_CONTROL,\r\n    payload: controlId\r\n  }\r\n}\r\n\r\nexport const selectedPage = () => {\r\n  return {\r\n    type: SELECT_PAGE,\r\n    payload: null\r\n  }\r\n}\r\n\r\n// For UI update only, not yet persisted to the storage like DB or browser storage\r\n// Assumption is that validations have been performed on the updated controls\r\nexport const updateLayout = (updatedControls) => {\r\n  return {\r\n    type: UPDATE_DESIGNER_LAYOUT,\r\n    payload: updatedControls\r\n  }\r\n}\r\n\r\nexport const openLayout = (controls, layoutData) => {\r\n  return {\r\n    type: OPEN_LAYOUT,\r\n    payload: {\r\n      controls,\r\n      layoutData\r\n    }\r\n  };\r\n}\r\n\r\n// Save the layout to persistent storage like database or web local storage\r\n// TODO: Warn user, or inform user about replacing file, if that name already exists\r\nexport const saveLayout = (layout, name, layoutData) => async dispatch => { \r\n  console.log('[action] saveLayout');\r\n\r\n  let response = null;\r\n  try {\r\n    response = await aprFrontEndApi.post('createupdatelayout', {\r\n      name,\r\n      layoutJson: JSON.stringify(layout),\r\n      numRows: layoutData.rows,\r\n      numCols: layoutData.columns,\r\n      pageFilterFields: JSON.stringify(layoutData.pageFilterFields),\r\n      pageApiData: JSON.stringify(layoutData.pageApiData),\r\n    });  \r\n  }\r\n  catch(err) {\r\n    return err;\r\n  }\r\n\r\n  dispatch({\r\n    type: SAVE_DESIGNER_LAYOUT,\r\n    payload: {layout, name, response}\r\n  });\r\n\r\n  return true;\r\n}\r\n\r\n/*\r\n// Save the layout to persistent storage like database or web local storage\r\n// TODO: Warn user, or inform user about replacing file, if that name already exists\r\nexport const saveLayoutOld = (layout, name, layoutData) => async dispatch => { \r\n  console.log('[action] saveLayout');\r\n\r\n  let response = null;\r\n  try {\r\n    response = await masterData.post('layout', {\r\n      name,\r\n      layoutJson: JSON.stringify(layout),\r\n      numRows: layoutData.rows,\r\n      numCols: layoutData.columns,\r\n      pageFilterFields: JSON.stringify(layoutData.pageFilterFields)\r\n    });  \r\n  }\r\n  catch(err) {\r\n    return err;\r\n  }\r\n\r\n  dispatch({\r\n    type: SAVE_DESIGNER_LAYOUT,\r\n    payload: {layout, name, response}\r\n  });\r\n\r\n  return true;\r\n}\r\n*/\r\n\r\n// Save the layout to persistent storage like database or web local storage\r\n// TODO: Warn user, or inform user about replacing file, if that name already exists\r\nexport const saveHierarchyView = (hierarchyData, userSettings) => async dispatch => { \r\n  console.log('[action] saveHierarchyView');\r\n\r\n  let response = null;  \r\n  let formattedHierarchyData = sanitizeTreeData(hierarchyData);\r\n  try {\r\n    //response = await masterData.post('hierarchyviews', {\r\n    response = await aprFrontEndApi.post('saveHierarchyView', {\r\n      hierarchyJson: JSON.stringify(formattedHierarchyData),\r\n      nodeSettingsJson: JSON.stringify(userSettings),\r\n    });  \r\n  }\r\n  catch(err) {\r\n    return err;\r\n  }\r\n\r\n  dispatch({\r\n    type: SAVE_HIERARCHYVIEW,\r\n    payload: {hierarchyData, userSettings}\r\n  });\r\n\r\n  return true;\r\n}\r\n\r\nexport const requestDownloadReport = (requestParams) => async dispatch => { \r\n  let response = null;\r\n  try {\r\n    response = await aprFrontEndApi.post('createPdf', \r\n    {\r\n      ...requestParams,\r\n    },\r\n    {\r\n      responseType: 'arraybuffer', // important...because we need to convert it to a blob. If we don't specify this, response.data will be the raw data. It cannot be coverted to blob directly.\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/pdf'\r\n      }\r\n  });  \r\n\r\n  }\r\n  catch(err) {\r\n    console.log('[requestDownloadReport][ERROR]', err);\r\n    return err\r\n  }\r\n\r\n  return response;\r\n}\r\n\r\nexport const updateControlProps = (newControlData) => {\r\n  return {\r\n    type: UPDATE_CONTROL_PROPS,\r\n    payload: newControlData\r\n  }\r\n}\r\n\r\nexport const updateLayoutProps = (newLayoutProps) => {\r\n  return {\r\n    type: UPDATE_LAYOUT_PROPS,\r\n    payload: newLayoutProps\r\n  }\r\n}\r\n\r\nexport const deleteControl = (controlData) => {\r\n  return {\r\n    type: DELETE_CONTROL,\r\n    payload: controlData\r\n  }\r\n}\r\n\r\nexport function selectDashboardTree(selectedNodeKey) {\r\n  return {\r\n    type: SELECT_DASHBOARD_TREE,\r\n    payload: {\r\n      selectedNodeKey\r\n    }\r\n  };\r\n}\r\n\r\n\r\nexport function clickChartSlice(sliceInfo, seriesInfo, groupingStackStr, datasetId, controlId) {\r\n  return {\r\n    type: CLICK_CHART_SLICE,\r\n    payload: {\r\n      sliceInfo,\r\n      seriesInfo,\r\n      groupingStackStr,\r\n      datasetId,\r\n      controlId\r\n    }\r\n  };\r\n}\r\n\r\n\r\nexport function selectChartGroup(groupVal, controlData) {\r\n  return {\r\n    type: SELECT_CHART_GROUP,\r\n    payload: {\r\n      groupVal,\r\n      controlData\r\n    }\r\n  };\r\n}\r\n\r\n\r\nexport function applyImageMapProps(image, newMap, updatedControl) {\r\n  return {\r\n    type: APPLY_IMAGEMAP_PROPS,\r\n    payload: {\r\n      image,\r\n      newMap,\r\n      updatedControl\r\n    }\r\n  };\r\n}\r\n\r\nexport const clickPageLink = (controlData) => {\r\n  return {\r\n    type: CLICK_PAGE_LINK,\r\n    payload: {\r\n      controlData\r\n    }\r\n  }\r\n}","import { SELECT_TOOLPANEL_TREE, \r\n          SELECT_CONTROL, \r\n          SELECT_PAGE,\r\n          UPDATE_DESIGNER_LAYOUT,\r\n          OPEN_LAYOUT,\r\n          UPDATE_CONTROL_PROPS,\r\n          UPDATE_LAYOUT_PROPS,\r\n          DELETE_CONTROL,\r\n          SAVE_DESIGNER_LAYOUT,\r\n          APPLY_IMAGEMAP_PROPS,\r\n          deleteControl} from \"../actions/index\";\r\n\r\nimport {DUMMY_APR_METADATA, OLD_DUMMY_DATA, dropdownOptions, dropdownOptionsFew} from '../helper/dummyMetadata';\r\nimport {uuidv4} from '../helper/util';\r\n\r\n// Note: if using CSS grid to populate the layout, the items must be sorted by row and column\r\n// This is for the Forms layout\r\n// TODO: Control Id's: we need to generate a unique one. Because if you open a saved layout and it has the same id but different props, react will pass cached props.\r\n// Ideally, this function should return immediately if metadata has not been fetched yet.\r\n// \r\nconst generateDefaultLayout = (metadata) => {\r\n\r\n  if (!metadata) {\r\n    return [];\r\n  }\r\n\r\n  const suffix = '-'+ uuidv4();\r\n\r\n  // [1] Section\r\n  return [\r\n  // {i: 'ctrl-combo0', x: 0, y: 0, w: 3, h: 1, ctrlType: 'combo', data: {\r\n  //     placeholder: 'Please select...',\r\n  //     options: dropdownOptions,\r\n  //     label: 'Courses:'\r\n  // }},\r\n\r\n\r\n  {i: 'ctrl-section0'+suffix, x: 0, y: 0, w: 12, h: 1, ctrlType: 'section', data: {\r\n      title: 'Default Section',\r\n      //backgroundColor: 'lightsteelblue'\r\n      level: 1\r\n  }},\r\n\r\n  // {i: 'ctrl-label0X'+suffix, x: 0, y: 1, w: 3, h: 1,ctrlType: 'label', data: {\r\n  //   //label: 'This is the default sample layout. In the Page Designer, chart data being displayed below are sample data only!',\r\n  //   label: 'Default label if API data cannot be acquired',\r\n  //   color: 'black',\r\n  //   backgroundColor: 'khaki',\r\n  //   fontSize: '14',\r\n  //   icon: 'lightbulb',\r\n  //   alignment: 'center',\r\n  //   linkedPage: null,\r\n  //   apiFieldName: null,    \r\n  // }},\r\n\r\n  //[2] Description\r\n  // {i: 'ctrl-richText0'+suffix, x: 0, y: 2, w: 3, h: 4, ctrlType: 'richtext',       \r\n  //     data: {\r\n  //         label: 'Description:',\r\n  //         placeholder: 'Enter Description...',\r\n  //         richTextData: null,\r\n  //         apiFieldName: null,\r\n  //         alignment: 'left',\r\n  //         dataProps: {\r\n  //           datasetId: 1,\r\n  //           requestType: null,\r\n  //           filterName: null,\r\n  //           filterValue: null\r\n  //         }\r\n  //     }},\r\n\r\n  // {i: 'ctrl-frame'+suffix, x: 0, y: 2, w: 3, h: 4, ctrlType: 'frame',       \r\n  // data: {\r\n  //     url: 'https://www.youtube.com/embed/cde9qNtaoog'\r\n  // }},\r\n\r\n  // [2 NEW] Gauge chart\r\n  // {i: 'ctrl-gauge0'+suffix, x: 0, y: 2, w: 6, h: 6, ctrlType: 'gauge',       \r\n  //     data: {\r\n  //         label: 'Gauge:',\r\n  //         dataProps: {\r\n  //           datasetId: \"2\",\r\n  //           requestType: 'GetKpi',\r\n  //           groupings: [], // multiselect\r\n  //           filtersList: [] // excluding analysis period...or we just leave the analysis period to the page-filter?\r\n  //           /*\r\n  //           {name: \"\", value: \"\"}\r\n  //           */\r\n  //         }\r\n  //     }},\r\n\r\n  // [3 new] Pie Chart\r\n  // {i: 'ctrl-pie0X'+suffix, x: 0, y: 2, w: 6, h: 8, ctrlType: 'pie',       \r\n  //     data: {\r\n  //         label: 'Pie:',\r\n  //         dataProps: {\r\n  //           datasetId: \"0\",\r\n  //           requestType: 'GetDeviceCounts',\r\n  //           categories: '',\r\n  //           //aggregation: 'count'\r\n  //         }\r\n  //     }},\r\n\r\n  // // [4 new] Bar Chart\r\n  // {i: 'ctrl-bar0X'+suffix, x: 6, y: 2, w: 6, h: 8, ctrlType: 'barchart',       \r\n  //     data: {\r\n  //         label: 'Bar:',\r\n  //         stacked: false,\r\n  //         dataProps: {\r\n  //           datasetId: \"0\",\r\n  //           requestType: 'GetDeviceCounts',\r\n  //           categories: '', // For a vertical bar chart, this is the X-axis\r\n  //           seriesName: '', // For a vertical bar chart, this is the Y-axis (e.g. count)\r\n  //           //aggregation: 'count'\r\n  //         }\r\n  //     }},\r\n\r\n  // //[2 NEW] Gauge chart\r\n  // {i: 'ctrl-gauge0x'+suffix, x: 0, y: 14, w: 6, h: 4, ctrlType: 'gauge',       \r\n  //     data: {\r\n  //         label: 'Gauge:',\r\n  //         percent: 95.5\r\n  // }},\r\n\r\n  // // Image Map\r\n  // {i: 'ctrl-imageMap0Y'+suffix, x: 6, y:14, w: 6, h: 4,ctrlType: 'imageMap', data: {\r\n  //   label: 'Image Map:',\r\n  //   dataProps: {\r\n  //     datasetId: 1,\r\n  //     requestType: 'GetPlantKpi',\r\n  //     columns: []\r\n  //   },\r\n  //   imageProps: {\r\n  //     image: '',\r\n  //     map: {        \r\n  //         name: '',\r\n  //         areas: []\r\n  //     }\r\n  //   },\r\n  // }},\r\n\r\n  // {i: 'ctrl-table0X'+suffix, x: 0, y:2, w: 12, h: 4,ctrlType: 'table', data: {\r\n  //   label: 'Table:',\r\n  //   showFilters: true,\r\n  //   showPaginator: true,\r\n  //   showFooter: true,\r\n  //   dataProps: {\r\n  //     datasetId: '0', // make it a string. Because if the value is 0, it does not appear as default value of FormText\r\n  //     requestType: 'GetDeviceDetails',\r\n\r\n  //     specifyColumns: true,\r\n  //     // A. Will only be visiable if specifyColumns = true\r\n  //     columns: [],\r\n\r\n  //     // B. Will only be visiable if specifyColumns = false\r\n  //     categories: null,\r\n  //     seriesName: null,\r\n\r\n  //     filterName: null,\r\n  //     filterValue: null,\r\n  //     //aggregation: 'count'\r\n  //   }\r\n  // }},\r\n\r\n\r\n  // // [3] Date\r\n  // {i: 'ctrl-date0', x: 6, y: 1, w: 3, h: 1, ctrlType: 'date'},\r\n\r\n  // // [4] Status\r\n  // {i: 'ctrl-status0', x: 6, y: 2, w: 3, h: 1, ctrlType: 'status'},\r\n\r\n  // [5] Priority\r\n  // {i: 'ctrl-combo0X', x: 9, y: 2, w: 3, h: 1, ctrlType: 'combo', data: {\r\n  //     placeholder: 'Please select...',\r\n  //     options: dropdownOptions,\r\n  //     label: 'Courses:'\r\n  // }},\r\n\r\n  // [6] User\r\n  // {i: 'ctrl-user0', x: 6, y: 4, w: 3, h: 1, ctrlType: 'user'},\r\n  // {i: 'combo1', x: 6, y: 4, w: 3, h: 1, ctrlType: 'combo', data: {\r\n  //     placeholder: 'Please Select...',\r\n  //     options: dropdownOptions,\r\n  //     label: 'Please select:'\r\n  // }},    \r\n\r\n  // [7] Attachments\r\n  //{i: 'ctrl-attachment0', x: 9, y: 1, w: 3, h: 2,ctrlType: 'attachment'},\r\n  // [7 New] Label\r\n  // {i: 'ctrl-label0X', x: 9, y: 1, w: 3, h: 1,ctrlType: 'label', data: {\r\n  //   label: 'I am a label',\r\n  //   color: 'blue',\r\n  //   backgroundColor: 'khaki',\r\n  //   fontSize: '18',\r\n  //   icon: 'tag'\r\n  // }},\r\n\r\n\r\n  // [8] Remarks\r\n  // {i: 'ctrl-textbox0', x: 9, y: 4, w: 3, h: 1,ctrlType: 'textbox', data: {\r\n  //   placeholder: 'Input Remarks...',\r\n  //   label: 'Remarks:'\r\n  // }},\r\n\r\n  // [9] DatePicker\r\n  // {i: 'ctrl-date0X', x: 9, y: 3, w: 3, h: 1,ctrlType: 'date', data: {\r\n  //   label: 'Analysis Period:'\r\n  // }},\r\n\r\n  // [B] Subsection\r\n  // {i: 'ctrl-section1', x: 0, y: 5, w: 12, h: 1, ctrlType: 'section', data: {\r\n  //     title: 'Loop Summary',\r\n  //     //backgroundColor: 'lightsteelblue'\r\n  //     level: 2\r\n  // }},\r\n\r\n  // [1] History\r\n  //{i: 'ctrl-history0', x: 0, y: 6, w: 12, h: 2, ctrlType: 'history'},\r\n\r\n  //[2] Table - 1\r\n  // {i: 'ctrl-table0X'+suffix, x: 0, y:6, w: 12, h: 2,ctrlType: 'table', data: {\r\n  //   label: 'Table:'\r\n  // }},\r\n\r\n  // //[2] Table - 2\r\n  // {i: 'ctrl-table1', x: 3, y: 8, w: 3, h: 2,ctrlType: 'table', data: {\r\n  //   label: 'Table:'\r\n  // }},\r\n  // // [2] Table - 3\r\n  // {i: 'ctrl-table2', x: 6, y: 8, w: 3, h: 2,ctrlType: 'table', data: {\r\n  //   label: 'Table:'\r\n  // }},\r\n  // // [2] Table - 4\r\n  // {i: 'ctrl-table3', x: 9, y: 8, w: 3, h: 2,ctrlType: 'table', data: {\r\n  //   label: 'Table:'\r\n  // }},\r\n\r\n  // dc bar chart\r\n  // {i: 'ctrl-dcbar0', x: 6, y:1, w: 3, h: 4,ctrlType: 'dcbar', data: {\r\n  //   label: 'DC Chart:'\r\n  // }},\r\n  // dc bar chart\r\n  // {i: 'ctrl-imageMap0X', x: 6, y:1, w: 3, h: 4,ctrlType: 'imageMap', data: {\r\n  //   label: 'Image Map:'\r\n  // }},\r\n\r\n  // Line Chart\r\n  // {i: 'ctrl-line0' + suffix, x: 0, y: 2, w:6, h: 6, ctrlType: 'line', data: {\r\n  //   label: 'Line Chart',\r\n  //   unit: '%',\r\n  //   dataProps: {\r\n  //     datasetId: 2,\r\n  //     requestType: 'GetAlarmOccurrenceRatio',\r\n  //     categories: null,\r\n  //     seriesName: null,\r\n  //     filterName: null,\r\n  //     filterValue: null,      \r\n  //   }\r\n  // }}\r\n\r\n  ];\r\n}\r\n\r\nconst defaultLayoutData = {\r\n  columns: 12,\r\n  rows: 20,\r\n  pageFilterFields: [],\r\n  pageApiData: 'https://0kwuefbg37.execute-api.ap-south-1.amazonaws.com/Initial/execsummary'\r\n}\r\n\r\n// This is the default layout for the Dashboard\r\nconst generateDefaultDashboard = () => {\r\n  return [\r\n    // [1] Section Title\r\n    {i: 'ctrl-section0', x: 0, y: 0, w: 12, h: 2, ctrlType: 'section', data: {\r\n        title: 'Plant Overall Status',\r\n        level: 1\r\n    }},\r\n\r\n    // [2] Pie Chart\r\n    {i: 'ctrl-pie0', x: 0, y: 2, w: 4, h: 8, ctrlType: 'pie',       \r\n        data: {\r\n        }\r\n    },\r\n\r\n    // [3] Bar Chart\r\n    {i: 'ctrl-barchart0', x: 4, y: 2, w: 4, h: 8, ctrlType: 'barchart',       \r\n        data: {\r\n        }\r\n    },\r\n\r\n    // Sample combobox\r\n    {i: 'ctrl-combo0', x: 8, y: 2, w: 4, h: 2, ctrlType: 'combo',       \r\n        data: {\r\n        }\r\n    }, \r\n    {i: 'ctrl-combo1', x: 8, y: 4, w: 4, h: 2, ctrlType: 'combo',       \r\n        data: {\r\n        }\r\n    }, \r\n       \r\n  ];\r\n}\r\n\r\n\r\n\r\nconst defaultState = {\r\n    toolPanelTreeSelected: null, // to delete...this is used inside the RGL tab only\r\n    //selectedControlId: null, // Don't put here. Just put inside the controls data. This is to avoid rendering all controls.\r\n    // It is OK to put the selectedControlId inside the reducer for showing the Control Props\r\n    resizingControlId: null, // try to just use local state to keep track. The whole designer only needs to know after resizing.\r\n    layout: generateDefaultLayout(DUMMY_APR_METADATA),\r\n    layoutData: defaultLayoutData,\r\n\r\n    // For the dashboard\r\n    dashLayout: generateDefaultDashboard(),\r\n    dashLayoutData: {},\r\n\r\n    // For the metadata in configuring the data sources\r\n    metadata: OLD_DUMMY_DATA,\r\n\r\n    pageSelected: false\r\n}\r\n\r\nconst defaultControlData = {\r\n  'section': {\r\n    title: 'New Section',\r\n    level: 1\r\n  },\r\n  'richtext': {\r\n    label: 'Rich Text:',\r\n    apiFieldName: null, // \r\n    placeholder: 'Enter value...',\r\n    richTextData: null,\r\n    dataProps: {\r\n      datasetId: 1,\r\n      //requestType: 'GetComments',\r\n      requestType: null,\r\n      filterName: null,\r\n      filterValue: null\r\n    }\r\n  },\r\n  'combo': {\r\n    placeholder: 'Please select...',\r\n    options: dropdownOptionsFew,\r\n    label: 'Combobox:'\r\n  },\r\n  'textbox': {\r\n    placeholder: 'Enter value...',\r\n    label: 'Textbox:'\r\n  },\r\n  'table': {\r\n    label: 'Table:',\r\n    showFilters: true,\r\n    showPaginator: true,\r\n    showFooter: true,\r\n\r\n    dataProps: {\r\n      datasetId: \"0\",\r\n      requestType: 'GetDeviceList',\r\n      specifyColumns: true,\r\n      // A. Will only be visiable if specifyColumns = true\r\n      columns: [],\r\n\r\n      // B. Will only be visiable if specifyColumns = false\r\n      categories: null,\r\n      seriesName: null,\r\n\r\n      filterName: null,\r\n      filterValue: null,\r\n    }\r\n  },\r\n  'pie' : {\r\n    label: 'Pie:',\r\n    dataProps: {\r\n      datasetId: \"0\",\r\n      requestType: 'GetDeviceCounts',\r\n      categories: '',\r\n      //aggregation: 'count'\r\n    }\r\n  },\r\n  'barchart' : {\r\n    label: 'Bar:',\r\n    stacked: false,\r\n    dataProps: {\r\n      datasetId: \"0\",\r\n      requestType: 'GetDeviceCounts',\r\n      categories: '', // For a vertical bar chart, this is the X-axis\r\n      seriesName: '', // For a vertical bar chart, this is the Y-axis (e.g. count)\r\n    }\r\n  },\r\n  'label': {\r\n    label: 'New Label',\r\n    apiFieldName: null, // \r\n    icon: 'lightbulb',\r\n    backgroundColor: 'khaki',\r\n    color: 'black',\r\n    fontSize: '14',\r\n    alignment: '',\r\n    linkedPage: null,\r\n  },\r\n  'gauge': {\r\n    label: 'New Gauge:',\r\n    dataProps: {\r\n      datasetId: \"2\",\r\n      requestType: 'GetKpi',\r\n      groupings: [], // multiselect\r\n      filtersList: {} // excluding analysis period...or we just leave the analysis period to the page-filter?\r\n      /*\r\n      {name: \"\", value: \"\"}\r\n      */\r\n    }\r\n  },\r\n  'pagebreak': {\r\n  },\r\n  'imageMap': {\r\n    label: 'Image Map:',\r\n    dataProps: {\r\n      datasetId: 1,\r\n      requestType: 'GetKpi',\r\n      groupings: []\r\n    },    \r\n    imageProps: {\r\n      image: '',\r\n      map: {        \r\n          name: '',\r\n          areas: []\r\n      }\r\n    }    \r\n  },\r\n  'line': {\r\n    label: 'Line Chart',\r\n    unit: null,\r\n    dataProps: {\r\n      datasetId: 2,\r\n      requestType: 'GetAlarmOccurrenceRatio',\r\n      categories: null,\r\n      seriesName: null,\r\n      filterName: null,\r\n      filterValue: null,\r\n    }\r\n  },\r\n  'frame': {\r\n    url: 'https://www.youtube.com/embed/cde9qNtaoog'\r\n  }\r\n}\r\n\r\nconst assignIdAndDefaultData = (control, layout) => {\r\n  if (!control.ctrlType) {\r\n    return;\r\n  }\r\n\r\n  if (!control.data) {\r\n    control.data = defaultControlData[control.ctrlType];\r\n  }\r\n  \r\n  // find a suitable default id\r\n  let i = 0;\r\n  while (true) {\r\n    //let currId = 'ctrl-' + control.ctrlType + i++;\r\n    let currId = 'ctrl-' + control.ctrlType + '-' + uuidv4();\r\n    if (layout.find(ctrl => ctrl.i === currId)) {\r\n      continue;\r\n    }\r\n    control.i = currId;\r\n    break;\r\n  }\r\n}\r\n\r\nconst updateLayout = (layout, updatedControls) => {\r\n  // updatedControls is an array of controls\r\n  // it may contain existing controls or \"empty\" controls that have been resized\r\n  if (!layout || !updatedControls) {\r\n    return layout;\r\n  }\r\n\r\n  updatedControls.forEach(control => {\r\n    let findIndex = layout.findIndex(layoutCtrl => layoutCtrl.i === control.i);\r\n    if (findIndex === -1) {\r\n      // means we need to create a new control\r\n      assignIdAndDefaultData(control, layout);\r\n      layout.push(control);\r\n    }\r\n    else {\r\n      // in case the data is null (because it's an empty control previously, just resized)\r\n      if (!control.data) {\r\n        assignIdAndDefaultData(control, layout);\r\n      }\r\n      layout[findIndex] = control;  \r\n    }\r\n  })\r\n\r\n  // TODO Sort the controls based on the \"flat coordinates\"\r\n  // Maybe no need...because when rendering, it is looping from topLeft to botoom right\r\n}\r\n\r\n// Does not cause a rerender. Do not update the property in place (mutate) -- create a new object\r\nconst setControlSelectedOrig = (controlId, newLayout) => {\r\n  newLayout.forEach(control => {\r\n    if (control.i === controlId) {\r\n      control.selected = true;\r\n    }\r\n    else {\r\n      control.selected = false;\r\n    }\r\n  })\r\n}\r\n\r\n// This function will cause only the affected controls (1 or 2 controls) to rerender\r\nconst setControlSelected = (controlId, newLayout) => {\r\n  // Create a new object for the affected controls, instead of updating them\r\n  let affectedControls = [];\r\n  newLayout.forEach(control => {\r\n    if (control.selected) {\r\n      if (control.i !== controlId) {\r\n        affectedControls.push({...control, selected: false});\r\n      }\r\n    }\r\n    else if (control.i === controlId) {\r\n      affectedControls.push({...control, selected: true});\r\n    }\r\n  });\r\n\r\n  // Remove the old control and push the new objects\r\n  affectedControls.forEach(ctrl => {\r\n    let index = newLayout.findIndex(x => x.i === ctrl.i);\r\n    newLayout.splice(index, 1);\r\n    newLayout.push(ctrl);\r\n  });  \r\n}\r\n\r\nconst unselectAllControls = (newLayout) => {\r\n  let affectedControls = [];\r\n  newLayout.forEach(control => {\r\n    if (control.selected) {      \r\n        affectedControls.push({...control, selected: false});\r\n      }\r\n    }\r\n  );\r\n\r\n  // Remove the old control and push the new objects\r\n  affectedControls.forEach(ctrl => {\r\n    let index = newLayout.findIndex(x => x.i === ctrl.i);\r\n    newLayout.splice(index, 1);\r\n    newLayout.push(ctrl);\r\n  });  \r\n}\r\n\r\nconst updateControlProps = (updatedControl, newLayout) => {\r\n  let findControlIndex = newLayout.findIndex(ctrl => ctrl.i === updatedControl.i);\r\n  if (findControlIndex < 0) {\r\n    return;\r\n  }\r\n\r\n  let newControl = {...newLayout[findControlIndex], data: updatedControl.data};\r\n  // Remove the old control and push the new object\r\n  newLayout.splice(findControlIndex, 1);\r\n  newLayout.push(newControl);\r\n}\r\n\r\nconst updateControlImgMapProps = (actionPayload, newLayout) => {\r\n  let {image, newMap, updatedControl} = actionPayload;\r\n  let findControlIndex = newLayout.findIndex(ctrl => ctrl.i === updatedControl.i);\r\n  if (findControlIndex < 0) {\r\n    return;\r\n  }\r\n\r\n  let newControl = {...newLayout[findControlIndex], data: updatedControl.data};\r\n  newControl.data.imageProps = {\r\n    image: image,\r\n    map: newMap\r\n  }\r\n  // Remove the old control and push the new object\r\n  newLayout.splice(findControlIndex, 1);\r\n  newLayout.push(newControl);\r\n}\r\n\r\nconst updateLayoutProps = (updatedLayoutProps) => {\r\n  return {...updatedLayoutProps, \r\n    rows: parseInt(updatedLayoutProps.rows)\r\n  };\r\n}\r\n\r\nconst handleDeleteControl = (deletedControl, newLayout) => {\r\n  let findControlIndex = newLayout.findIndex(ctrl => ctrl.i === deletedControl.i);\r\n  if (findControlIndex < 0) {\r\n    return;\r\n  }\r\n\r\n  newLayout.splice(findControlIndex, 1);\r\n}\r\n\r\nexport default function(state = defaultState, action) {  \r\n  switch (action.type) {\r\n    case SELECT_TOOLPANEL_TREE:\r\n      return {\r\n        ...state,\r\n        toolPanelTreeSelected: action.payload\r\n      };\r\n    case SELECT_CONTROL:\r\n      let newStateSelectCtrl = {...state};\r\n      newStateSelectCtrl.pageSelected = false;\r\n      //newStateSelectCtrl.layout = [...state.layout]; // No need. If you do this, the entire designer will rerender, but only the empty controls will rerender\r\n      setControlSelected(action.payload, newStateSelectCtrl.layout);\r\n      return newStateSelectCtrl;\r\n    case SELECT_PAGE:\r\n      // a. unselect selected controls\r\n      // b. \r\n      let newStateSelectPage = {...state};\r\n      newStateSelectPage.pageSelected = true;\r\n      unselectAllControls(newStateSelectPage.layout);\r\n      return newStateSelectPage;  \r\n    case UPDATE_DESIGNER_LAYOUT:\r\n        let updatedControls = action.payload;\r\n        let newState = {\r\n          ...state,          \r\n        };\r\n        // Need to re-initialize the layout array too, otherwise formDesignerContent won't re-render\r\n        // I think minimum we just need to create new objects for the affected controls. \r\n        // ...But the empty controls won't rerender and there might be a need to rerender them. So just update the entire array\r\n        newState.layout = [...state.layout];\r\n        updateLayout(newState.layout, updatedControls);        \r\n\r\n        return newState;\r\n    case UPDATE_CONTROL_PROPS:\r\n        let newStateUpdProps = {\r\n          ...state,          \r\n        };\r\n\r\n        updateControlProps(action.payload, newStateUpdProps.layout); \r\n\r\n        return newStateUpdProps;\r\n    case APPLY_IMAGEMAP_PROPS:\r\n      let newStateUpdImageMapProps = {\r\n        ...state,          \r\n      };\r\n\r\n      updateControlImgMapProps(action.payload, newStateUpdImageMapProps.layout); \r\n\r\n      return newStateUpdImageMapProps;\r\n    case UPDATE_LAYOUT_PROPS:\r\n      let newStateUpdLayoutProps = {\r\n        ...state,          \r\n      };\r\n\r\n      newStateUpdLayoutProps.layoutData = updateLayoutProps(action.payload); \r\n\r\n      return newStateUpdLayoutProps;\r\n    case DELETE_CONTROL:\r\n      let newStateDeleteControl = {\r\n        ...state,          \r\n      };\r\n      newStateDeleteControl.layout = [...state.layout];\r\n\r\n      handleDeleteControl(action.payload, newStateDeleteControl.layout);\r\n      return newStateDeleteControl;\r\n    case SAVE_DESIGNER_LAYOUT:\r\n      // TODO: After a successful Save, server will return the object saved\r\n      // It's expected to be the same, but ideally we should replace local state's object with the one from the server\r\n      // Just update the name\r\n      // debugger\r\n      // return {\r\n      //   ...state,\r\n      //   layoutData: {...state.layoutData, name: action.payload.name},\r\n      // }\r\n      break;\r\n    case OPEN_LAYOUT:\r\n      return {\r\n        ...state,\r\n        layout: [...action.payload.controls],\r\n        layoutData: action.payload.layoutData,\r\n      }\r\n      \r\n  }\r\n  return state;\r\n}\r\n","export const DUMMY_APR_METADATA = {\r\n\tname: \"PRM APR\",\r\n  //server: \"http://10.131.27.49:60000/api/data\",\r\n  //server: \"http://10.48.100.175:5000/device\",\r\n  //server: \"http://localhost:7000/api/device\",\r\n  //server: \"http://10.48.100.175:5000/api/isae/device\",\r\n  server: \"http://10.48.100.175:5001/api/isae/device\",\r\n\t// Will help the server \r\n\trequestTypes: [\r\n\t\t{\r\n\t\t\tname: \"GetKpi\",\r\n\t\t\t// Put the description in a tooltip, to that user/engineer will know which one to choose\r\n\t\t\tdescription: \"For fetching Organization/Site/Plant/PRM Level KPI's\"\r\n\t\t},\r\n\t\t// {\r\n\t\t// \t// For image map\r\n\t\t// \tname: \"GetPlantKpi\",\t\t\t\r\n\t\t// \tdescription: \"For getting plant KPI\"\r\n\t\t// },\t\t\r\n\t\t{\r\n\t\t\tname: \"GetDeviceList\",\r\n\t\t\tdescription: \"For querying device details only, without groupings/aggregations\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"GetDeviceCounts\",\r\n\t\t\tdescription: \"For performing aggregations on Device properties like Vendor/Model\"\r\n\t\t},\r\n\t\t// {\r\n\t\t// \tname: \"GetDeviceTrendValues\",\r\n\t\t// \tdescription: \"For line charts, e.g. getting ODE/TA/PA for each month/week/day/year\"\r\n\t\t// },\r\n\t\t// {\r\n\t\t// \tname: \"GetAlarmDetails\",\r\n\t\t// \tdescription: \"For querying the alarm properties\"\r\n\t\t// },\r\n\t\t{\r\n      //name: \"GetAlarmCounts\",\r\n      name: \"GetAlarmTypeCounts\",\r\n\t\t\tdescription: \"For querying the count of alarms per day\"\r\n\t\t},\r\n\t\t// {\r\n\t\t// \tname: \"GetAlarmTrendValues\",\r\n\t\t// \tdescription: \"For line charts, e.g. number of alarms per month/week/year\"\r\n    // },\r\n    {\r\n\t\t\tname: \"GetComments\",\r\n\t\t\tdescription: \"For getting the comments (text string) of the given alarm type\"\r\n    },\r\n    {\r\n\t\t\tname: \"GetAlarmTypeRateFrequencyWithLatestStatus\",\r\n\t\t\tdescription: \"For showing the alarm type rate of devices (e.g. Communication Error)\"\r\n    },\r\n    {\r\n\t\t\tname: \"GetAlarmRateFrequencyWithLatestStatus\",\r\n\t\t\tdescription: \"For showing the alarm rate of devices (e.g. PV Out of Limits)\"\r\n    },\r\n    {\r\n\t\t\tname: \"GetAlarmOccurrenceRatio\",\r\n\t\t\tdescription: \"For getting the alarm occurrence ratio of a particular alarm during the given Analysis Period\"\r\n    },\r\n    {\r\n\t\t\tname: \"GetAlarmTypeOccurrenceRatio\",\r\n\t\t\tdescription: \"For getting the alarm type occurrence ratio of a particular alarm during the given Analysis Period\"\r\n    },\r\n    {\r\n\t\t\tname: \"GetPlantInfo\",\r\n\t\t\tdescription: \"For getting the plant info like PRM Station, Name, Revision etc.\"\r\n    },\r\n    {\r\n\t\t\tname: \"GetAchievement\",\r\n\t\t\tdescription: \"For getting the Achievement data of the Plant for a particular phase\"\r\n\t\t},\r\n\t],\r\n\t\r\n\trequestParams: [\r\n\t\t// Place here the user inputs that are not part of the dimensions\r\n\t\t{\r\n\t\t\t// Let the user select/modify the Analysis Period when viewing the pages\r\n\t\t\tname: 'AnalysisPeriod',   \r\n\t\t\tdataType: 'Date Range',   \r\n      enumValues: ['Latest value only', 'Last 1 day', 'Last 7 days', 'Last 30 days', 'Custom Range'],\r\n      defaultValue: 'Last 30 days'\r\n\t\t},\r\n\t],\r\n\t// the groupings is for UI organization only.\r\n\t// the important thing is that all the names must be unique\r\n\t// all unique names must be recognized by the backend\r\n\tdimensions: [\r\n\t\t{\r\n\t\t\t// Put here the Device properties that don't normally change frequently\r\n\t\t\tname: \"Device Properties\",\r\n\t\t\tdataType: \"group\",\r\n\t\t\titems: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"Device_Id\",\r\n\t\t\t\t\tdataType: \"string\",\t\t\r\n\t\t\t\t\taggregations: [\"count\"],\r\n\t\t\t\t\t// requestTypes: [\"GetDeviceDetails\", \"GetDeviceCounts\"]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"Device_Tag\",\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"Comm_Type\",\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"Device_Path\",\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"Category\",\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"]\r\n        },\r\n        {\r\n          // The parent folder of this device (not the full hierarchy)\r\n\t\t\t\t\tname: \"Plant_Hierarchy\",\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"]\r\n\t\t\t\t},\r\n        {\r\n\t\t\t\t\tname: \"Priority\",\r\n\t\t\t\t\tdataType: \"enum\",\r\n\t\t\t\t\tenumValues: [\"Low\", \"Medium\", \"High\", \"High+\"],\r\n\t\t\t\t\taggregations: [\"count\"]\r\n\t\t\t\t},\r\n\t\t\t\t// Just repeat for other common attributes like Device Description\r\n\t\t\t\t\r\n\t\t\t\t// Hierarchical attributes - start\r\n\t\t\t\t{\r\n\t\t\t\t\t// Hierarchical: so that can perform dynamic grouping in Charts\r\n\t\t\t\t\tname: \"Vendor Model Info\",\r\n\t\t\t\t\tdataType: \"group\",\r\n\t\t\t\t\taggregations: [],\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: \"Vendor\",\r\n\t\t\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\t\t\taggregations: [\"count\"],\r\n\t\t\t\t\t\t\titems: [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: \"Model\",\r\n\t\t\t\t\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\t\t\t\t\taggregations: [\"count\"],\r\n\t\t\t\t\t\t\t\t\titems: [\r\n                    {\r\n                      name: \"Revision\",\r\n                      dataType: \"string\",\r\n                      aggregations: [\"count\"],\r\n                    }\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t// {\r\n\t\t\t\t// \tname: \"Path\",\r\n\t\t\t\t// \tdataType: \"group\",\r\n\t\t\t\t// \taggregations: [],\r\n\t\t\t\t// \titems: [\r\n\t\t\t\t// \t\t{\r\n\t\t\t\t// \t\t\t// Assume PRM Plant Hierarchy. Repeat similar structure for Network Hierarchy, Class Hierarchy etc.\r\n\t\t\t\t// \t\t\tname: \"Plant Name\",\r\n\t\t\t\t// \t\t\tdataType: \"string\",\r\n\t\t\t\t// \t\t\taggregations: [\"count\"],\r\n\t\t\t\t// \t\t\titems: [\r\n        //         {\r\n        //           name: \"Area\",\r\n        //           dataType: \"string\",\t\t\t\t\t\t\t\r\n        //           aggregations: [\"count\"],\r\n        //           items: [\r\n        //             {\r\n        //               name: \"Unit\",\r\n        //               dataType: \"string\",\r\n        //               aggregations: [\"count\"],\r\n        //             }\r\n        //           ]\r\n        //         }\r\n\t\t\t\t// \t\t\t]\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t]\r\n\t\t\t\t// }\r\n\t\t\t\t// Hierarchical attributes - end\t\t\t\r\n\t\t\t] // END: Device Info - items\r\n\t\t}, // END: Device Info group\r\n\t\t{\r\n\t\t\tname: \"Device KPI's\",\r\n\t\t\tdataType: \"group\",\r\n\t\t\titems: [\r\n\t\t\t\t// {\r\n\t\t\t\t// \t// Repeat for TA and PA\r\n\t\t\t\t// \tname: \"ODE\", // TODO: We can also create another group called \"Device Availability\"\r\n\t\t\t\t// \tdataType: \"group\",\r\n\t\t\t\t// \titems: [\r\n\t\t\t\t// \t\t{\r\n\t\t\t\t// \t\t\tname: \"ODE Value\", // e.g. 99.5%\r\n\t\t\t\t// \t\t\tdataType: \"number\",\r\n\t\t\t\t// \t\t\taggregations: [], // no aggregation\r\n\t\t\t\t// \t\t},\r\n\t\t\t\t// \t\t{\r\n\t\t\t\t// \t\t\tname: \"ODE Status\", // e.g. ☀ ️⛅ ☁ ️⛈ ️⚡\r\n\t\t\t\t// \t\t\tdataType: \"enum\",\r\n\t\t\t\t// \t\t\tenumValues: [1, 2, 3, 4, 5],\r\n\t\t\t\t// \t\t\taggregations: [\"count\"],\r\n\t\t\t\t// \t\t},\t\t\t\t\t\t\r\n\t\t\t\t// \t]\r\n\t\t\t\t// },\r\n\t\t\t\t{\r\n\t\t\t\t\t// Repeat for NE107 Device Status\r\n\t\t\t\t\tname: \"PRM Device Status\", // TODO: We can also create another group called \"Device Availability\"\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"],\r\n        },\r\n        {\r\n\t\t\t\t\tname: \"Rate (%)\", // used in GetAlarmTypeRateFrequencyWithLatestStatus\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"],\r\n        },\r\n        {\r\n\t\t\t\t\tname: \"Frequency\", // used in GetAlarmTypeRateFrequencyWithLatestStatus\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"],\r\n        },\r\n        {\r\n\t\t\t\t\tname: \"LatestStatus\", // Date of last status update, used in GetAlarmTypeRateFrequencyWithLatestStatus\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"],\r\n        },\r\n        {\r\n\t\t\t\t\tname: \"Status\", // used in GetAlarmTypeRateFrequencyWithLatestStatus\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"],\r\n\t\t\t\t},\r\n\t\t\t]\r\n    },\r\n    {\r\n      name: 'Device Summaries',\r\n      dataType: \"group\",\r\n\t\t\titems: [\r\n        {\r\n          name: 'Device Count',\r\n          dataType: \"number\",\r\n          aggregations: [], // no aggregation\r\n        }\r\n      ]\r\n    },\r\n\t\t{\r\n\t\t\tname: \"Alarm Info\",\r\n\t\t\tdataType: \"group\",\r\n\t\t\titems: [\r\n\t\t\t\t// {\r\n\t\t\t\t// \tname: \"AlarmTimestamp\",\r\n\t\t\t\t// \tdataType: \"datetime\",\r\n\t\t\t\t// },\r\n\t\t\t\t// {\r\n\t\t\t\t// \tname: \"StartDate\",\r\n\t\t\t\t// \tdataType: \"datetime\",\r\n\t\t\t\t// },\r\n\t\t\t\t// {\r\n\t\t\t\t// \tname: \"EndDate\",\r\n\t\t\t\t// \tdataType: \"datetime\",\r\n\t\t\t\t// },\r\n\t\t\t\t// {\r\n\t\t\t\t// \tname: \"EventType\",\r\n\t\t\t\t// \tdataType: \"string\",\r\n\t\t\t\t// \taggregations: [\"count\"],\r\n\t\t\t\t// },\r\n\t\t\t\t// {\r\n\t\t\t\t// \tname: \"Alarm Message\",\r\n\t\t\t\t// \tdataType: \"string\",\r\n\t\t\t\t// \taggregations: [\"count\"],\r\n\t\t\t\t// },\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"Alarm Type\",\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"],\r\n        },\r\n        {\r\n\t\t\t\t\tname: \"Alarm_Name\",\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"],\r\n        },\r\n        {\r\n\t\t\t\t\tname: \"Alarm\",\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"],\r\n\t\t\t\t},\r\n\t\t\t]\r\n    }, // END: Alarms Info\r\n    {\r\n      name: 'Alarm Summaries',\r\n      dataType: \"group\",\r\n\t\t\titems: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"Alarm Count\",\r\n          dataType: \"number\",\r\n          aggregations: [], // no aggregation\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"Alarm Occurrence Ratio\",\r\n          dataType: \"number\",\r\n          aggregations: [], // no aggregation\r\n\t\t\t\t},\r\n      ]\r\n    },\r\n    {\r\n      name: \"Plant Info\",\r\n      dataType: \"group\",\r\n      items: [\r\n        {\r\n\t\t\t\t\tname: \"Hierarchy\",\r\n\t\t\t\t\tdataType: \"group\",\r\n\t\t\t\t\taggregations: [],\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Assume PRM Plant Hierarchy. Repeat similar structure for Network Hierarchy, Class Hierarchy etc.\r\n\t\t\t\t\t\t\tname: \"Organization\",\r\n\t\t\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\t\t\taggregations: [\"count\"],\r\n\t\t\t\t\t\t\titems: [\r\n                {\r\n                  name: \"Site\",\r\n                  dataType: \"string\",\t\t\t\t\t\t\t\r\n                  aggregations: [\"count\"],\r\n                  items: [\r\n                    {\r\n                      name: \"Plant\",\r\n                      dataType: \"string\",\r\n                      aggregations: [\"count\"],\r\n                      items: [\r\n                        {\r\n                          name: \"PRM Id\",\r\n                          dataType: \"string\",\r\n                          aggregations: [\"count\"],\r\n                        }\r\n                      ]\r\n                    }\r\n                  ]\r\n                }\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n      ]\r\n    },\r\n\t\t{\r\n\t\t\tname: \"Plant KPI\",\r\n\t\t\tdataType: \"group\",\r\n\t\t\titems: [\r\n\t\t\t\t// {\r\n\t\t\t\t// \tname: \"Plant Id\",\r\n\t\t\t\t// \tdataType: \"string\",\r\n\t\t\t\t// \taggregations: [\"count\"],\r\n\t\t\t\t// },\r\n\t\t\t\t// {\r\n\t\t\t\t// \tname: \"Plant Type\",\r\n\t\t\t\t// \tdataType: \"string\", //e.g. PRM, ISAE\r\n\t\t\t\t// \taggregations: [\"count\"],\r\n\t\t\t\t// },\r\n\t\t\t\t// {\r\n\t\t\t\t// \tname: \"Plant KPI Score\",\r\n\t\t\t\t// \tdataType: \"number\"\r\n        // },\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"Phase\",\r\n\t\t\t\t\tdataType: \"string\",\r\n\t\t\t\t\taggregations: [\"count\"],\r\n\t\t\t\t},        \r\n\t\t\t]\r\n\t\t},\r\n\t\t// {\r\n\t\t// \tname: \"Overall KPI\",\r\n\t\t// \tdataType: \"group\",\r\n\t\t// \titems: [\r\n\t\t// \t\t{\r\n\t\t// \t\t\tname: \"Total Organization KPI\",\r\n\t\t// \t\t\tdataType: \"number\",\r\n\t\t// \t\t},\r\n\t\t// \t\t{\r\n\t\t// \t\t\t// It's in the Mockup spec...\r\n\t\t// \t\t\tname: \"PRM Readiness Status\",\r\n\t\t// \t\t\tdataType: \"string\", // e.g. \"3/5\"\r\n\t\t// \t\t},\r\n\t\t// \t\t{\r\n\t\t// \t\t\tname: \"ISAE Readiness Status\",\r\n\t\t// \t\t\tdataType: \"string\", // e.g. \"0/0\"\r\n\t\t// \t\t},\r\n\t\t// \t\t{\r\n\t\t// \t\t\tname: \"CurrentPhase\",\r\n\t\t// \t\t\tdataType: \"string\", // e.g. \"Phase 1\"\r\n\t\t// \t\t},\r\n\t\t// \t\t{\r\n\t\t// \t\t\tname: \"Plant KPI Status\",\r\n\t\t// \t\t\tdataType: \"string\", // e.g. Notmal, High Risk, Non-Visualized\r\n\t\t// \t\t},\t\t\t\t\r\n\t\t// \t]\r\n\t\t\t\r\n    // }, // END: Overall KPI\r\n    {\r\n\t\t\tname: \"Timestamp\",\r\n\t\t\tdataType: \"group\",\r\n\t\t\titems: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"Year\",\r\n\t\t\t\t\tdataType: \"string\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"Month\",\r\n\t\t\t\t\tdataType: \"string\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"Day\",\r\n\t\t\t\t\tdataType: \"datetime\"\r\n\t\t\t\t},\r\n\t\t\t]\r\n\t\t}, // END: Timestamp\r\n\t],\r\n};\r\n\r\n// Keep the old dummy data just for compatibility with some obsoleted features\r\n// DataTypes:\r\n// [Percent]  e.g. ODE, TA, PA. Cannot be used in pie chart\r\n// [Number]   e.g. Total Alarms. Children count can be summed up.\r\n// [Not specified] means it is string value\r\n\r\n// Note: this metadata set is for device-level metadata\r\n//  TODO: We need to fetch the comment library stuff also\r\n// We also need to define a metadata for alarm-level metadata\r\nexport const OLD_DUMMY_DATA = {\r\n    name: 'Device Metadata',\r\n    // Defines how other Dataset-types can link to this Dataset.\r\n    // For example, Alarms data can be linked to this dataset via DeviceId\r\n    // This also defines the unit of Data. Means this data has a DeviceId\r\n    dataKey: 'DeviceId', // This should be one of the dimensions\r\n    RequestParams: [\r\n      {\r\n        name: 'AnalysisPeriod',\r\n        dataTypes: ['Date Range'],\r\n        enumValues: ['Latest value only', 'Last 1 day', 'Last 7 days', 'Last 30 days', 'Custom Range']\r\n      },\r\n      // {\r\n        // I think no need...since this is already defined in the Dimensions. We only include the \"special\" ones that are not inside the Dimensions\r\n        // name: 'Path',\r\n        // dataTypes: ['string'],\r\n      // },    \r\n    ],\r\n    Dimensions: [\r\n      {\r\n        // TODO: Maybe we remove the Device Info layer (i.e. Vendor, Model etc are first level dimensions)\r\n        // In a relational DB, for PRM, we need to put Device Info in another table (separate from Hierarchy table) because there can be multiple hierarchy views\r\n        // In a noSQL DB, we can flatten this out when storing\r\n        name: 'Device Info',\r\n        dataTypes: ['group'],   \r\n        // supported controls: ['pie', 'bar']\r\n        items: [\r\n          {\r\n            name: 'Device ID',\r\n            dataTypes: ['string'],\r\n          },\r\n          {\r\n            name: 'Device Tag',\r\n            dataTypes: ['string'],   \r\n          },\r\n          {\r\n            name: 'Priority',\r\n            dataTypes: ['Enum'],   \r\n            enumValues: ['Low', 'Medium', 'High', 'High+'],\r\n  \r\n            // measures: to be used only in request data if client wants server to provide the calculated value already, instead of client computing for the value\r\n            // But client can use this info to populate some ui configs?\r\n            measures: [\r\n              {\r\n                name: 'Count',\r\n                expression: 'count'\r\n              }\r\n            ]\r\n          },      \r\n          {\r\n            name: 'Category',\r\n            dataTypes: ['string'],   \r\n          },           \r\n          {\r\n            name: 'FullPath',\r\n            dataTypes: ['string'],   \r\n          }        \r\n        ]\r\n      }, // End: Device Info group\r\n      {\r\n        name: 'VendorModel Info',\r\n        dataTypes: ['group'],   \r\n        items: [\r\n          {\r\n            name: 'Vendor',\r\n            dataTypes: ['string', 'group'],\r\n            items: [\r\n              {\r\n                name: 'Model',\r\n                dataTypes: ['string'],\r\n                items: [\r\n                  {\r\n                    name: 'Revision',\r\n                    dataTypes: ['string'],\r\n                  }\r\n                ]    \r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }, // End: Vendor Model group\r\n      {\r\n        name: 'Device Status',\r\n        dataTypes: ['group'],\r\n        items: [\r\n          {\r\n            name: 'PRM Device Status',          \r\n            enumValues: ['Abnormal', 'Warning', 'Communication Error', 'Uncertain', 'Normal'],\r\n            dataTypes: ['Enum']\r\n          },\r\n          {\r\n            name: 'NE107 Device Status',          \r\n            enumValues: ['Failure', 'Check Function', 'Out of Specification', 'Maintenance Required', 'Communication Error', 'Unknown,Normal'],\r\n            dataTypes: ['Enum']\r\n          },\r\n        ]\r\n      },\r\n      {\r\n        name: 'Device Status Timing Breakdown',\r\n        dataTypes: ['group'],\r\n        items: [\r\n          {\r\n            name: 'Good%',\r\n            dataTypes: ['Percent']\r\n          },\r\n          {\r\n            name: 'Bad%',\r\n            dataTypes: ['Percent']\r\n          },\r\n          {\r\n            name: 'Fair%',\r\n            dataTypes: ['Percent']\r\n          },\r\n          {\r\n            name: 'Uncertain%',\r\n            dataTypes: ['Percent']\r\n          },\r\n        ]\r\n      },\r\n      {\r\n        name: 'Device Availability',\r\n        value: 'Device Availability',\r\n        items: [\r\n          {\r\n            name: 'ODE',\r\n            items: [\r\n              {\r\n                name: 'Status',\r\n                dataTypes: ['Enum'],\r\n                enumValues: [1, 2, 3, 4, 5], // These are these nameless icons in FA KPI ☀️⛅☁️⛈️⚡\r\n              },\r\n              {\r\n                name: 'Value',\r\n                dataTypes: ['Number'],\r\n              }\r\n            ]          \r\n          },\r\n          {\r\n            name: 'TA',\r\n            items: [\r\n              {\r\n                name: 'Status',\r\n                dataTypes: ['Enum'],\r\n                enumValues: [1, 2, 3, 4, 5], // These are these nameless icons in FA KPI ☀️⛅☁️⛈️⚡\r\n              },\r\n              {\r\n                name: 'Value',\r\n                dataTypes: ['Number'],\r\n              }\r\n            ]          \r\n          },\r\n          {\r\n            name: 'PA',\r\n            items: [\r\n              {\r\n                name: 'Status',\r\n                dataTypes: ['Enum'],\r\n                enumValues: [1, 2, 3, 4, 5], // These are these nameless icons in FA KPI ☀️⛅☁️⛈️⚡\r\n              },\r\n              {\r\n                name: 'Value',\r\n                dataTypes: ['Number'],\r\n              }\r\n            ]          \r\n          },\r\n        ]\r\n      },\r\n      {\r\n        name: 'Alarm Info',\r\n        value: 'Alarm Info',\r\n        items: [\r\n          {\r\n            name: 'Alarm Frequency',\r\n            dataTypes: ['Number']\r\n          },\r\n          {\r\n            name: 'AE Occurring',\r\n            dataTypes: ['Boolean']\r\n          },\r\n          {\r\n            name: 'Raw Alarms',\r\n            dataTypes: ['Annotation']\r\n          },\r\n        ]\r\n      },\r\n  \r\n      {\r\n        // Also possible: Network Path, class Path etc.\r\n        // For ISAE case, might not be possible since the hierarchy is not strucured\r\n        // So for ISAE case, it will just be single level Path\r\n        name: 'Path', // Assume Plant Path for now\r\n        value: 'Path',\r\n        items: [\r\n          {\r\n            name: 'Plant', //e.g. MYPJT\r\n            dataTypes: ['string', 'group'],\r\n            items: [\r\n              {\r\n                name: 'Site',\r\n                dataTypes: ['string', 'group'],\r\n                items: [\r\n                  {\r\n                    name: 'Area',\r\n                    dataTypes: ['string', 'group'],\r\n                    items: [\r\n                      {\r\n                        name: 'Unit',\r\n                        dataTypes: ['string'],\r\n                      },\r\n                    ]\r\n                  },\r\n                ]\r\n              },\r\n            ]\r\n          },\r\n        ]\r\n      },  \r\n    ]\r\n  };\r\n  \r\n  const alarmsDummyMetadata = {\r\n    name: 'Alarms Metadata',\r\n    dataKey: 'alarmId', // null, if it's not available. Means this is not open for 'extension'\r\n    RequestParams: [\r\n      {\r\n        // If this is the only parameter, retrievea all the alarms from within the Analysis Period\r\n        // TODO: Consider adding a 'required' flag\r\n        name: 'AnalysisPeriod',   \r\n        dataTypes: ['Date Range'],   \r\n        enumValues: ['Last 1 day', 'Last 7 days', 'Last 30 days', 'Custom Range']\r\n      },\r\n      {\r\n        // Sample only -- no need to declare this as Device Id is already part of the Dimensions\r\n        // name: 'Device Id',   \r\n        // dataTypes: ['string'],   \r\n      },\r\n      {\r\n        name: 'RequestKey',\r\n        dataTypes: ['string'],   \r\n      }\r\n    ],\r\n    Dimensions: [\r\n      {\r\n        name: 'Timestamp',\r\n        dataTypes: ['Datetime']\r\n      },\r\n      {\r\n        name: 'Start Date',\r\n        dataTypes: ['Datetime']\r\n      },\r\n      {\r\n        name: 'End Date',\r\n        dataTypes: ['Datetime']\r\n      },\r\n      {\r\n        name: 'Event Type',\r\n        dataTypes: ['string']\r\n      },\r\n      {\r\n        name: 'Message',\r\n        dataTypes: ['string']\r\n      },\r\n  \r\n    ]\r\n  }\r\n  \r\n  const allDummyMetadata = [];\r\n\r\n\r\n  export const dropdownOptions = [\r\n    { key: 'angular', text: 'Angular', value: 'angular' },\r\n    { key: 'css', text: 'CSS', value: 'css' },\r\n    { key: 'design', text: 'Graphic Design', value: 'design' },\r\n    { key: 'ember', text: 'Ember', value: 'ember' },\r\n    { key: 'html', text: 'HTML', value: 'html' },\r\n    { key: 'ia', text: 'Information Architecture', value: 'ia' },\r\n    { key: 'javascript', text: 'Javascript', value: 'javascript' },\r\n    { key: 'mech', text: 'Mechanical Engineering', value: 'mech' },\r\n    { key: 'meteor', text: 'Meteor', value: 'meteor' },\r\n    { key: 'node', text: 'NodeJS', value: 'node' },\r\n    { key: 'plumbing', text: 'Plumbing', value: 'plumbing' },\r\n    { key: 'python', text: 'Python', value: 'python' },\r\n    { key: 'rails', text: 'Rails', value: 'rails' },\r\n    { key: 'react', text: 'React', value: 'react' },\r\n    { key: 'repair', text: 'Kitchen Repair', value: 'repair' },\r\n    { key: 'ruby', text: 'Ruby', value: 'ruby' },\r\n    { key: 'ui', text: 'UI Design', value: 'ui' },\r\n    { key: 'ux', text: 'User Experience', value: 'ux' },\r\n    { key: 'test1', text: 'A quick brown fox jumps over the lazy dog', value: 'test1' },\r\n    { key: 'test2', text: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+', value: 'test2' },\r\n    { key: 'test3', text: '春眠不觉晓，处处闻啼鸟。夜来风雨声，花落知多少。', value: 'test3' },\r\n  ];\r\n  \r\nexport const dropdownOptionsFew = [\r\n    { key: 'apple', text: 'Apple', value: 'apple' },\r\n    { key: 'banana', text: 'Banana', value: 'banana' },\r\n    { key: 'carrot', text: 'Carrot', value: 'carrot' },\r\n    { key: 'dolphin', text: 'Dolphin', value: 'dolphin' },\r\n    { key: 'elephant', text: 'Elephant', value: 'elephant' },\r\n    { key: 'fish', text: 'Fish', value: 'fish' },\r\n    { key: 'grapefruit', text: 'Grapefruit', value: 'grapefruit' },\r\n    { key: 'hummingbird', text: 'Humming Bird', value: 'hummingbird' },\r\n    { key: 'iguana', text: 'Iguana', value: 'iguana' },\r\n  ];\r\n","import { CLICK_MENU, \r\n  DRAG_TOOLITEM_START, \r\n  SELECT_TOOLPANEL_TREE, \r\n  FETCH_HIERARCHY, \r\n  FETCH_HIERARCHYVIEWS,\r\n  FETCH_AVAILABLEDATA, \r\n  FETCH_SAVEDLAYOUTS,\r\n  FETCH_IMAGES,\r\n  SAVE_DESIGNER_LAYOUT } from \"../actions/index\";\r\nimport {DUMMY_APR_METADATA} from '../helper/dummyMetadata';\r\n\r\n// Assumption: All these data is for 1 tenant only\r\nconst defaultState = {\r\n    activeMenu: 'mapView',\r\n    tabIndex: 0,\r\n    // temp state only, until react-grid-layout fixes the bug for onDrop parameters\r\n    draggingToolItem: null,\r\n    toolPanelTreeSelected: null,\r\n    masterHierarchy: null,\r\n    masterAvailableData: null,\r\n    masterLayouts: [],\r\n    masterHierarchyViews: null,\r\n    // For the data retrieval\r\n    masterMetadata: DUMMY_APR_METADATA,\r\n    masterImages: []\r\n}\r\n\r\n// TODO: Should move this to a constant location\r\nconst tabIndexMapping = {\r\n  mapView: 0,\r\n  analysisView: 1,  \r\n  home: 2,\r\n  downloadCenter: 3,\r\n  formsDesigner: 4,\r\n  hierarchyDesigner: 5,\r\n  //dataSources: 6,\r\n\r\n  affiliate: 6,\r\n  // dashboardDesigner: 7,\r\n  // dataDesigner: 8,\r\n  // trialPage: 9,\r\n  settings: 7\r\n}\r\n\r\nconst addOrUpdateLayout = (stateLayouts, newLayout) => {\r\n  let findSameLayoutIndex = stateLayouts.findIndex(s => s.name === newLayout.name);\r\n  if (findSameLayoutIndex < 0) {\r\n    stateLayouts.push(newLayout);\r\n  }\r\n  else {\r\n    stateLayouts.splice(findSameLayoutIndex, 1, newLayout);\r\n  }\r\n}\r\n\r\nexport default function(state = defaultState, action) {\r\n  if ([CLICK_MENU, DRAG_TOOLITEM_START, SELECT_TOOLPANEL_TREE, FETCH_HIERARCHY, FETCH_AVAILABLEDATA, SAVE_DESIGNER_LAYOUT, FETCH_HIERARCHYVIEWS, FETCH_IMAGES].includes(action.type)) {\r\n    console.log('[DEBUG] reducer_mainApp', action, state);\r\n  }\r\n  switch (action.type) {\r\n    case CLICK_MENU:\r\n      return {\r\n          ...state,\r\n          activeMenu: action.payload,\r\n          tabIndex: tabIndexMapping[action.payload]\r\n      };\r\n    case DRAG_TOOLITEM_START:\r\n      return {\r\n        ...state,\r\n        draggingToolItem: action.payload\r\n      }\r\n    case FETCH_HIERARCHY:\r\n      return {\r\n        ...state,\r\n        masterHierarchy: action.payload.data\r\n      }\r\n    case FETCH_AVAILABLEDATA:\r\n      return {\r\n        ...state,\r\n        masterAvailableData: action.payload.data\r\n      }\r\n    case FETCH_SAVEDLAYOUTS:\r\n      return {\r\n        ...state,\r\n        masterLayouts: action.payload.data\r\n      }\r\n    case SAVE_DESIGNER_LAYOUT:\r\n      let newLayout = action.payload.response.data;\r\n      let stateLayouts = [...state.masterLayouts];\r\n      addOrUpdateLayout(stateLayouts, newLayout);\r\n      return {\r\n        ...state,\r\n        masterLayouts: stateLayouts        \r\n      }\r\n    case FETCH_HIERARCHYVIEWS:\r\n      return {\r\n        ...state,\r\n        masterHierarchyViews: action.payload.data\r\n      }\r\n    case FETCH_IMAGES:\r\n      return {\r\n        ...state,\r\n        masterImages: action.payload.data\r\n      }\r\n  }\r\n  return state;\r\n}\r\n","export const uuidv4 = () => {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  }\r\n\r\nexport const getMonthEndDate = (inDate) => {\r\n  return new Date(inDate.getFullYear(), inDate.getMonth() + 1, 0);\r\n}\r\n\r\nexport const getMonthStartDate = (inDate) => {\r\n  return new Date(inDate.getFullYear(), inDate.getMonth(), 1);\r\n}\r\n\r\nexport const isValidDate = (d) => {\r\n  return d instanceof Date && !isNaN(d);\r\n}\r\n\r\nexport const createMonthDate = (dateStr) => {\r\n  let d = new Date(dateStr);\r\n  if (!isValidDate(d)) {\r\n    return null;\r\n  }\r\n\r\n  return new Date(d.getFullYear(), d.getMonth());\r\n}\r\n\r\n","import { FETCH_HIERARCHY, \r\n  UPDATE_HIER_DESIGNER_TREE, \r\n  SELECT_HIER_DESIGNER_TREE, \r\n  INSERT_HIER_DESIGNER_TREE,\r\n  FILTER_HIER_DESIGNER_TREE,\r\n  SAVE_HIER_DESIGN_NODE,\r\n  FETCH_HIERARCHYVIEWS } from \"../actions/index\";\r\nimport {findNodeByKey, filterTreeEx} from '../helper/treefilter';\r\n\r\nconst defaultState = {\r\n    hierarchyMaster: null, // Just a backup copy of the hierarchy master data, in case the user haven't saved anything yet.\r\n    hierarchyTree: [],   // This is the tree that the designer will be working on\r\n    selectedNode: null,\r\n    userSettings: [], \r\n    /*\r\n    {\r\n      key: '',\r\n      dispName: '',\r\n      inherit: true/false // if true, pageAssoc should be null/ignored\r\n      pageAssoc: '', \r\n      childDefaultPage: '',\r\n      displayWeb: bool\r\n      displayReport: bool\r\n    }\r\n    */\r\n};\r\n\r\nconst convertMasterDataToKeys = (apiNode, index=0, stack=[], parent=null) => {\r\n    if (!apiNode) {\r\n      return null;\r\n    }\r\n  \r\n    let childNodes = [];\r\n    let treeData = {\r\n      key: apiNode.fullPath,\r\n      title: apiNode.name,\r\n      nodeType: apiNode.nodeType,\r\n      category: apiNode.category,\r\n      hierStack: [...stack, index], // stack of index positions...maybe not needed anymore, but implementation is OK\r\n      parent: parent\r\n    };\r\n  \r\n    if (apiNode.children) {\r\n      for(let i = 0; i < apiNode.children.length; i++) {\r\n        let currNode = apiNode.children[i];\r\n        childNodes.push(convertMasterDataToKeys(currNode, i, treeData.hierStack, treeData));\r\n      }\r\n      // apiNode.children.forEach(node => {\r\n      //   childNodes.push(convertMasterDataToKeys(node));\r\n      // })      \r\n    }\r\n    treeData.children = childNodes;\r\n  \r\n    return treeData;\r\n}\r\n\r\n// TODO: Move this function to treehelper\r\nconst reconstructHierarchyStack = (apiNodes, stack=[], parent=null) => {\r\n  if (!apiNodes) {\r\n    return null;\r\n  }\r\n\r\n  for(let i = 0; i < apiNodes.length; i++) {\r\n    let apiNode = apiNodes[i];\r\n    apiNode.hierStack = [...stack, i];\r\n    apiNode.parent = parent;\r\n    reconstructHierarchyStack(apiNode.children, apiNode.hierStack, apiNode);\r\n  }\r\n\r\n  return apiNodes;\r\n}\r\n\r\n//https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\nconst uuidv4 = () => {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\nconst handleInsert = (newState) => {\r\n  if (!newState || !newState.hierarchyTree) {\r\n    return;\r\n  }\r\n  newState.hierarchyTree = [...newState.hierarchyTree];\r\n  let newNode = {\r\n    key: 'hier-'+uuidv4(),\r\n    title: 'new page',\r\n    nodeType: 'page',\r\n    category: null,\r\n    children: []\r\n  };\r\n  if (!newState.selectedNode || !newState.selectedNode.key) {\r\n    // Means no node is selected, so add it the first level\r\n    newNode.parent = null;\r\n    newNode.hierStack = [newState.hierarchyTree.length];\r\n    newState.hierarchyTree.push(newNode);\r\n  }\r\n  else \r\n  {\r\n    // Find the selected node\r\n    let selectedNodeObj = findNodeByKey(newState.hierarchyTree, newState.selectedNode.key);\r\n    if (!!selectedNodeObj) {\r\n      if (selectedNodeObj.item.children.length > 0) {\r\n        let lastIndex = selectedNodeObj.item.children.length;\r\n        newNode.hierStack = selectedNodeObj.item.children[0].hierStack;\r\n        newNode.hierStack[newNode.hierStack.length - 1] = lastIndex;        \r\n      }\r\n      else {\r\n        selectedNodeObj.item.children = [];\r\n        newNode.hierStack = [...selectedNodeObj.item.hierStack, 0];\r\n      }\r\n      newNode.parent = selectedNodeObj.item;\r\n      selectedNodeObj.item.children.push(newNode)\r\n    }\r\n  }\r\n\r\n  return newNode;\r\n}\r\n\r\n// Not used anymore...there is no way to bring back filtered out nodes\r\nconst handleFilter = (filter, newState) => {\r\n  let filteredData = filterTreeEx(newState.hierarchyTree, filter);\r\n  console.log('handleFilter', filter, filteredData);        \r\n  newState.hierarchyTree = [...filteredData];\r\n}\r\n\r\nconst handleSaveHierDesignNode = (state, inputSetting) => {\r\n  state.userSettings = state.userSettings || [];\r\n  let userSettingsFindIdx = state.userSettings.findIndex(x => x.key === inputSetting.key);\r\n  if (userSettingsFindIdx >= 0) {\r\n    state.userSettings.splice(userSettingsFindIdx, 1);    \r\n  }\r\n  state.userSettings.push({...inputSetting});\r\n}\r\n\r\nexport default function(state=defaultState, action) {\r\n    if ([FETCH_HIERARCHY, UPDATE_HIER_DESIGNER_TREE, SELECT_HIER_DESIGNER_TREE, INSERT_HIER_DESIGNER_TREE, FILTER_HIER_DESIGNER_TREE, SAVE_HIER_DESIGN_NODE].includes(action.type)) {\r\n        console.log('[DEBUG] reducer_hierarchyDesigner', action, state);\r\n    }\r\n    switch (action.type) {\r\n      case FETCH_HIERARCHY:\r\n        return {\r\n          ...state,\r\n          hierarchyMaster: action.payload.data\r\n          //hierarchyTree: [convertMasterDataToKeys(action.payload.data)]\r\n        }\r\n      case UPDATE_HIER_DESIGNER_TREE:\r\n        let reformatted = reconstructHierarchyStack(action.payload);\r\n        return {\r\n          ...state,\r\n          hierarchyTree: reformatted\r\n        }\r\n      case SELECT_HIER_DESIGNER_TREE:\r\n        return {\r\n          ...state,\r\n          selectedNode: action.payload\r\n        }\r\n      case INSERT_HIER_DESIGNER_TREE:\r\n        let insertedState = {...state};\r\n        let newNode = handleInsert(insertedState);\r\n        insertedState.selectedNode = newNode;\r\n        return insertedState;\r\n      case FILTER_HIER_DESIGNER_TREE:\r\n        // Action Not used anymore...we don't manipulate the model anymore\r\n        // Just let the tree control filter out (do not show) nodes that do not satisfy the search string\r\n        let filterState = {...state};\r\n        let filter = action.payload;\r\n        handleFilter(filter, filterState);\r\n        return filterState;\r\n      case SAVE_HIER_DESIGN_NODE:\r\n        let saveNodeState = {...state};\r\n        saveNodeState.userSettings = [...state.userSettings];\r\n        handleSaveHierDesignNode(saveNodeState, action.payload)\r\n        return saveNodeState;\r\n      case FETCH_HIERARCHYVIEWS:\r\n        let fetchedViewState = {...state};           \r\n        /* POC: We don't fetch the Plant Hierarchy anymore\r\n        // If the user hasn't saved the hierarchy view yet (e.g. first time user)\r\n        if ((!action.payload.data || action.payload.data.length === 0) && !!fetchedViewState.hierarchyMaster) {\r\n          fetchedViewState.hierarchyTree = [convertMasterDataToKeys(fetchedViewState.hierarchyMaster)];\r\n        }\r\n        else {\r\n          // Assume [0], for the default\r\n          fetchedViewState.hierarchyTree = reconstructHierarchyStack(JSON.parse(action.payload.data[0].hierarchyJson));\r\n          fetchedViewState.userSettings = JSON.parse(action.payload.data[0].nodeSettingsJson);  \r\n        }\r\n        */\r\n       if (action.payload.data && action.payload.data.length > 0) {\r\n          fetchedViewState.hierarchyTree = reconstructHierarchyStack(JSON.parse(action.payload.data[0].hierarchyJson));\r\n          fetchedViewState.userSettings = JSON.parse(action.payload.data[0].nodeSettingsJson);          \r\n        }\r\n\r\n        return fetchedViewState;\r\n    }\r\n    return state;\r\n  }","const dropdownOptions = [\r\n    { key: 'angular', text: 'Angular', value: 'angular' },\r\n    { key: 'css', text: 'CSS', value: 'css' },\r\n    { key: 'design', text: 'Graphic Design', value: 'design' },\r\n    { key: 'ember', text: 'Ember', value: 'ember' },\r\n    { key: 'html', text: 'HTML', value: 'html' },\r\n    { key: 'ia', text: 'Information Architecture', value: 'ia' },\r\n    { key: 'javascript', text: 'Javascript', value: 'javascript' },\r\n    { key: 'mech', text: 'Mechanical Engineering', value: 'mech' },\r\n    { key: 'meteor', text: 'Meteor', value: 'meteor' },\r\n    { key: 'node', text: 'NodeJS', value: 'node' },\r\n    { key: 'plumbing', text: 'Plumbing', value: 'plumbing' },\r\n    { key: 'python', text: 'Python', value: 'python' },\r\n    { key: 'rails', text: 'Rails', value: 'rails' },\r\n    { key: 'react', text: 'React', value: 'react' },\r\n    { key: 'repair', text: 'Kitchen Repair', value: 'repair' },\r\n    { key: 'ruby', text: 'Ruby', value: 'ruby' },\r\n    { key: 'ui', text: 'UI Design', value: 'ui' },\r\n    { key: 'ux', text: 'User Experience', value: 'ux' },\r\n    { key: 'test1', text: 'A quick brown fox jumps over the lazy dog', value: 'test1' },\r\n    { key: 'test2', text: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+', value: 'test2' },\r\n    { key: 'test3', text: '春眠不觉晓，处处闻啼鸟。夜来风雨声，花落知多少。', value: 'test3' },\r\n  ];\r\n\r\nconst defaultLayoutData = {\r\n    columns: 12,\r\n    rows: 200\r\n  }\r\n\r\nconst render1Section = (index) => {\r\n    let offset = index * 7; // 7 is the height of 1 section, including the invisible page break\r\n    return [    {i: `ctrl-section${index}`, x: 0, y: offset + 0, w: 12, h: 1, ctrlType: 'section', data: {\r\n        title: 'General Information' + index,\r\n        //backgroundColor: 'lightsteelblue'\r\n        level: 1\r\n    }},\r\n    \r\n    \r\n    // [2 NEW] Gauge chart\r\n    {i: `ctrl-gauge${index}`, x: 0, y: offset + 1, w: 3, h: 4, ctrlType: 'gauge',       \r\n    data: {\r\n        label: 'Gauge:',\r\n        percent: index/100.00\r\n    }},\r\n\r\n    // [3 new] Pie Chart\r\n    {i: `ctrl-pie${index}`, x: 6, y: offset + 1, w: 3, h: 4, ctrlType: 'pie',       \r\n        data: {\r\n            label: 'Pie:',\r\n    }},\r\n\r\n    // [4 new] Bar Chart\r\n    {i: `ctrl-bar${index}`, x: 3, y: offset + 1, w: 3, h: 4, ctrlType: 'barchart',       \r\n        data: {\r\n            label: 'Bar:',\r\n    }},\r\n\r\n    // [5] Priority\r\n    {i: `ctrl-combo${index}`, x: 9, y: offset + 3, w: 3, h: 1, ctrlType: 'combo', data: {\r\n        placeholder: 'Please select...',\r\n        options: dropdownOptions,\r\n        label: 'Courses:'\r\n    }},\r\n\r\n    // [6] Label\r\n    {i: `ctrl-label${index}`, x: 9, y: offset + 1, w: 3, h: 1,ctrlType: 'label', data: {\r\n        label: index % 2 === 0? 'I am a label' : 'The quick brown fox jumps over the lazy dog. Honesty is the best policy. Time is gold. The early birdy catches the worm.',\r\n        color: 'blue',\r\n        backgroundColor: 'khaki',\r\n        fontSize: '18',\r\n        icon: 'lightbulb'\r\n    }},\r\n\r\n    // [8] Remarks\r\n    {i: `ctrl-textbox${index}`, x: 9, y: offset + 4, w: 3, h: 1,ctrlType: 'textbox', data: {\r\n        placeholder: 'Input Remarks...',\r\n        label: 'Remarks:'\r\n    }},\r\n\r\n    // [9] Scenario 1: Table - Just by itself at the bottom of section\r\n    {i: 'ctrl-table0', x: 0, y:offset+5, w: 12, h: 2,ctrlType: 'table', data: {\r\n        label: 'Table:'\r\n    }},\r\n]}\r\n\r\n// convenience func for testing\r\nconst computeMaxIndex = (data) => {\r\n    let maxIndex = 0;\r\n    data.forEach(ctrl => {\r\n        let currCtrlBtmIdx = ctrl.y + ctrl.h - 1;\r\n        if (currCtrlBtmIdx > maxIndex) {\r\n            maxIndex = currCtrlBtmIdx;\r\n        }\r\n    })\r\n\r\n    return maxIndex;\r\n}\r\n\r\n// Scenario1: Table, own row, no Page break after last control\r\nconst render1Section_1 = (index, start) => {\r\n    let offset = start;\r\n    let data = [    {i: `ctrl-section${index}`, x: 0, y: offset + 0, w: 12, h: 1, ctrlType: 'section', data: {\r\n        //title: 'General Information' + index,\r\n        //backgroundColor: 'lightsteelblue'\r\n        title: 'Scenario1: Table, own row, no Page break after last control',\r\n        level: 1\r\n    }},\r\n    \r\n    \r\n    // [2 NEW] Gauge chart\r\n    {i: `ctrl-gauge${index}`, x: 0, y: offset + 1, w: 3, h: 4, ctrlType: 'dcbar',       \r\n    data: {\r\n        label: 'Gauge:',\r\n        percent: index/100.00\r\n    }},\r\n\r\n    // [3 new] Pie Chart\r\n    {i: `ctrl-pie${index}`, x: 6, y: offset + 1, w: 3, h: 4, ctrlType: 'pie',       \r\n        data: {\r\n            label: 'Pie:',\r\n    }},\r\n\r\n    // [4 new] Bar Chart\r\n    // {i: `ctrl-bar${index}`, x: 3, y: offset + 1, w: 3, h: 4, ctrlType: 'barchart',       \r\n    //     data: {\r\n    //         label: 'Bar:',\r\n    // }},\r\n    {i: `ctrl-imageMap${index}`, x: 3, y: offset + 1, w: 3, h: 4, ctrlType: 'imageMap',       \r\n        data: {\r\n            label: 'ImageMap:',\r\n    }},\r\n\r\n    // [5] Priority\r\n    {i: `ctrl-combo${index}`, x: 9, y: offset + 3, w: 3, h: 1, ctrlType: 'combo', data: {\r\n        placeholder: 'Please select...',\r\n        options: dropdownOptions,\r\n        label: 'Courses:'\r\n    }},\r\n\r\n    // [6] Label\r\n    {i: `ctrl-label${index}`, x: 9, y: offset + 1, w: 3, h: 1,ctrlType: 'label', data: {\r\n        label: index % 2 === 0? 'I am a label' : 'The quick brown fox jumps over the lazy dog. Honesty is the best policy. Time is gold. The early birdy catches the worm.',\r\n        color: 'blue',\r\n        backgroundColor: 'khaki',\r\n        fontSize: '18',\r\n        icon: 'lightbulb'\r\n    }},\r\n\r\n    // [8] Remarks\r\n    {i: `ctrl-textbox${index}`, x: 9, y: offset + 4, w: 3, h: 1,ctrlType: 'textbox', data: {\r\n        placeholder: 'Input Remarks...',\r\n        label: 'Remarks:'\r\n    }},\r\n\r\n    // [9] Scenario 1: Table - Just by itself at the bottom of section\r\n    {i: 'ctrl-table0', x: 0, y:offset+5, w: 12, h: 2,ctrlType: 'table', data: {\r\n        label: 'Table:'\r\n    }},\r\n    ]; // data end\r\n\r\n    let maxIndex = computeMaxIndex(data);\r\n\r\n    return {\r\n        endIndex: maxIndex,\r\n        data\r\n    }\r\n}\r\n\r\n// Scenario2: Table, own row, has Page break after last control\r\nconst render1Section_2 = (index, start) => {\r\n    let offset = start;\r\n    let data = [    {i: `ctrl-section${index}`, x: 0, y: offset + 0, w: 12, h: 1, ctrlType: 'section', data: {\r\n        //title: 'General Information' + index,\r\n        //backgroundColor: 'lightsteelblue'\r\n        title: 'Scenario2: Table, own row, has Page break after last control',\r\n        level: 1\r\n    }},\r\n    \r\n    \r\n    // [2 NEW] Gauge chart\r\n    {i: `ctrl-gauge${index}`, x: 0, y: offset + 1, w: 3, h: 4, ctrlType: 'gauge',       \r\n    data: {\r\n        label: 'Gauge:',\r\n        percent: index/100.00\r\n    }},\r\n\r\n    // [3 new] Pie Chart\r\n    {i: `ctrl-pie${index}`, x: 6, y: offset + 1, w: 3, h: 4, ctrlType: 'pie',       \r\n        data: {\r\n            label: 'Pie:',\r\n    }},\r\n\r\n    // [4 new] Bar Chart\r\n    {i: `ctrl-bar${index}`, x: 3, y: offset + 1, w: 3, h: 4, ctrlType: 'barchart',       \r\n        data: {\r\n            label: 'Bar:',\r\n    }},\r\n\r\n    // [5] Priority\r\n    {i: `ctrl-combo${index}`, x: 9, y: offset + 3, w: 3, h: 1, ctrlType: 'combo', data: {\r\n        placeholder: 'Please select...',\r\n        options: dropdownOptions,\r\n        label: 'Courses:'\r\n    }},\r\n\r\n    // [6] Label\r\n    {i: `ctrl-label${index}`, x: 9, y: offset + 1, w: 3, h: 1,ctrlType: 'label', data: {\r\n        label: index % 2 === 0? 'I am a label' : 'The quick brown fox jumps over the lazy dog. Honesty is the best policy. Time is gold. The early birdy catches the worm.',\r\n        color: 'blue',\r\n        backgroundColor: 'khaki',\r\n        fontSize: '18',\r\n        icon: 'lightbulb'\r\n    }},\r\n\r\n    // [8] Remarks\r\n    {i: `ctrl-textbox${index}`, x: 9, y: offset + 4, w: 3, h: 1,ctrlType: 'textbox', data: {\r\n        placeholder: 'Input Remarks...',\r\n        label: 'Remarks:'\r\n    }},\r\n\r\n    // [9] Scenario 1: Table - Just by itself at the bottom of section\r\n    {i: 'ctrl-table0', x: 0, y:offset+5, w: 12, h: 2,ctrlType: 'table', data: {\r\n        label: 'Table:'\r\n    }},\r\n\r\n    // [10] Page Break Control\r\n    {i: `ctrl-pagebreak${index}`, x: 0, y: offset + 7, w: 12, h: 1,ctrlType: 'pagebreak', data: {}},\r\n    ];\r\n\r\n    let maxIndex = computeMaxIndex(data, start);\r\n    return {\r\n        endIndex: maxIndex,\r\n        data\r\n    }\r\n}\r\n\r\n// Scenario3: Small table, as 4th control of row, has page break after last control\r\nconst render1Section_3 = (index, start) => {\r\n    let offset = start;\r\n    let data = [    {i: `ctrl-section${index}`, x: 0, y: offset + 0, w: 12, h: 1, ctrlType: 'section', data: {\r\n        //title: 'General Information' + index,\r\n        //backgroundColor: 'lightsteelblue'\r\n        title: 'Scenario3: Smal table, as 4th control of row, has page break after last control',\r\n        level: 1\r\n    }},\r\n    \r\n    \r\n    // [2 NEW] Gauge chart\r\n    {i: `ctrl-gauge${index}`, x: 0, y: offset + 1, w: 3, h: 4, ctrlType: 'gauge',       \r\n    data: {\r\n        label: 'Gauge:',\r\n        percent: index/100.00\r\n    }},\r\n\r\n    // [3 new] Pie Chart\r\n    {i: `ctrl-pie${index}`, x: 6, y: offset + 1, w: 3, h: 4, ctrlType: 'pie',       \r\n        data: {\r\n            label: 'Pie:',\r\n    }},\r\n\r\n    // [4 new] Bar Chart\r\n    {i: `ctrl-bar${index}`, x: 3, y: offset + 1, w: 3, h: 4, ctrlType: 'barchart',       \r\n        data: {\r\n            label: 'Bar:',\r\n    }},\r\n\r\n    // [9] Scenario 1: Table - Just by itself at the bottom of section\r\n    {i: 'ctrl-table0', x: 9, y:offset+1, w: 3, h: 4,ctrlType: 'table', data: {\r\n        label: 'Table:',\r\n        smallData: true\r\n    }},\r\n\r\n    // [10] Page Break Control\r\n    {i: `ctrl-pagebreak${index}`, x: 0, y: offset + 5, w: 12, h: 1,ctrlType: 'pagebreak', data: {}},\r\n    ];\r\n\r\n    let maxIndex = computeMaxIndex(data, start);\r\n    return {\r\n        endIndex: maxIndex,\r\n        data\r\n    }\r\n}\r\n\r\n// Scenario4: Small table, as 1st control of row, has page break after last control\r\n// Not applicable anymore to new spec\r\nconst render1Section_4 = (index, start) => {\r\n    let offset = start;\r\n    let data = [    {i: `ctrl-section${index}`, x: 0, y: offset + 0, w: 12, h: 1, ctrlType: 'section', data: {\r\n        //title: 'General Information' + index,\r\n        //backgroundColor: 'lightsteelblue'\r\n        title: 'Scenario4: Table, as 1st control of row, has page break after last control',\r\n        level: 1\r\n    }},\r\n    \r\n    \r\n    // [2 NEW] Gauge chart\r\n    {i: `ctrl-gauge${index}`, x: 3, y: offset + 1, w: 3, h: 4, ctrlType: 'gauge',       \r\n    data: {\r\n        label: 'Gauge:',\r\n        percent: index/100.00\r\n    }},\r\n\r\n    // [3 new] Pie Chart\r\n    {i: `ctrl-pie${index}`, x: 6, y: offset + 1, w: 3, h: 4, ctrlType: 'pie',       \r\n        data: {\r\n            label: 'Pie:',\r\n    }},\r\n\r\n    // [4 new] Bar Chart\r\n    {i: `ctrl-bar${index}`, x: 9, y: offset + 1, w: 3, h: 4, ctrlType: 'barchart',       \r\n        data: {\r\n            label: 'Bar:',\r\n    }},\r\n\r\n    // [9] Scenario 1: Table - Just by itself at the bottom of section\r\n    {i: 'ctrl-table0', x: 0, y:offset+1, w: 3, h: 4,ctrlType: 'table', data: {\r\n        label: 'Table:',\r\n        smallData: true\r\n    }},\r\n\r\n    // [10] Page Break Control\r\n    {i: `ctrl-pagebreak${index}`, x: 0, y: offset + 5, w: 12, h: 1,ctrlType: 'pagebreak', data: {}},\r\n    ];\r\n\r\n    let maxIndex = computeMaxIndex(data, start);\r\n    return {\r\n        endIndex: maxIndex,\r\n        data\r\n    }\r\n}\r\n\r\n// Scenario5: Table solo\r\nconst render1Section_5 = (index, start) => {\r\n    let offset = start;\r\n    let data = [    {i: `ctrl-section${index}`, x: 0, y: offset + 0, w: 12, h: 1, ctrlType: 'section', data: {\r\n        //title: 'General Information' + index,\r\n        //backgroundColor: 'lightsteelblue'\r\n        title: 'Scenario5: Table, own row, but only 8 columns (will still be displayed as 12 cols), with Page break',\r\n        level: 1\r\n    }},\r\n    \r\n    \r\n    // [2 NEW] Gauge chart\r\n    {i: `ctrl-gauge${index}`, x: 0, y: offset + 1, w: 4, h: 4, ctrlType: 'gauge',       \r\n    data: {\r\n        label: 'Gauge:',\r\n        percent: index/100.00\r\n    }},\r\n\r\n    // [3 new] Pie Chart\r\n    {i: `ctrl-pie${index}`, x: 4, y: offset + 1, w: 4, h: 4, ctrlType: 'pie',       \r\n        data: {\r\n            label: 'Pie:',\r\n    }},\r\n\r\n    // [4 new] Bar Chart\r\n    {i: `ctrl-bar${index}`, x: 8, y: offset + 1, w: 4, h: 4, ctrlType: 'barchart',       \r\n        data: {\r\n            label: 'Bar:',\r\n    }},\r\n\r\n    // [9] Scenario 1: Table - Just by itself at the bottom of section\r\n    {i: 'ctrl-table0', x: 0, y:offset+5, w: 8, h: 2,ctrlType: 'table', data: {\r\n        label: 'Table:'\r\n    }},\r\n\r\n    // [10] Page Break Control\r\n    {i: `ctrl-pagebreak${index}`, x: 0, y: offset + 7, w: 12, h: 1,ctrlType: 'pagebreak', data: {}},\r\n    ];\r\n\r\n    let maxIndex = computeMaxIndex(data, start);\r\n    return {\r\n        endIndex: maxIndex,\r\n        data\r\n    }\r\n}\r\n\r\nconst render1Section_6 = (index, start) => {\r\n    let offset = start;\r\n    let data = [    {i: `ctrl-section${index}`, x: 0, y: offset + 0, w: 12, h: 1, ctrlType: 'section', data: {\r\n        title: 'Scenario6: Big Charts, Small Table + Gauge placed on top of each other',\r\n        level: 1\r\n    }},\r\n    \r\n    \r\n\r\n    // [3 new] Pie Chart\r\n    {i: `ctrl-pie${index}`, x: 0, y: offset + 1, w: 4, h: 4, ctrlType: 'pie',       \r\n        data: {\r\n            label: 'Pie:',\r\n    }},\r\n\r\n    // [4 new] Bar Chart\r\n    {i: `ctrl-bar${index}`, x: 4, y: offset + 1, w: 4, h: 4, ctrlType: 'barchart',       \r\n        data: {\r\n            label: 'Bar:',\r\n    }},\r\n\r\n    // [9] Scenario 1: Table - Just by itself at the bottom of section\r\n    {i: 'ctrl-table0', x: 8, y:offset+1, w: 4, h: 2,ctrlType: 'table', data: {\r\n        label: 'Table:',\r\n        smallData: true\r\n    }},\r\n\r\n    // [2 NEW] Gauge chart\r\n    {i: `ctrl-gauge${index}`, x: 8, y: offset + 3, w: 4, h: 2, ctrlType: 'gauge',       \r\n    data: {\r\n        label: 'Gauge:',\r\n        percent: index/100.00\r\n    }},\r\n\r\n    // [10] Page Break Control\r\n    {i: `ctrl-pagebreak${index}`, x: 0, y: offset + 5, w: 12, h: 1,ctrlType: 'pagebreak', data: {}},\r\n    ];\r\n\r\n    let maxIndex = computeMaxIndex(data, start);\r\n    return {\r\n        endIndex: maxIndex,\r\n        data\r\n    }\r\n}\r\n\r\nconst render1Section_7 = (index, start) => {\r\n    let offset = start;\r\n    let data = [    {i: `ctrl-section${index}`, x: 0, y: offset + 0, w: 12, h: 1, ctrlType: 'section', data: {\r\n        title: 'Scenario7: Big Charts, Few but WIDE Table + Gauge placed on top of each other',\r\n        level: 1\r\n    }},\r\n    \r\n    \r\n\r\n    // [3 new] Pie Chart\r\n    {i: `ctrl-pie${index}`, x: 0, y: offset + 1, w: 4, h: 4, ctrlType: 'pie',       \r\n        data: {\r\n            label: 'Pie:',\r\n    }},\r\n\r\n    // [4 new] Bar Chart\r\n    {i: `ctrl-bar${index}`, x: 4, y: offset + 1, w: 4, h: 4, ctrlType: 'barchart',       \r\n        data: {\r\n            label: 'Bar:',\r\n    }},\r\n\r\n    // [9] Scenario 1: Table - Just by itself at the bottom of section\r\n    {i: 'ctrl-table0', x: 8, y:offset+1, w: 4, h: 2,ctrlType: 'table', data: {\r\n        label: 'Table:',\r\n        smallData: true,\r\n        wideData: true\r\n    }},\r\n\r\n    // [2 NEW] Gauge chart\r\n    {i: `ctrl-gauge${index}`, x: 8, y: offset + 3, w: 4, h: 2, ctrlType: 'gauge',       \r\n    data: {\r\n        label: 'Gauge:',\r\n        percent: index/100.00\r\n    }},\r\n\r\n    // [10] Page Break Control\r\n    {i: `ctrl-pagebreak${index}`, x: 0, y: offset + 5, w: 12, h: 1,ctrlType: 'pagebreak', data: {}},\r\n    ];\r\n\r\n    let maxIndex = computeMaxIndex(data, start);\r\n    return {\r\n        endIndex: maxIndex,\r\n        data\r\n    }\r\n}\r\n\r\nconst bigLayout = () => {\r\n    let retList = [];\r\n    // for (let i = 0; i < 2; i++) {\r\n    //     retList = [...retList, ...render1Section_1(i)];\r\n    // }\r\n    // retList = [\r\n    //     ...render1Section_1(0, 0),\r\n    //     ...render1Section_2(1, 7),\r\n    // ]\r\n    let currEndIdx = 0;\r\n    let data1 = render1Section_1(0, currEndIdx);\r\n    retList =[...retList, ...data1.data];\r\n    currEndIdx = data1.endIndex + 1;\r\n\r\n    // let data2 = render1Section_2(1, currEndIdx);\r\n    // retList =[...retList, ...data2.data];\r\n    // currEndIdx = data2.endIndex + 1;\r\n\r\n    // let data3 = render1Section_3(2, currEndIdx);\r\n    // retList =[...retList, ...data3.data];\r\n    // currEndIdx = data3.endIndex + 1;\r\n\r\n    // retList = [...retList, {i: `ctrl-section`, x: 0, y: currEndIdx + 0, w: 12, h: 1, ctrlType: 'section', data: {\r\n    //     //title: 'General Information' + index,\r\n    //     //backgroundColor: 'lightsteelblue'\r\n    //     title: 'Scenario4: Table, as 1st control of row, has page break after last control',\r\n    //     level: 1\r\n    // }}];\r\n\r\n    // let data4 = render1Section_4(3, currEndIdx);\r\n    // retList =[...retList, ...data4.data];\r\n    // currEndIdx = data4.endIndex + 1;\r\n    \r\n    // let data5 = render1Section_5(4, currEndIdx);\r\n    // retList =[...retList, ...data5.data];\r\n    // currEndIdx = data5.endIndex + 1;\r\n\r\n    // let data6 = render1Section_6(5, currEndIdx);\r\n    // retList =[...retList, ...data6.data];\r\n    // currEndIdx = data6.endIndex + 1;    \r\n\r\n    // let data7 = render1Section_7(6, currEndIdx);\r\n    // retList =[...retList, ...data7.data];\r\n    // currEndIdx = data7.endIndex + 1;        \r\n\r\n    return retList;\r\n}\r\n\r\nconst defaultReportLayout = [\r\n    {i: 'ctrl-section0', x: 0, y: 0, w: 12, h: 1, ctrlType: 'section', data: {\r\n        title: 'General Information',\r\n        //backgroundColor: 'lightsteelblue'\r\n        level: 1\r\n    }},\r\n    \r\n    \r\n    // [2 NEW] Gauge chart\r\n    {i: 'ctrl-gauge0', x: 0, y: 1, w: 3, h: 4, ctrlType: 'gauge',       \r\n    data: {\r\n        label: 'Gauge:',\r\n        percent: 95.5\r\n    }},\r\n\r\n    // [3 new] Pie Chart\r\n    {i: 'ctrl-pie0', x: 6, y: 1, w: 3, h: 4, ctrlType: 'pie',       \r\n        data: {\r\n            label: 'Pie:',\r\n    }},\r\n\r\n    // [4 new] Bar Chart\r\n    {i: 'ctrl-bar0', x: 3, y: 1, w: 3, h: 4, ctrlType: 'barchart',       \r\n        data: {\r\n            label: 'Bar:',\r\n    }},\r\n\r\n    // [5] Priority\r\n    {i: 'ctrl-combo0', x: 9, y: 3, w: 3, h: 1, ctrlType: 'combo', data: {\r\n        placeholder: 'Please select...',\r\n        options: dropdownOptions,\r\n        label: 'Courses:'\r\n    }},\r\n\r\n    // [6] Label\r\n    {i: 'ctrl-label0', x: 9, y: 1, w: 3, h: 1,ctrlType: 'label', data: {\r\n        label: 'I am a label',\r\n        color: 'blue',\r\n        backgroundColor: 'khaki',\r\n        fontSize: '18',\r\n        icon: 'tag'\r\n    }},\r\n\r\n\r\n    // [8] Remarks\r\n    {i: 'ctrl-textbox0', x: 9, y: 4, w: 3, h: 1,ctrlType: 'textbox', data: {\r\n        placeholder: 'Input Remarks...',\r\n        label: 'Remarks:'\r\n    }},\r\n\r\n\r\n    // [B] Subsection\r\n    {i: 'ctrl-section1', x: 0, y: 5, w: 12, h: 1, ctrlType: 'section', data: {\r\n        title: 'Loop Summary',\r\n        //backgroundColor: 'lightsteelblue'\r\n        level: 2\r\n    }},\r\n\r\n    /*\r\n    //[2] Table - 1\r\n    {i: 'ctrl-table0', x: 0, y:6, w: 12, h: 2,ctrlType: 'table', data: {\r\n        label: 'Table:'\r\n    }},\r\n    \r\n    //[2] Table Only\r\n    // {i: 'ctrl-table0', x: 0, y:1, w: 12, h: 2,ctrlType: 'table', data: {\r\n    //     label: 'Table:'\r\n    // }},\r\n    */\r\n];\r\n\r\nconst defaultState = {\r\n    //layout: defaultReportLayout,\r\n    layout: bigLayout(),\r\n    layoutData: defaultLayoutData,     \r\n}\r\n\r\nexport default function(state = defaultState, action) {\r\n    return state;\r\n}","import axios from 'axios';\r\n\r\n// Like crossfilter concept, we filter other control's filters only.\r\n// Do not include current control's filters because we still need to show the other slices but grayed out.\r\nexport const getOtherControlFilters = (controlId, datasetFilters, includeCarryOver=false) => {\r\n    let retList = [];\r\n    for (let currCtrlId in datasetFilters) {\r\n        if (currCtrlId === controlId) {\r\n            continue;\r\n        }\r\n        let controlFilterInfo = datasetFilters[currCtrlId];\r\n\r\n        // Just take the slice info of the deepest stack\r\n        let stacks = Object.keys(controlFilterInfo);\r\n        let longestStack = stacks.reduce((r, e) => r.length < e.length ? e : r, \"\");\r\n        \r\n        let stackInfo = controlFilterInfo[longestStack];\r\n        if (!stackInfo) {\r\n            continue;\r\n        }\r\n\r\n        let sliceInfo = stackInfo.sliceInfo;\r\n        for (let prop in sliceInfo.origObj) {\r\n            retList.push({\r\n                Name: prop,\r\n                Value: sliceInfo.origObj[prop]\r\n            });\r\n        }\r\n\r\n        let seriesInfo = stackInfo.seriesInfo;\r\n        if (!seriesInfo) {\r\n            continue;\r\n        }\r\n\r\n        for (let prop in seriesInfo) {\r\n            retList.push({\r\n                Name: prop,\r\n                Value: seriesInfo[prop]\r\n            });\r\n        }\r\n    }\r\n\r\n    return retList;\r\n}\r\n\r\n// purpose: if from parent level, a filter has been made, then user drills down to child level,\r\n// the parent filter must still be applied\r\n// currGroupingsArr: can be null if user never changed the grouping level \r\n//\r\nconst getOwnControlHigherLevelFilters = (controlId, datasetFilters, currGroupingsArr) => {\r\n    let retList = [];\r\n    if (!currGroupingsArr) {\r\n        return retList;\r\n    }\r\n    let currGroupingStr = JSON.stringify(currGroupingsArr);\r\n    for (let currCtrlId in datasetFilters) {\r\n        if (currCtrlId !== controlId) {\r\n            continue;\r\n        }\r\n        let controlFilterInfo = datasetFilters[currCtrlId];     \r\n        for (let stack in controlFilterInfo) {\r\n            if (stack.length >= currGroupingStr.length) {\r\n                continue;\r\n            }\r\n\r\n            let stackInfo = controlFilterInfo[stack];\r\n            if (!stackInfo) {\r\n                continue;\r\n            }\r\n\r\n            let sliceInfo = stackInfo.sliceInfo;\r\n            for (let prop in sliceInfo.origObj) {\r\n                retList.push({\r\n                    Name: prop,\r\n                    Value: sliceInfo.origObj[prop]\r\n                });\r\n            }\r\n    \r\n            let seriesInfo = stackInfo.seriesInfo;\r\n            if (!seriesInfo) {\r\n                continue;\r\n            }\r\n    \r\n            for (let prop in seriesInfo) {\r\n                retList.push({\r\n                    Name: prop,\r\n                    Value: seriesInfo[prop]\r\n                });\r\n            }\r\n        }                \r\n    }\r\n    // TODO: There can be duplicates if there are 3 levels of grouping\r\n    // Should remove duplicates\r\n\r\n    return retList;\r\n}\r\n\r\nconst composeImageMapParams = (controlData) => {\r\n    if (!controlData.data.imageProps || !Array.isArray(controlData.data.imageProps.map.areas)) {\r\n        return null;\r\n    }\r\n\r\n    return {\r\n        name: \"Hotspots\",\r\n        values: controlData.data.imageProps.map.areas.map(a => a.name)\r\n    };\r\n}\r\n\r\n// Filter name and value are currently set as direct fields inside postObj (i.e. postObj.filterName, postObj.filterValue)\r\n// We need to move these 2 fields into RequestParams\r\nconst ReformatControlFilters = (postObj) => {\r\n    // A. Single filter field\r\n    if (postObj.filterName && postObj.filterValue && Array.isArray(postObj.parameters)) {\r\n        postObj.parameters.push({\r\n            name: postObj.filterName,\r\n            value: postObj.filterValue\r\n        })\r\n    }\r\n\r\n    delete postObj.filterName;\r\n    delete postObj.filterValue;\r\n\r\n    // B. Multiple filter fields\r\n    if (postObj.filtersList) {\r\n        for (let prop in postObj.filtersList) {\r\n            let currFilter = postObj.filtersList[prop];\r\n            if (!currFilter.filterName || !currFilter.filterValue) {\r\n\r\n            }\r\n            postObj.parameters.push({\r\n                name: currFilter.filterName,\r\n                value: currFilter.filterValue\r\n            })\r\n        }\r\n\r\n        delete postObj.filtersList;\r\n    }\r\n}\r\n\r\n// This class is responsible for making API calls to get data, or handling click or grouping events\r\nexport const fetchData = async (controlData, setIsLoading, setApiData, datasetFilters, currControlGrouping, metadata, pageFilters) => {\r\n    console.log('[DEBUG] fetchData ReportControl', controlData.i);\r\n\r\n    if (!controlData.data.dataProps.requestType) { // Optimization\r\n        return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    let postObj = {...controlData.data.dataProps}; // make a new copy\r\n    if (!!currControlGrouping) {\r\n        // currControlGrouping is from the temp grouping set by the user for Pie and Bar chart\r\n        postObj.Grouping = [...currControlGrouping];\r\n    }\r\n    else if (!!controlData.data.dataProps.categories) {\r\n        // categories is a string value\r\n        postObj.Grouping = [controlData.data.dataProps.categories];\r\n    }\r\n    else if (Array.isArray(postObj.groupings)) {\r\n        postObj.Grouping = postObj.groupings;\r\n        delete postObj.groupings;\r\n    }\r\n    else {\r\n        postObj.Grouping = [];\r\n    }\r\n\r\n    if (controlData.data.dataProps.seriesName) {\r\n        postObj.Grouping.push(controlData.data.dataProps.seriesName);\r\n    }\r\n\r\n    if (!Array.isArray(postObj.parameters)) {\r\n        postObj.parameters = [];\r\n    }\r\n\r\n    ReformatControlFilters(postObj);\r\n\r\n    if (datasetFilters) {\r\n        // Send a filter that excludes current control's filters\r\n        let otherControlFilters = getOtherControlFilters(controlData.i, datasetFilters);\r\n        let ownHigherLevelFilters = getOwnControlHigherLevelFilters(controlData.i, datasetFilters, currControlGrouping ? currControlGrouping : null);\r\n        postObj.parameters = postObj.parameters.concat(otherControlFilters);\r\n        postObj.parameters = postObj.parameters.concat(ownHigherLevelFilters);\r\n        // TODO: if in the final request params, if there are properties that overlap with the current group's own current filter, REMOVE it. \r\n        // It will look weird to see a pie chart with just one wedge. Show also the other inactive slices.\r\n        // Ideally, the groupings of each control should not overlap. This will only happen if there are overlaps.\r\n    }    \r\n\r\n    if (Array.isArray(pageFilters)) {\r\n        // TODO: Only add those filters that do not conflict with the control-lev filters if there is no existing\r\n        postObj.parameters = postObj.parameters.concat(pageFilters);\r\n    }\r\n\r\n    // if (controlData.ctrlType === 'imageMap') {\r\n    //     let imagePropParams = composeImageMapParams(controlData);\r\n    //     if (imagePropParams) {\r\n    //         postObj.parameters.push(imagePropParams);\r\n    //     }        \r\n    // }\r\n\r\n\r\n    const result = await axios\r\n        .post(metadata.server, postObj)\r\n        .catch(error => {\r\n            console.error(\"Error fetching control data\", controlData.i, error);\r\n\r\n        });\r\n\r\n    if (result && result.data) {\r\n        setApiData(result.data);\r\n    }\r\n    setIsLoading(false);\r\n};","import {SELECT_DASHBOARD_TREE, FETCH_HIERARCHYVIEWS, CLICK_CHART_SLICE, SELECT_CHART_GROUP, CLICK_PAGE_LINK} from '../actions';\r\nimport {getOtherControlFilters} from '../components/chartApiManager';\r\nimport {findNodeByKey} from '../helper/treefilter';\r\n\r\n// This is the reducer of the dashboard content\r\nconst defaultState = {\r\n    selectedNodeKey: null,\r\n    // structure:\r\n    // {\r\n    //     <datasetId1>: {\r\n    //             <controlId1>: {groupingStackStr1: {sliceInfo, seriesInfo}, groupingStackStr2: {sliceInfo, seriesInfo} }\r\n    //             <controlId2>: {groupingStackStr1: {sliceInfo, seriesInfo}, groupingStackStr2: {sliceInfo, seriesInfo} }\r\n    //         },\r\n    // }\r\n    chartClickFilters: {},   // DatasetId vs list of filters. Should clear this when new node is selected\r\n    chartTempGroupings: {}, // controlId vs new groupings...default groupings won't come here\r\n\r\n}\r\n\r\nconst findOtherControlFilters = (filtersRoot, datasetFilters, controlId) => {\r\n\r\n}\r\n\r\nconst processChartClick = (filtersRoot, actionPayload) => {\r\n    let {sliceInfo, seriesInfo, groupingStackStr, datasetId, controlId} = actionPayload;\r\n    if (!filtersRoot[datasetId]) {\r\n        filtersRoot[datasetId] = {};\r\n    }\r\n    let datasetFilters = filtersRoot[datasetId];\r\n    let controlFilters = datasetFilters[controlId];\r\n    if (!controlFilters) {\r\n        controlFilters = {};\r\n        datasetFilters[controlId] = controlFilters;\r\n    }\r\n    \r\n    let sliceInfoClone = {...sliceInfo};\r\n\r\n    controlFilters[groupingStackStr] = {\r\n        sliceInfo: sliceInfoClone,\r\n        seriesInfo\r\n    };\r\n    filtersRoot[datasetId] = {...datasetFilters}; // to force re-render (expectation: only controls belonging to this datasetId)\r\n}\r\n\r\nconst processChartGroups = (groupings, actionPayload) => {\r\n    // Just replace the grouping for the controlId directly\r\n    let {controlData, groupVal} = actionPayload;\r\n    groupings[controlData.i] = groupVal;\r\n}\r\n\r\n// actionPayload is same as the payload in processChartGroups\r\n// chartClickFilters is the state's old chartClickFilters\r\n// if there are updates, return the new chartClickFilters; otherwise return null\r\nconst removeLowerLevelFilters = (actionPayload, filtersRoot) => {\r\n    //debugger;\r\n    let {controlData, groupVal} = actionPayload;\r\n    let groupValStr = JSON.stringify(groupVal);\r\n    // find filter for this Id\r\n    if (!controlData || !controlData.i || !controlData.data.dataProps) {\r\n        return null; // sanity check only\r\n    }\r\n\r\n    let datasetFilters = filtersRoot[controlData.data.dataProps.datasetId];\r\n    if (!datasetFilters) {\r\n        return null;\r\n    }\r\n    let controlFilters = datasetFilters[controlData.i];\r\n    if (!controlFilters) {\r\n        return null;\r\n    }\r\n\r\n    let groupsToRemove = Object.keys(controlFilters).filter(x => x.length > groupValStr.length);\r\n    if (groupsToRemove.length > 0) {        \r\n        groupsToRemove.forEach(g => {\r\n            delete controlFilters[g];\r\n        })\r\n\r\n        filtersRoot[controlData.data.dataProps.datasetId] = {...datasetFilters}; // to force re-render (expectation: only controls belonging to this datasetId)\r\n\r\n        return filtersRoot;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default function(state=defaultState, action) {\r\n    switch (action.type) {\r\n        case SELECT_DASHBOARD_TREE:              \r\n            return {\r\n                ...state,\r\n                selectedNodeKey: action.payload.selectedNodeKey,\r\n                chartClickFilters: {},   // reset when a new node is clicked      \r\n                chartTempGroupings: {}   \r\n            };\r\n        case FETCH_HIERARCHYVIEWS:\r\n            // Auto select the first node from the the first view\r\n            let defaultView = action.payload.data && action.payload.data[0];\r\n            if (!defaultView) {\r\n                return state;\r\n            }\r\n            let treeData = JSON.parse(defaultView.hierarchyJson);\r\n            let firstNode = treeData && treeData[0]; // TODO: Should be the first node that is not the MapView or AnalysisView\r\n\r\n            return {\r\n                ...state,\r\n                selectedNodeKey: firstNode.key\r\n            };\r\n\r\n        case CLICK_CHART_SLICE:\r\n            let newFilters = {...state.chartClickFilters};\r\n            processChartClick(newFilters, action.payload);\r\n            // We can override the filter previously set by the same control (UI will not allow setting more than 1 different filter for the same control)\r\n            \r\n            return {\r\n                ...state,\r\n                chartClickFilters: newFilters\r\n            };\r\n\r\n        case SELECT_CHART_GROUP:\r\n            // we need to adjust the filters also\r\n            // if prev group is @child level, and there is a filter @child level\r\n            // then the new group is @parent level, we need to remove the filter @child level\r\n\r\n            let newFilter = removeLowerLevelFilters(action.payload, {...state.chartClickFilters});            \r\n\r\n            let newGroupings = {...state.chartTempGroupings};\r\n            processChartGroups(newGroupings, action.payload);\r\n            return {\r\n                ...state,\r\n                chartTempGroupings: newGroupings,\r\n                chartClickFilters: newFilter ? newFilter : state.chartClickFilters\r\n            };\r\n        case CLICK_PAGE_LINK:            \r\n            let linkedPage = action.payload && action.payload.controlData &&action.payload.controlData.data && action.payload.controlData.data.linkedPage;\r\n            if (linkedPage) {\r\n                return {\r\n                    ...state,\r\n                    selectedNodeKey: linkedPage,\r\n                    chartClickFilters: {},   // reset when a new node is clicked      \r\n                    chartTempGroupings: {}   \r\n                };\r\n            }\r\n            break;\r\n    }\r\n\r\n    return state;\r\n}","import { FETCH_HIERARCHYCONSO, FETCH_DIMENSIONS, FETCH_HIERARCHYKPI } from \"../actions/index\";\r\n  \r\nconst defaultState = {\r\n    hierarchyConso: null,\r\n    dimensions: null,\r\n    hierarchyKpi: null\r\n};\r\n\r\n// Convert the API treedata to the format needed by rc-tree-select\r\nconst convertTreeData = (apiTreeData) => {\r\n    if (!apiTreeData) {\r\n        return [];\r\n    }\r\n    return apiTreeData.map(x => {\r\n        let {fullPath, nodeName, children, ...rest} = x;\r\n        return {\r\n            key: fullPath,\r\n            value: fullPath,\r\n            title: nodeName,\r\n            children: convertTreeData(children),\r\n            ...rest\r\n        }\r\n    })\r\n}\r\n\r\n// Convert dimensions from API into a format dropdown expects\r\nconst convertDropDownOptions = (apiDropdowns) => {\r\n    if (!apiDropdowns) {\r\n        return [];\r\n    }\r\n\r\n    return apiDropdowns.map(x => {\r\n        return {\r\n            key: x.columnName,\r\n            text: x.columnName,\r\n            value: x.columnName,\r\n            datatype: x.dataType // datatype, lowercase t, because it will be included into DOM by semantic UI\r\n        }\r\n    });\r\n}\r\n\r\nexport default function(state=defaultState, action) {\r\n    if ([FETCH_HIERARCHYCONSO, FETCH_DIMENSIONS, FETCH_HIERARCHYKPI].includes(action.type)) {\r\n        console.log('[DEBUG] reducer_datadesigner', action, state);\r\n    }    \r\n    \r\n    switch(action.type) {            \r\n        case FETCH_HIERARCHYCONSO:      \r\n            return {\r\n                ...state,\r\n                hierarchyConso: convertTreeData(action.payload.data)\r\n            }\r\n        case FETCH_DIMENSIONS:\r\n            return {\r\n                ...state,\r\n                dimensions: convertDropDownOptions(action.payload.data)\r\n            }\r\n        case FETCH_HIERARCHYKPI:\r\n            return {\r\n                ...state,\r\n                hierarchyKpi: action.payload.data\r\n            }\r\n    }\r\n\r\n    return state;\r\n}","import { combineReducers } from \"redux\";\r\nimport MainAppReducer from \"./reducer_mainApp\";\r\nimport DesignerReducer from \"./reducer_designer\";\r\nimport HierarchyDesignerReducer from \"./reducer_hierarchyDesigner\";\r\nimport ReportAppReducer from \"./reducer_reportApp\";\r\nimport DashboardReducer from \"./reducer_dashboard\";\r\nimport DataDesignerReducer from './reducer_datadesigner';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  mainApp: MainAppReducer,\r\n  designer: DesignerReducer,\r\n  hierarchyDesigner: HierarchyDesignerReducer,\r\n  reportApp: ReportAppReducer,\r\n  dashboard: DashboardReducer,\r\n  dataDesigner: DataDesignerReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import React, {Component} from 'react';\r\nimport {Responsive, Sidebar, Menu} from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\nimport { menuClicked } from '../actions/index';\r\n\r\n// START: Mobile View\r\nclass NavBarMobile extends Component {    \r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSidebarHide = this.handleSidebarHide.bind(this);\r\n        this.handleSidebarToggle = this.handleSidebarToggle.bind(this);\r\n        this.state = {\r\n            burgerPushed: false\r\n        };\r\n    }\r\n\r\n    handleSidebarHide() {\r\n        if (this.state.burgerPushed) {\r\n            this.setState({burgerPushed: false})\r\n        }\r\n    }\r\n\r\n    handleSidebarToggle() {\r\n        this.setState({burgerPushed: !this.state.burgerPushed})\r\n    }\r\n\r\n    // Create a separate function for the mobile version because we need to hide the sidebar afterwards\r\n    // We also set the active menu item\r\n    // Also, next time maybe we need a dirty check\r\n    handleMenuClick = (menuName) => {\r\n        this.props.menuClickDispatcher(menuName);\r\n        this.handleSidebarToggle();\r\n    }\r\n\r\n    render() {\r\n        return <Sidebar.Pushable>\r\n                {/* Put here the sidebar that appears in and out */}\r\n                <Sidebar\r\n                    as={Menu}\r\n                    animation='overlay'\r\n                    inverted\r\n                    vertical\r\n                    visible={this.state.burgerPushed}\r\n                    width='thin'\r\n                    direction='right'\r\n                    icon='labeled'\r\n                    size='mini'\r\n                >\r\n                    {getNavBarMenuItemElements(this.handleMenuClick, this.props.activeItem, false)}\r\n                </Sidebar>\r\n\r\n                {/* Put here the application content, including the fixed menu...basically this is the whole screen */}\r\n                <Sidebar.Pusher \r\n                    dimmed={this.state.burgerPushed}\r\n                    style={{ height: \"100vh\" }}\r\n                    onClick={this.handleSidebarHide}>\r\n                    <div className=\"ui menu inverted fixed top\">\r\n                        <div className=\"header item\">\r\n                            {/* My Dashboard */}\r\n                        </div>\r\n                        <a className=\"item right\" onClick={this.handleSidebarToggle}>\r\n                            <i className=\"icon sidebar\"/>\r\n                        </a>\r\n                    </div>\r\n                    {this.props.children}\r\n                </Sidebar.Pusher>                \r\n            </Sidebar.Pushable>;\r\n    }\r\n}\r\n// END: Mobile View\r\n\r\n// START: Desktop View\r\nconst NavBarDesktop = (props) => {\r\n    // Note: putting fixed makes the menu position to be absolute. therefore child elemnets need to adjust manually\r\n    return <div className=\"ui menu inverted fixed top\" style={{'backgroundImage': 'linear-gradient(#454545, black)'}}>\r\n        <div className=\"header item\">\r\n            {/* My Dashboard */}\r\n        </div>\r\n        {getNavBarMenuItemElements(props.menuClickDispatcher, props.activeItem, true)}\r\n    </div>;\r\n}\r\n\r\nconst onMenuClicked = (menuName, menuClickDispatcher) => {\r\n    // Dispatch an action to the redux store\r\n    menuClickDispatcher(menuName);\r\n    // Set the active item\r\n}\r\n\r\nconst getNavBarMenuItemElements = (menuClickDispatcher, activeItem, withAlignment) => {\r\n    return navBarMenuItems.map(child => {\r\n        let itemClass = `item`;\r\n        if (withAlignment && child.alignment === 'right') {\r\n            itemClass += ' right';\r\n        }\r\n        if (activeItem == child.name) {\r\n            itemClass += ' active';\r\n        }\r\n\r\n        return <a key={`${child.name}`} className={itemClass} onClick={(evt) => onMenuClicked(child.name, menuClickDispatcher)}>\r\n            <i className={`icon ${child.icon}`}/>\r\n            {child.title}\r\n        </a>});\r\n}\r\n// END: Desktop View\r\n\r\nconst getNavbarChildren = (children) => {\r\n    return <div>{children}</div>\r\n}\r\n\r\n//const settingsChildren = []; // TODO, for 2nd level children\r\n\r\nconst navBarMenuItems = [\r\n    { name: 'mapView',     title: 'Map View',      icon: 'map marker alternate',   alignment: '', },\r\n    { name: 'analysisView',     title: 'Analysis',      icon: 'list alternate',   alignment: '', },\r\n    { name: 'home',     title: 'Plant Manager View',      icon: 'home',   alignment: '', },\r\n    { name: 'downloadCenter',     title: 'Download Center',      icon: 'cloud donwload',   alignment: '', },\r\n\r\n    { name: 'formsDesigner', title: 'Page Designer',  icon: 'edit',   alignment: '' },\r\n    { name: 'hierarchyDesigner', title: 'Hierarchy Designer',  icon: 'list',   alignment: '' },\r\n    // { name: 'dataSources', title: 'Data Sources',  icon: 'database',   alignment: '' },\r\n    { name: 'affiliate', title: 'Affiliate Input',  icon: 'users',   alignment: '' },\r\n\r\n    // { name: 'dashboardDesigner', title: '(delete)',  icon: 'chart area',   alignment: '' },    \r\n    // { name: 'dataDesigner', title: '(delete)',  icon: 'cube',   alignment: '' },\r\n    // { name: 'trialPage', title: '(trial)',  icon: 'gavel',    alignment: '' },\r\n    { name: 'settings', title: 'Settings',  icon: 'cog',    alignment: 'right' },\r\n]\r\n\r\nconst NavBar = (props) => {\r\n    let activeItem = props.activeMenu;\r\n    // a. For mobile, the children should be nested inside the Navbar\r\n    // b. For desktop, the children can be a sibling of the Navbar\r\n    return (\r\n        <div>            \r\n            <Responsive {...Responsive.onlyMobile}>\r\n                <NavBarMobile menuClickDispatcher={props.menuClicked} activeItem={activeItem}>\r\n                    {getNavbarChildren(props.children)}\r\n                </NavBarMobile>\r\n            </Responsive>\r\n            <Responsive minWidth={Responsive.onlyTablet.minWidth}>\r\n                <NavBarDesktop menuClickDispatcher={props.menuClicked} activeItem={activeItem}></NavBarDesktop>\r\n                {getNavbarChildren(props.children)}\r\n            </Responsive>\r\n        </div>\r\n    );\r\n}\r\n\r\n// this will become the component props\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({ menuClicked }, dispatch);\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { activeMenu: state.mainApp.activeMenu };\r\n  }\r\n\r\n//export default NavBar;\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)","import React, {Component} from 'react';\r\nimport Split from 'react-split';\r\nimport \"../styles/Split.css\";\r\n\r\nconst ID_PREFIX_SPLITTER = \"noobSplitter\";\r\nconst ID_PREFIX_GUTTER_AROW = \"noobSplitterGutterArrow\";\r\nconst DEFAULT_SPLIT_SIZES = [15, 85];\r\n\r\n// Small reusable class for creating a splitter with a gutter button\r\n// Currently, only limited to 2 items, and direction is only horizontal\r\nclass NoobSplitter extends Component {\r\n\r\n    // *** START: SPLITTER CUSTOMIZATION ***\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sizes: this.getDefaultSizes(),\r\n            id: props.id,        \r\n        };\r\n\r\n        this.onSplitDragEnd = this.onSplitDragEnd.bind(this);\r\n        this.onSplitDragStart = this.onSplitDragStart.bind(this);\r\n        this.handleSplitterBtnClick = this.handleSplitterBtnClick.bind(this);\r\n        this.createGutter = this.createGutter.bind(this);\r\n    }\r\n\r\n    getDefaultSizes() {\r\n        if (this.props && this.props.defaultSize) {\r\n            return this.props.defaultSize;\r\n        }\r\n\r\n        return DEFAULT_SPLIT_SIZES;\r\n    }\r\n\r\n    handleSplitterBtnClick() {\r\n        this.addRemoveContentTransition(true);\r\n        let currPixels = this.getCurrentPixels(this.state.sizes[0]);\r\n        console.log('handleSplitterBtnClick', currPixels, 'small? ' + this.isVerySmall(currPixels));\r\n        let newSize = null;\r\n        if (this.isVerySmall(currPixels)) {\r\n            // Expand it\r\n            this.setState({\r\n                sizes: this.getDefaultSizes(),\r\n            });\r\n            // Show the Collapse arrow after expanding\r\n            this.showCollapseArrow();\r\n            newSize = this.getDefaultSizes();\r\n        }\r\n        else {\r\n            // Collapse it\r\n            this.setState({\r\n                sizes: [0, 100],             \r\n            });    \r\n\r\n            // Show the expand button after expanding\r\n            this.showExpandArrow();\r\n            newSize = [0, 100];\r\n        }\r\n\r\n        // Fire the callback also.\r\n        // React-split currently does not have any callback when size is changed, so we manually fire the callback\r\n        if (this.props.onDragEnd) {\r\n            this.props.onDragEnd(newSize);\r\n        }\r\n    }\r\n\r\n    showExpandArrow() {\r\n        let gutterBtnArrow = document.getElementById(ID_PREFIX_GUTTER_AROW + this.state.id);\r\n        gutterBtnArrow.classList.remove('arrow-left');\r\n        gutterBtnArrow.classList.add('arrow-right');\r\n    }\r\n\r\n    showCollapseArrow() {\r\n        let gutterBtnArrow = document.getElementById(ID_PREFIX_GUTTER_AROW + this.state.id);\r\n        gutterBtnArrow.classList.remove('arrow-right');\r\n        gutterBtnArrow.classList.add('arrow-left');\r\n    }\r\n\r\n    getCurrentPixels = (currPercent) => {return currPercent / 100.00 * window.innerWidth; }\r\n    isVerySmall = (currPixels) => { return currPixels < 10 || currPixels - this.getMinsize() < 10; }\r\n\r\n\r\n    onSplitDragEnd(args) {        \r\n        this.setState({\r\n            sizes: args\r\n        });\r\n\r\n        let currPixels = this.getCurrentPixels(this.state.sizes[0]);\r\n        //console.log('onSplitDrageEnd', args, currPixels, 'small? ' + this.isVerySmall(currPixels));\r\n        if (this.isVerySmall(currPixels)) {\r\n            this.showExpandArrow();\r\n        }\r\n        else {\r\n            this.showCollapseArrow();\r\n        }\r\n\r\n        this.addRemoveContentTransition(false);\r\n\r\n        if (this.props.onDragEnd) {\r\n            this.props.onDragEnd(args);\r\n        }\r\n    }\r\n\r\n    onSplitDragStart(args) {\r\n        //console.log('onSplitDrageStart', args);\r\n        this.addRemoveContentTransition(false);\r\n    }\r\n\r\n    addRemoveContentTransition(bAdd) {\r\n        // Adds or Removes transition effects from the content classes\r\n        let contentElems = document.getElementsByClassName('splitContent');\r\n        for (let i = 0; i < contentElems.length; i++) {\r\n            let elem = contentElems[i];\r\n            if (bAdd) {\r\n                elem.style.transition = '0.5s';\r\n            }\r\n            else {\r\n                elem.style.transition = '0.0s';\r\n            }\r\n        }\r\n    }\r\n\r\n    // Custom gutter with small expand/collapse button\r\n    // TODO: prevent splitter from being dragged from the small button\r\n    createGutter() {\r\n        let gutterElem = document.createElement('div');\r\n        // These 2 class names are the original class names of the gutter from react-split\r\n        gutterElem.classList.add('gutter');\r\n        gutterElem.classList.add('gutter-horizontal');\r\n\r\n        // Add the small collapse/expand button\r\n        let gutterBtn = document.createElement('div');\r\n        gutterBtn.classList.add('gutterBtn');\r\n\r\n        let gutterBtnArrow = document.createElement('div');\r\n        gutterBtnArrow.classList.add('arrow-left');\r\n        gutterBtnArrow.id = ID_PREFIX_GUTTER_AROW + this.state.id;\r\n        gutterBtn.appendChild(gutterBtnArrow);\r\n\r\n        gutterElem.appendChild(gutterBtn);\r\n        gutterBtn.addEventListener(\"click\", this.handleSplitterBtnClick);\r\n        gutterBtn.addEventListener(\"touchend\", this.handleSplitterBtnClick);\r\n\r\n        return gutterElem;\r\n    }\r\n\r\n    // *** END: SPLITTER CUSTOMIZATION ***    \r\n\r\n    getMinsize () {\r\n        return this.props.minSize ? this.props.minSize : 0;\r\n    }\r\n\r\n    render() {\r\n        console.log('[noobSplitter][render()] ', this.props.children);\r\n        let child1 = <div/>;\r\n        let child2 = <div/>;\r\n        if (this.props.children) {\r\n            if (!Array.isArray(this.props.children)) {\r\n                child1 = this.props.children;\r\n            }\r\n            else if (this.props.children.length > 1) {\r\n                child1 = this.props.children[0];\r\n                child2 = this.props.children[1];\r\n            }\r\n        }\r\n\r\n        return <Split className=\"split\"\r\n            id={ID_PREFIX_SPLITTER + this.state.id}\r\n            direction=\"horizontal\"\r\n            sizes={this.state.sizes}\r\n            minSize={this.getMinsize()}\r\n            gutterSize={8}\r\n            onDragEnd={this.onSplitDragEnd}\r\n            onDragStart={this.onSplitDragStart}\r\n            snapOffset={0}\r\n            cursor=\"col-resize\"\r\n            gutter={this.createGutter}\r\n            >\r\n            <div className=\"content-left splitContent\" >\r\n                {/* <ToolPanel/> */}\r\n                {/* <ScrollTracker/> */}\r\n                {child1}\r\n            </div>\r\n\r\n            <div className=\"splitContent\" style={{width: \"100%\", overflow: \"auto\"}}>\r\n                {/* <DocumentSample/> */}\r\n                {child2}\r\n            </div>\r\n        </Split>;\r\n    }\r\n}\r\n\r\nexport default NoobSplitter;","import React from 'react';\r\n\r\n// Design note: considered using HOC but cannot pass state values declared in HOC as props to wrapped commponent\r\n// So we stick to classic inheritance\r\n\r\n// TODO: vertical scrollbar width is not yet accounted for in the calculation of the width\r\n\r\nconst DEFAULT_SPLIT_SIZES = [15, 85];\r\nconst GRID_GAP = 8;\r\n\r\nclass DesignerContentBase extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.defaultSizes = props.defaultSizes ? props.defaultSizes : DEFAULT_SPLIT_SIZES;\r\n        window.addEventListener('resize', this.onWindowResize);\r\n        this.state = {\r\n            leftPixels: this.defaultSizes[0] * (window.innerWidth - GRID_GAP) / 100.0,\r\n            rightPixels: this.defaultSizes[1] * (window.innerWidth - GRID_GAP) / 100.0,\r\n            currRightPercent: this.defaultSizes[1]\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('[designerContentBase] componentDidMount, rightixels supposedly:', this.defaultSizes, this.defaultSizes[1] * window.innerWidth / 100.0);\r\n        // Note: this causes the designer to render twice! Not a good design!\r\n        // Maybe my own designer does not need this.\r\n        // Actually this is only needed with React-grid-layout because the width is a props\r\n        // this.setState({\r\n        //     rightPixels: this.defaultSizes[1] * window.innerWidth / 100.0,\r\n        //     currRightPercent: this.defaultSizes[1]\r\n        // });\r\n    }\r\n\r\n    onWindowResize = () => {        \r\n        let rightPixels = this.state.currRightPercent / 100.0 * (window.innerWidth - GRID_GAP);    \r\n        this.setState({\r\n            rightPixels: rightPixels,\r\n            leftPixels: window.innerWidth - rightPixels\r\n        });\r\n    }\r\n\r\n    onSplitDragEnd = (sizes) => {\r\n        let rightPixels = sizes[1] / 100.0 * (window.innerWidth - GRID_GAP);    \r\n        console.log('onSplitDragEnd designerContent callback');   \r\n        //if there are differences, call setState. We minimize rerenders\r\n        this.setState({\r\n            rightPixels: rightPixels,\r\n            currRightPercent: sizes[1],\r\n            leftPixels: window.innerWidth - rightPixels - GRID_GAP\r\n        });\r\n    }\r\n}\r\n\r\nexport default DesignerContentBase;","import React from 'react';\r\nimport Tree, {TreeNode} from 'rc-tree';\r\nimport {findNodeByKey} from '../helper/treefilter';\r\n\r\nimport 'rc-tree/assets/index.css';\r\nimport './hierarchyTree.css';\r\n\r\n\r\nclass HierarchyDesignerTree extends React.Component {\r\n  static defaultProps = {\r\n    keys: ['//PLANT'],\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    const keys = props.keys;\r\n    this.state = {\r\n      defaultExpandedKeys: keys,\r\n      //defaultSelectedKeys: keys,\r\n      defaultSelectedKeys: [],\r\n      defaultCheckedKeys: keys,\r\n      treeData: null,\r\n      expandedKeys: []\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // Auto expand the first level nodes\r\n    let firstLevelKeys = this.getFirstLevelKeys();\r\n    console.log('[DEBUG][Tree] componentDidMount...', firstLevelKeys);\r\n    if (firstLevelKeys && firstLevelKeys.length) {\r\n      this.setState({expandedKeys: [...this.state.expandedKeys, ...firstLevelKeys]});\r\n    }\r\n  }\r\n\r\n  componentDidUpdate = (prevProps) => {\r\n    console.log('tree componentDidUpdate');\r\n    if (!!this.props.selectedNodeKey && this.props.selectedNodeKey === prevProps.selectedNodeKey) {\r\n      return;\r\n    }\r\n\r\n    // Expand the parent of the (auto-selected) selectedNode if it is not yet expanded\r\n    // Purpose is to automatically expand the parent of the newly insert node.\r\n    // We don't need to recurse upward. \r\n    // Just the parent node is enough because the parentNode's ancestors for sure is already expanded in order for the user to insert into the parent node\r\n    // Bug: parentArr is just the sibling array, not the parent array. This is not a fool-proof solution, but it will do for now, since we will\r\n    // change the implementation to use a tree list view\r\n    let nodeSelectedObj = findNodeByKey(this.props.treeData, this.props.selectedNodeKey);\r\n    if (!nodeSelectedObj) {\r\n      return;\r\n    }\r\n\r\n    let parentObj = nodeSelectedObj.parentArr[nodeSelectedObj.index];\r\n    if (!this.state.expandedKeys.includes(parentObj.key)) {\r\n      this.setState({expandedKeys: [...this.state.expandedKeys, parentObj.key]});\r\n    }\r\n  }\r\n\r\n  onExpand = (expandedKeys) => {\r\n    //console.log('onExpand', ...args);\r\n    this.setState({\r\n      expandedKeys,\r\n    });\r\n  };\r\n\r\n\r\n  Icon = (props) => {\r\n      //console.log('icon', props)\r\n      if (props.nodeType === 'Plant' || props.nodeType === 'Folder' || (props.children && props.children.length > 0) ) {\r\n        return <i className='ui icon folder outline'></i>\r\n      }\r\n      else {\r\n        \r\n        return <i className='ui icon genderless'></i>\r\n      }\r\n      \r\n  }\r\n\r\n  getSwitcherIcon = (node) => {\r\n    if (node.isLeaf) {\r\n      return null;\r\n    }\r\n\r\n    if (node.expanded) {\r\n      return <i className=\"ui icon angle down\"></i>  \r\n    }\r\n    return <i className=\"ui icon angle right\"></i>\r\n  }\r\n\r\n  // No need to do anything for now\r\n  onDragStart(info) {\r\n    //console.log('[tree] onDragStart', info);\r\n  }\r\n\r\n  // No need to do anything for now\r\n  // We allow a leaf node to become a folder node if a node was dragged into it.\r\n  // E.g. maybe the user wants to create 2 pages for a single device\r\n  // But we still need to do some validation on max depth, otherwise testers will abuse.\r\n  onDragEnter(info) {\r\n    //console.log('[tree] onDragEnter', info);\r\n  }\r\n\r\n  // nodePos sample: '0-0-0-0'\r\n  // Even the top level node format is '0-0' or '0-1'\r\n  getParentPosStr(nodePos) {\r\n    let toks = nodePos.split('-');\r\n    let lastIndex = nodePos.lastIndexOf('-');\r\n    if (lastIndex < 0) {\r\n      return null; // Will never happen, just sanity check\r\n    }\r\n\r\n    return nodePos.substr(0, lastIndex);\r\n  }\r\n\r\n  // Need to rearrange the state\r\n  // Some validations have already been performed prior to calling this function\r\n  // e.g. Dropping parent to child\r\n  // rc-tree limiation: onDrop does not fire if you drop into the bottom-most element, if the mouse position is outside the bounds of the tree's dom\r\n  // maybe we can draw an imaginary border while dragging\r\n  onDrop = (info) => {\r\n    console.log('[tree] onDrop', info);\r\n    let bUpdated = true;\r\n    const dropKey = info.node.props.eventKey;\r\n    const dragKey = info.dragNode.props.eventKey;\r\n    const dragParentPos = this.getParentPosStr(info.dragNode.props.pos);\r\n\r\n    const dropPos = info.node.props.pos.split('-');\r\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\r\n    const isBottomGap = dropPosition === 1;\r\n    const dropParentPos = this.getParentPosStr(info.node.props.pos);\r\n\r\n    // [1] TODO Do some validation, e.g. depth\r\n\r\n    // Make a copy of the state data\r\n    const data = [...this.props.treeData];\r\n\r\n    // [2] Get the dragged node and dropped node\r\n    let dragObj = findNodeByKey(data, dragKey);\r\n    let dropObj = findNodeByKey(data, dropKey);\r\n\r\n    // [3] Actual logic to modify the arrays\r\n    // [A] If dropped to a gap\r\n    if (info.dropToGap === true) {\r\n      // Note: This block can handle both [a] reorder in same folder [b] moving to a different folder\r\n      // Remove the object first\r\n      dragObj.parentArr.splice(dragObj.index, 1);\r\n      // Find the new index @ dropped folder\r\n      let newDropIdx = dropObj.parentArr.findIndex((item) => item.key === dropKey);\r\n      if (isBottomGap) {\r\n        newDropIdx++;\r\n      }\r\n      dropObj.parentArr.splice(newDropIdx, 0, dragObj.item);\r\n    }\r\n    // [B] Drop to a tree node (folder or target)\r\n    else {//(!info.dropToGap)\r\n      // [B1] If dropping to the same folder: do nothing\r\n      if (info.node.props.pos === dragParentPos) {\r\n        console.log('Dropped to the same folder: do nothing');\r\n        bUpdated = false;\r\n      }\r\n      // [B2] Dropping to a different folder/target\r\n      else {\r\n        // Remove the object first\r\n        dragObj.parentArr.splice(dragObj.index, 1);\r\n        // Add it to back of the folder or target\r\n        dropObj.item.children = dropObj.item.children || []; // create if necessary\r\n        dropObj.item.children.push(dragObj.item);\r\n      }    \r\n    }\r\n\r\n    // Fire redux action to set the new state\r\n    if (bUpdated) {\r\n      this.props.onHierarchyChanged(data);\r\n    }    \r\n  }\r\n\r\n  /*\r\n  Filterer = (node) => {\r\n    if (!this.props.searchText) {\r\n      return false;\r\n    }\r\n\r\n    return node.props.title.includes(this.props.searchText);\r\n  }\r\n  */\r\n\r\n  satisfiesFilter(nodeItem) {\r\n    if (!this.props.searchText || nodeItem.title.includes(this.props.searchText)) {\r\n      return true;\r\n    }\r\n\r\n    // If it contains children, and one of the children satisfies\r\n    if (!nodeItem.children) {\r\n      return false\r\n    }\r\n\r\n    for (var i = 0; i < nodeItem.children.length; i++) {\r\n      var currChild = nodeItem.children[i];\r\n      if (this.satisfiesFilter(currChild)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getFirstLevelKeys() {\r\n    if (!this.props.treeData) {\r\n      return [];\r\n    }\r\n\r\n    return this.props.treeData.map(item => item.key);\r\n  }\r\n\r\n  shouldHide(hiddenSettingsNames, nodeSettings)  {\r\n    if (!Array.isArray(hiddenSettingsNames)) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < hiddenSettingsNames.length; i++) {\r\n      let hiddenSettingName = hiddenSettingsNames[i];\r\n      if (nodeSettings[hiddenSettingName] === true) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  renderTreeNodes(listNodes) {\r\n    let retList = [];\r\n    if (!listNodes) {\r\n      return null;\r\n    }\r\n\r\n    // This function might be called very often, avoid anonymous functions\r\n    for (let i = 0; i < listNodes.length; i++) {\r\n      let currItem = listNodes[i];\r\n      if (!this.satisfiesFilter(currItem)) {\r\n        continue;\r\n      }\r\n      // retList.push(<TreeNode key={currItem.key} title={currItem.title} category={currItem.category} nodeType={currItem.nodeType}>\r\n      let findUserSettings = !!this.props.userSettings && this.props.userSettings.find(x => x.key === currItem.key);\r\n      if (findUserSettings) {\r\n        if (this.shouldHide(this.props.hiddenNodesSettings, findUserSettings)) {\r\n          continue;\r\n        }\r\n\r\n        let tempSettings = {...currItem};\r\n        tempSettings.title = findUserSettings.dispName;\r\n        retList.push(<TreeNode {...tempSettings}>      \r\n          {this.renderTreeNodes(currItem.children)}\r\n        </TreeNode>);      \r\n      }\r\n      else {\r\n        retList.push(<TreeNode {...currItem}>      \r\n                      {this.renderTreeNodes(currItem.children)}\r\n                    </TreeNode>);      \r\n      }\r\n    }\r\n\r\n    return retList\r\n  }\r\n\r\n  render() {\r\n    console.log('rendering tree', this.props.userSettings);\r\n    if (!this.props.treeData) {\r\n      return <div>Loading...</div>\r\n    }\r\n\r\n    return (\r\n      <Tree style={{overflow: \"auto\", height: \"100%\", width: \"100%\", padding: \"0 0 20 0\"}}\r\n          className=\"hierarchyTree\"\r\n          showLine\r\n          selectable\r\n          draggable={this.props.draggable}\r\n          onDragStart={this.onDragStart}\r\n          onDragEnter={this.onDragEnter}\r\n          onDrop={this.onDrop}\r\n          checkable={false}\r\n          defaultExpandAll={this.props.defaultExpandAll} // temp: expand everything by default; no need to config which keys to expand          \r\n          onExpand={this.onExpand}\r\n          //expandedKeys={this.state.expandedKeys}\r\n          // defaultExpandedKeys={this.getFirstLevelKeys()}\r\n          selectedKeys={this.props.selectedNodeKey ? [this.props.selectedNodeKey]: []}\r\n          //defaultSelectedKeys={this.state.defaultSelectedKeys}\r\n          //defaultCheckedKeys={this.state.defaultCheckedKeys}\r\n          onSelect={this.props.onSelectCb}\r\n          onCheck={this.onCheck}\r\n        \r\n          // Manually render the tree nodes, so that we can customize the behaviour like hiding filtered out data\r\n          //treeData={[treeDataObj]}\r\n          //treeData={this.props.treeData}\r\n          icon={this.Icon}\r\n          //filterTreeNode={this.Filterer}\r\n          switcherIcon={this.getSwitcherIcon}>\r\n              {this.renderTreeNodes(this.props.treeData)}\r\n      </Tree>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default HierarchyDesignerTree;\r\n// Remove dependency from redux so that this component may be reused.\r\n// By right, low level component must not be aware of redux anyways.\r\n// export default connect(mapStateToProps, mapDispatchToProps)(HierarchyDesignerTree)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport default function noobControlHoc(WrappedComponent) {\r\n    return class extends React.Component {\r\n\r\n        onClick = (evt) => {\r\n            console.log(\"[noobControlHoc] onClick\");\r\n            //debugger\r\n            evt.stopPropagation();\r\n        };\r\n\r\n        onMouseDown = (evt) => {\r\n            console.log(\"[noobControlHoc] onMouseDown\");\r\n            // Let the parent know that i am clicked. It's up to the parent to dispatch an action\r\n            if (this.props.controlSelected) {                \r\n                this.props.controlSelected(this.props);\r\n            }\r\n            //evt.stopPropagation();\r\n        }\r\n\r\n        componentDidMount() {\r\n            let domNode = ReactDOM.findDOMNode(this);\r\n            if (domNode) {\r\n                // Changed to mousedown so that dragging the control will also select the control\r\n                domNode.addEventListener('mousedown', this.onMouseDown);\r\n                //domNode.addEventListener('click', this.onClick);\r\n            }\r\n        }\r\n\r\n        render() {\r\n            return <WrappedComponent {...this.props}/>;\r\n        }    \r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './section.css';\r\nimport './common.css';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\n\r\nconst getFontSize = (level) => {\r\n    if (!!level) {\r\n        return 26 - level * 2;\r\n    }    \r\n\r\n    return 20;\r\n}\r\n\r\nconst Section = (props) => {\r\n    console.log('section render', props.style);\r\n    let styles = {\r\n        fontSize: getFontSize(props.data.level)\r\n    };\r\n    let classNames = 'section';\r\n    if (props.selected === true) {\r\n        classNames += ' ctrl-selected'\r\n    }\r\n\r\n    let combinedStyle = {...props.style, ...styles};\r\n\r\n    return <div className={classNames} style={combinedStyle}>\r\n        {props.data.title}\r\n    </div>\r\n}\r\nexport default noobControlHoc(Section);\r\n\r\n\r\n/* This region is for the Props Pane */\r\nconst levelOptions = [\r\n    { key: 'level-1', text: '1', value: 1 },    \r\n    { key: 'level-2', text: '2', value: 2 },    \r\n    { key: 'level-3', text: '3', value: 3 },    \r\n    { key: 'level-4', text: '4', value: 4 },    \r\n];\r\n\r\n// Include the unique props that need to be customized only\r\n// Props that are not included will be automatically rendered as textbox\r\n// Common props like control type and id will be taken care of by the Properties Panel\r\nexport const sectionProps = [\r\n    {\r\n        // label prop: no need to include if no need to customize. Will automatically title-ize the 'name'\r\n        name: 'level', \r\n        propType: 'combo',\r\n        options: levelOptions\r\n    },\r\n]","import React, {useState, useEffect} from 'react';\r\nimport './common.css';\r\nimport './richtext.css';\r\nimport 'draft-js/dist/Draft.css';\r\nimport { stateFromHTML } from 'draft-js-import-html'\r\n\r\n\r\n\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\n\r\nimport { Editor, EditorState, RichUtils, ContentState, convertFromRaw } from 'draft-js';\r\n\r\nconst styleMap = {\r\n    CODE: {\r\n      backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n      fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n      fontSize: 16,\r\n      padding: 2,\r\n    },\r\n  };\r\n\r\n  function getBlockStyle(block) {\r\n    switch (block.getType()) {\r\n      case 'blockquote': return 'RichEditor-blockquote';\r\n      default: return null;\r\n    }\r\n  }\r\n\r\nconst formatJsonObjAsHtml = (jsonObj) => {\r\n  if (!jsonObj) {\r\n    return \"\";\r\n  }\r\n\r\n  let retHtml = \"<div>\";\r\n  for (var prop in jsonObj) {\r\n    retHtml += '<div style=\"padding: 10px\">'\r\n    retHtml += `<div><b>${prop}</b></div>`;\r\n    retHtml += `<div>${jsonObj[prop]}</div>`;\r\n    retHtml += '</div>'\r\n    retHtml += '<div><br/></div>'\r\n  }\r\n\r\n  retHtml += '</div>'\r\n  return retHtml;\r\n}\r\n\r\n// This is now just a Read-only component.\r\n// Let the user modify the contents at the Properties Panel area\r\nconst RichText = (props) => {\r\n    let initialState;\r\n\r\n    debugger\r\n    \r\n    let apiDataAvailable = props.apiData && props.apiData.data && Array.isArray(props.apiData.data) && props.apiData.data.length > 0;\r\n    if (props.pageApiData && props.data.apiFieldName) {\r\n      // parse the pageApiData for apiFieldName\r\n      let value = props.pageApiData[props.data.apiFieldName];\r\n      initialState = EditorState.createWithContent(ContentState.createFromText(value));\r\n    }\r\n    else if (apiDataAvailable) {\r\n      //initialState = EditorState.createWithContent(ContentState.createFromText(JSON.stringify(props.apiData.data[0])));\r\n      let html = formatJsonObjAsHtml(props.apiData.data[0]);\r\n      initialState = EditorState.createWithContent(stateFromHTML(html));\r\n    }\r\n    else if (props.data.richTextData) {\r\n        initialState = EditorState.createWithContent(convertFromRaw(props.data.richTextData));\r\n    }\r\n    else {\r\n        //initialState = EditorState.createEmpty();\r\n        initialState = EditorState.createWithContent(ContentState.createFromText('Hello\\r\\nworld')); // to test if it can handle new line\r\n    }\r\n    const [editorState, setEditorState] = useState(initialState);\r\n\r\n    useEffect(() => {      \r\n      setEditorState(initialState)\r\n    }, [props.data.richTextData, apiDataAvailable, props.pageApiData]);\r\n\r\n    //https://github.com/jpuri/react-draft-wysiwyg/issues/4\r\n    //https://codepen.io/Kiwka/pen/YNYvyG\r\n    let classNames = 'richTextMainContainer ';\r\n    if (props.selected === true) {\r\n        classNames += ' ctrl-selected'\r\n    }\r\n\r\n    // If the user changes block type before entering any text, we can\r\n    // either style the placeholder or hide it. Let's just hide it now.\r\n    let className = 'RichEditor-editor';\r\n    var contentState = editorState.getCurrentContent();\r\n    if (!contentState.hasText()) {\r\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\r\n        className += ' RichEditor-hidePlaceholder';\r\n      }\r\n    }\r\n\r\n    return (\r\n        <div className={classNames}>\r\n            <div className=\"controlLabel\">{props.data.label}</div>\r\n            <div className=\"RichEditor-root designerRichTextEditor\">\r\n                <div className={className}>\r\n                    <Editor\r\n                    blockStyleFn={getBlockStyle}\r\n                    customStyleMap={styleMap}\r\n                    editorState={editorState}\r\n                    placeholder={props.data.placeholder}\r\n                    spellCheck={true}\r\n                    readOnly\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default noobControlHoc(RichText);\r\n\r\n// Image Props section\r\nexport const richTextProps = [\r\n  {\r\n    name: 'richTextData', \r\n    propType: 'richText',\r\n    toolTip: 'Optional. This data will not be shown if this control is configured to show contents from API.'\r\n  },\r\n  {\r\n    name: 'dataProps', \r\n    propType: 'section',\r\n  },\r\n  {\r\n    name: 'datasetId', \r\n    propType: 'number',\r\n  },\r\n  {\r\n    name: 'requestType', \r\n    propType: 'metadata',\r\n    metadataField: 'requestTypes',\r\n    metadataPropType: 'dropdown'\r\n  },\r\n  {\r\n    name: 'filterName', \r\n    propType: 'metadata',\r\n    metadataField: 'dimensions',\r\n    metadataPropType: 'treeDropdown'\r\n  },\r\n]","import React from 'react';\r\nimport { Dropdown, Icon } from 'semantic-ui-react'\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\n\r\nimport './combo.css';\r\n\r\nconst noobCombo = (props) => {\r\n    console.log('render combo: ', props.data.label);\r\n    let classNames = 'dropdownContainer ';\r\n    if (props.selected === true) {\r\n        classNames += ' ctrl-selected'\r\n    }\r\n    return <div className={classNames}>\r\n        <div className=\"controlLabel\">{props.data.label}</div>\r\n        <Dropdown placeholder={props.data.placeholder}\r\n        fluid\r\n        multiple\r\n        selection\r\n        search\r\n        options={props.data.options}\r\n        onMouseDown={e => {console.log(\"[Dropdown] onMouseDown!\")}}\r\n        button  // Add button and className so that we can control the size\r\n        className='icon small'\r\n        style={{fontWeight:'normal', color: 'gray', right: '0', left: 'auto'}} // Thi\r\n        //inline\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default noobControlHoc(noobCombo);","import React from 'react';\r\nimport './common.css';\r\nimport { Input } from 'semantic-ui-react'\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\n\r\n\r\nconst Textbox = (props) => {\r\n    console.log('textbox render', props.data.label);\r\n    let classNames = '';\r\n    if (props.selected === true) {\r\n        classNames += ' ctrl-selected'\r\n    }\r\n\r\n    return <div className={classNames} style={{width: '100%'}}>\r\n        <div className=\"controlLabel\">{props.data.label}</div>\r\n        <Input key={props.data.i} \r\n            size='small'\r\n            fluid\r\n            placeholder={props.data.placeholder}/>\r\n    </div>\r\n}\r\nexport default noobControlHoc(Textbox);","//https://stackoverflow.com/questions/4149276/how-to-convert-camelcase-to-camel-case\r\nexport default (string) => {\r\n    return string\r\n        // insert a space between lower & upper\r\n        .replace(/([a-z])([A-Z])/g, '$1 $2')\r\n        // space before last upper in a sequence followed by lower\r\n        .replace(/\\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3')\r\n        // uppercase the first character\r\n        .replace(/^./, function(str){ return str.toUpperCase(); })\r\n}","import React, { useState, Fragment, useEffect } from 'react';\r\nimport './common.css';\r\nimport './table.css';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport { useTable, usePagination, useFilters, useSortBy } from 'react-table';\r\nimport splitWord from '../helper/wordSplitter';\r\n\r\n// This control is used in Design Mode and Dashboard Mode\r\n// For PDF, ReportTable is used.\r\n\r\nconst DEFAULT_PAGESIZE = 10;\r\n\r\nconst statuses = ['Good', 'Bad', 'Fair', 'Uncertain']\r\n\r\nconst getSampleData = () => {\r\n    let retList = [];\r\n    let nData = 2;\r\n    for (let iArea = 0; iArea < 10; iArea++) {\r\n        for (let i = 0; i < nData; i++) {\r\n        retList.push({\r\n            targetName: `FIC_${iArea}_${i}`, \r\n            fullPath: `//PLANT/AREA_${iArea}/FIC_${i}`, \r\n            timeInControl: statuses[(i+1) % statuses.length], \r\n            timeInAlarm: statuses[(i+2) % statuses.length], \r\n            timeMvOutOfLimits: statuses[i % statuses.length],\r\n            kpi1: statuses[i % statuses.length],\r\n            kpi2: statuses[i % statuses.length],\r\n            kpi3: statuses[i % statuses.length],\r\n            kpi4: statuses[i % statuses.length],\r\n            kpi5: statuses[i % statuses.length],\r\n            kpi6: statuses[i % statuses.length],\r\n            kpi7: statuses[i % statuses.length],\r\n            kpi8: statuses[i % statuses.length],\r\n            kpi9: statuses[i % statuses.length],\r\n            kpi10: statuses[i % statuses.length],\r\n            subRows: undefined\r\n        })\r\n        }\r\n    }\r\n    \r\n\r\n    return retList;\r\n}\r\n\r\nconst renderFooterTargetNames = (info)=> {\r\n    let total = info.rows.length;\r\n    return 'Footer Target Names: ' + total + ' Records';\r\n}\r\n\r\nconst computeKpi = (kpiName, info) => {\r\n    let totalTargets = info.data.length;\r\n    let good = info.data.filter(x => x[kpiName] === 'Good').length;\r\n    return `${good / totalTargets * 100.00}%`\r\n}\r\n\r\nconst sampleColumns = [\r\n    {\r\n        Header: 'Target Info',\r\n        Footer: 'Target Summary',    \r\n        TestCustomProp: 'helllo',   \r\n        // customColSpan: 4, // should be computed\r\n        width: 200, // does not show up in getFooterGroupProps()\r\n        columns: [{\r\n            Header: 'Name',\r\n            accessor: 'targetName',\r\n            Footer: renderFooterTargetNames,\r\n            FooterColSpan: 2,\r\n        }, \r\n        {\r\n            Header: 'Full Path',\r\n            accessor: 'fullPath',\r\n            customColSpan: 3,\r\n        }]\r\n    },\r\n    {\r\n        Header: 'KPIs',\r\n        Footer: 'KPI Summary',\r\n        columns: [{\r\n            Header: 'Time in Control',\r\n            accessor: 'timeInControl',\r\n            Footer: info => computeKpi('timeInControl', info),\r\n            colType: 'kpi'\r\n        },\r\n        {\r\n            Header: 'Time in Alarm',\r\n            accessor: 'timeInAlarm',\r\n            Footer: info => computeKpi('timeInAlarm', info),\r\n            colType: 'kpi'\r\n        },\r\n        {\r\n            Header: 'Time MV Out of Limits',\r\n            accessor: 'timeMvOutOfLimits',\r\n            Footer: info => computeKpi('timeMvOutOfLimits', info),\r\n            colType: 'kpi'\r\n        },\r\n    \r\n        // {\r\n        //     //Header: 'KPI 1 - Dummy KPI with a very long name',\r\n        //     Header: 'KPI 1',\r\n        //     accessor: 'kpi1',\r\n        //     Footer: info => computeKpi('kpi1', info),\r\n        //     colType: 'kpi'\r\n        // },\r\n        // {\r\n        //     // Header: 'KPI 2 - Dummy KPI with a very long name',\r\n        //     Header: 'KPI 2',\r\n        //     accessor: 'kpi2',\r\n        //     Footer: info => computeKpi('kpi2', info),\r\n        //     colType: 'kpi'\r\n        // },\r\n        // {\r\n        //     //Header: 'KPI 3 - Dummy KPI with a very long name',\r\n        //     Header: 'KPI 3',\r\n        //     accessor: 'kpi3',\r\n        //     Footer: info => computeKpi('kpi3', info),\r\n        //     colType: 'kpi'\r\n        // },\r\n        // {\r\n        //     Header: 'KPI 4 - Dummy KPI with a very long name',\r\n        //     accessor: 'kpi4',\r\n        //     Footer: info => computeKpi('kpi4', info),\r\n        //     colType: 'kpi'\r\n        // },\r\n        // {\r\n        //     Header: 'KPI 5 - Dummy KPI with a very long name',\r\n        //     accessor: 'kpi5',\r\n        //     Footer: info => computeKpi('kpi5', info),\r\n        //     colType: 'kpi'\r\n        // },\r\n        // {\r\n        //     Header: 'KPI 6 - Dummy KPI with a very long name',\r\n        //     accessor: 'kpi6',\r\n        //     Footer: info => computeKpi('kpi6', info),\r\n        //     colType: 'kpi'\r\n        // },\r\n        // {\r\n        //     Header: 'KPI 7 - Dummy KPI with a very long name',\r\n        //     accessor: 'kpi7',\r\n        //     Footer: info => computeKpi('kpi7', info),\r\n        //     colType: 'kpi'\r\n        // },\r\n        // {\r\n        //     Header: 'KPI 8 - Dummy KPI with a very long name',\r\n        //     accessor: 'kpi8',\r\n        //     Footer: info => computeKpi('kpi8', info),\r\n        //     colType: 'kpi'\r\n        // },\r\n        // {\r\n        //     Header: 'KPI 9 - Dummy KPI with a very long name',\r\n        //     accessor: 'kpi9',\r\n        //     Footer: info => computeKpi('kpi9', info),\r\n        //     colType: 'kpi'\r\n        // },\r\n        // {\r\n        //     Header: 'KPI 10 - Dummy KPI with a very long name',\r\n        //     accessor: 'kpi10',\r\n        //     Footer: info => computeKpi('kpi10', info),\r\n        //     colType: 'kpi'\r\n        // },\r\n\r\n        ]\r\n    },\r\n];\r\n\r\nconst generateColumns = (data) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    let firstData = data[0];\r\n    let retList = [];\r\n    for (let prop in firstData) {\r\n        retList.push({\r\n            Header: splitWord(prop),\r\n            accessor: prop\r\n        });\r\n    }\r\n\r\n    return retList;\r\n}\r\n\r\nconst getAdditionalCellProps = (cell) => {\r\n    if (cell.column.colType !== 'kpi') {\r\n        return {};\r\n    }\r\n\r\n    if (cell.value === 'Bad') {\r\n        return {\r\n            style: {\r\n                backgroundColor: 'pink'\r\n            }\r\n        }    \r\n    }\r\n    else if (cell.value === 'Good') {\r\n        return {\r\n            style: {\r\n                backgroundColor: 'lime'\r\n            }\r\n        }    \r\n    }\r\n    else if (cell.value === 'Uncertain') {\r\n        return {\r\n            style: {\r\n                backgroundColor: 'lightgray'\r\n            }\r\n        }    \r\n    }\r\n    else if (cell.value === 'Fair') {\r\n        return {\r\n            style: {\r\n                backgroundColor: 'gold'\r\n            }\r\n        }    \r\n    }\r\n    else {\r\n        return {};\r\n    }\r\n}\r\n\r\nconst onFilterChange = (e, f) => {\r\n    //console.log('onFilterChange', e.currentTarget.value);\r\n\r\n}\r\n\r\nconst getColHeaderByAccessor = (colArray, accessor) => {\r\n    if (!colArray) {\r\n        return null;\r\n    }\r\n\r\n    for (var i = 0; i < colArray.length; i++) {\r\n        let currCol = colArray[i];\r\n        if (currCol.accessor === accessor) {\r\n            return currCol;\r\n        }\r\n\r\n        return getColHeaderByAccessor(currCol.columns, accessor);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst getTotalNumColumns = (colArray) => {\r\n    let ret = 0;\r\n    if (!colArray) {\r\n        return 0;\r\n    }\r\n\r\n    ret = colArray.reduce( (acc, curr, index, origArr) => {\r\n        // console.log('reduce', acc, curr.Header, index, origArr);\r\n        let ret = acc + getTotalNumColumns(curr.columns);\r\n\r\n        if (!curr.accessor) {\r\n            return ret;\r\n        }\r\n        if (!curr.customColSpan) {\r\n            return ret + 1;\r\n        }\r\n        else {\r\n            return ret + curr.customColSpan;\r\n        }\r\n    }, 0 )\r\n\r\n    //console.log('reduce ret', ret);\r\n    return ret;\r\n}\r\n\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n    column: { filterValue, preFilteredRows, setFilter },\r\n  }) {\r\n    const count = preFilteredRows.length;\r\n  \r\n    return (\r\n      <input\r\n        value={filterValue || ''}\r\n        onChange={e => {\r\n          setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n        }}\r\n        placeholder={`Filter...`}\r\n        onClick = {(e) => {\r\n                e.stopPropagation();\r\n            }\r\n        }\r\n        style={{width: '100%'}}\r\n      />\r\n    )\r\n  }\r\n  \r\nconst hasFilterableColumn = (headerGroup) => {\r\n    let findFilterableColumn = headerGroup.headers.find(col => col.canFilter);\r\n    return !!findFilterableColumn;\r\n}\r\n\r\nexport const TableBase = (props) => {\r\n    let classNames = 'noobTableContainer ';\r\n    if (props.selected === true) {\r\n        classNames += ' ctrl-selected'\r\n    }\r\n\r\n    let columnsToUse, dataToUse;\r\n    if (props.designMode) {\r\n    // if (true) {\r\n        columnsToUse = sampleColumns;\r\n        dataToUse = getSampleData();\r\n    }\r\n    else {\r\n        dataToUse = props.apiData? props.apiData.data : [];\r\n        columnsToUse = props.apiData? generateColumns(props.apiData.data) : [];\r\n    }\r\n\r\n    const totalCols = getTotalNumColumns(columnsToUse);\r\n    const memoColumns = React.useMemo(() => columnsToUse, [props.apiData]);\r\n    const memoData = React.useMemo(() => dataToUse, [props.apiData]);\r\n    const filterTypes = React.useMemo(\r\n        () => ({\r\n          // Or, override the default text filter to use\r\n          // \"startWith\"\r\n          text: (rows, id, filterValue) => {\r\n            return rows.filter(row => {\r\n              const rowValue = row.values[id]\r\n              return rowValue !== undefined\r\n                ? String(rowValue)\r\n                    .toLowerCase()\r\n                    .startsWith(String(filterValue).toLowerCase())\r\n                : true\r\n            })\r\n          },\r\n        }),\r\n        []\r\n      );\r\n\r\n    const getPageSize = () => {\r\n        return props.data.showPaginator || dataToUse.length === 0 ? DEFAULT_PAGESIZE : dataToUse.length;\r\n    }\r\n\r\n    const defaultColumn = React.useMemo(\r\n        () => ({\r\n          // Let's set up our default Filter UI\r\n          // Filter UI can vary depending on column type\r\n          // E.g. numeric, dropdown\r\n          Filter: DefaultColumnFilter,\r\n        }),\r\n        []\r\n      )\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        footerGroups,\r\n        rows,\r\n        prepareRow,\r\n        page,\r\n\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        pageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        state: { pageIndex, pageSize },\r\n      } = useTable({\r\n        columns: memoColumns,\r\n        data: memoData,\r\n        defaultColumn,\r\n        filterTypes,\r\n        initialState: { pageIndex: 0, pageSize: getPageSize() },\r\n      }, \r\n      useFilters,\r\n      useSortBy,\r\n      usePagination,\r\n      );\r\n\r\n    useEffect(() => {\r\n        setPageSize(getPageSize());\r\n      }, [props.data.showPaginator, dataToUse.length]);\r\n\r\n    // console.log('table render getTableProps', getTableProps());\r\n    // console.log('table render data', inData);\r\n    // console.log('table render columns', inCol);\r\n    // console.log('table render rows', rows);\r\n    // Can access everything from footerGroups\r\n    //console.log('table render footerGroups all', footerGroups);\r\n    // Cannot access everything from footerGroup. It only includes key and colSpan\r\n    // footerGroups.forEach(footerGroup => {\r\n    //     console.log('table render footerGroup props:', footerGroup.getFooterGroupProps());\r\n    //     footerGroup.headers.forEach(column => {\r\n    //         console.log('table render column props:', column.getFooterProps());\r\n    //     });\r\n    // })\r\n    // console.log('table render page');    \r\n\r\n    headerGroups.forEach(headerGroup => {\r\n        //console.log('table render headerGroup props:', headerGroup.getHeaderGroupProps());\r\n        headerGroup.headers.forEach(column => {\r\n            //console.log('table render column props:', column.getHeaderProps());\r\n        });\r\n    })\r\n\r\n    if (!dataToUse) {\r\n        return <div>Loading data...</div>\r\n    }\r\n\r\n    return <div className={classNames}>\r\n        <div className=\"controlLabel\">{props.data.label}</div>\r\n        <table className=\"noobTable\" {...getTableProps()}>\r\n            <thead>\r\n            {headerGroups.map((headerGroup, iHeaderGrp) => (\r\n                <Fragment key={`headerGroup_${iHeaderGrp}`}>\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => {\r\n                    let thisWidth = 100.0 / totalCols;\r\n                    if (column.customColSpan) {\r\n                        thisWidth = thisWidth * column.customColSpan\r\n                    }\r\n                    let custProp = {width: thisWidth + \"%\"};\r\n                    //let colHeader = getColHeaderByAccessor(columns, )\r\n                    return (<th \r\n                        {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                        {...custProp}\r\n                    >{column.render('Header')}\r\n                    {/* Add a sort direction indicator */}\r\n                    <span>\r\n                        {column.isSorted\r\n                        ? column.isSortedDesc\r\n                            ? ' 🔽'\r\n                            : ' 🔼'\r\n                        : ''}\r\n                    </span>\r\n                    {/* Render the columns filter UI */}\r\n                    {/* <div>{column.canFilter ? column.render('Filter') : null}</div> */}\r\n                    </th>\r\n                    )\r\n                    }\r\n                )                \r\n                }\r\n                </tr>\r\n\r\n                {props.data.showFilters && hasFilterableColumn(headerGroup) && <tr key={`headerGroupFilter_${iHeaderGrp}`}>{headerGroup.headers.map(column => {\r\n                        return <th key={`headerGroupFilter_${iHeaderGrp}_${column.id}`}><div className=\"colFilter\">{column.canFilter ? column.render('Filter') : null}</div></th>\r\n                        })\r\n                    }                \r\n                </tr>}\r\n                </Fragment>\r\n            ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n            {page.map(\r\n                (row, i) => {\r\n                prepareRow(row);\r\n                return (\r\n                    <tr {...row.getRowProps()}>\r\n                    {row.cells.map(cell => {\r\n                        return <td {...cell.getCellProps(getAdditionalCellProps(cell))} \r\n                        >{cell.render('Cell')}</td>\r\n                    })}\r\n                    </tr>\r\n                )}\r\n            )}\r\n            <tr>\r\n            {props.data.showFooter && <td colSpan=\"20\" style={{backgroundColor: '#ccddee'}}>Total of {rows.length} records</td>}\r\n            </tr>\r\n            </tbody>\r\n            {/* <tfoot>\r\n                {footerGroups.map(group => (\r\n                <tr {...group.getFooterGroupProps()}>\r\n                    {group.headers.map(column => (\r\n                        <td {...column.getFooterProps()}>{column.render('Footer')}</td>                                        \r\n                    ))}\r\n                </tr>\r\n                ))}\r\n            </tfoot> */}\r\n        </table>\r\n        {/* for the paginator...maybe separate into its own function */}\r\n        {props.data.showPaginator && pageCount > 0 && \r\n            // false &&\r\n            <div className=\"pagination\">\r\n                <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n                {'<<'}\r\n                </button>{' '}\r\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n                {'<'}\r\n                </button>{' '}\r\n                <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n                {'>'}\r\n                </button>{' '}\r\n                <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n                {'>>'}\r\n                </button>{' '}\r\n                <span>\r\n                Page{' '}\r\n                <strong>\r\n                {pageIndex + 1} of {pageOptions.length}\r\n                </strong>{' '}\r\n                </span>\r\n                <span>\r\n                &nbsp;\r\n                &nbsp;\r\n                Go to page:{' '}\r\n                &nbsp;\r\n                <input\r\n                    type=\"number\"\r\n                    defaultValue={pageIndex + 1}\r\n                    onChange={e => {\r\n                    const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n                    gotoPage(page)\r\n                    }}\r\n                    style={{ width: '80px' }}\r\n                />\r\n                </span>{' '}\r\n                <select\r\n                value={pageSize}\r\n                onChange={e => {\r\n                    setPageSize(Number(e.target.value))\r\n                }}\r\n                >\r\n                {[5, 10, 20, 30, 40].map(pageSize => (\r\n                    <option key={pageSize} value={pageSize}>\r\n                    Show {pageSize}\r\n                    </option>\r\n                ))}\r\n                </select>\r\n            </div>}\r\n        </div>\r\n    }\r\nexport default noobControlHoc(TableBase);\r\n\r\n\r\n// For the properties panel\r\nexport const tableProps = [\r\n    {\r\n        name: 'showFilters', \r\n        propType: 'bool',\r\n    },    \r\n    {\r\n        name: 'showPaginator', \r\n        propType: 'bool',\r\n    },    \r\n    {\r\n        name: 'showFooter', \r\n        propType: 'bool',\r\n    },    \r\n    {\r\n      name: 'dataProps', \r\n      propType: 'section',\r\n    },\r\n    {\r\n      name: 'datasetId', \r\n      propType: 'number',\r\n    },\r\n    {\r\n      name: 'requestType', \r\n      propType: 'metadata',\r\n      metadataField: 'requestTypes',\r\n      metadataPropType: 'dropdown'\r\n    },\r\n    {\r\n      name: 'columns', \r\n      propType: 'metadata',\r\n      metadataField: 'dimensions',\r\n      metadataPropType: 'treeDropdown',\r\n      multiple: true,\r\n      // Means if specifyColumns===true, this field will be visible or enabled. Otherwise, set to invisible or disabled\r\n      watchedField: 'specifyColumns',\r\n      watchedValue: true,\r\n      \r\n    },\r\n    {\r\n        name: 'aggregation', \r\n        propType: 'metadata',\r\n        metadataField: null,\r\n        metadataPropType: 'textbox',\r\n        toolTip: 'Only count is supported in this version. Also, aggregation may not be applicable, depending on Request Type.',\r\n        readOnly: true\r\n    },\r\n    {\r\n        name: 'specifyColumns',\r\n        propType: 'bool',\r\n        watchableField: true, // means this field can be watched by other fields for changes\r\n        toolTip: \"If [Specify Columns] is ticked, select the [Columns] you wish to include. Otherwise, specify [Categories] and/or [Series Name] just like configuring a piechart/barchart.\"\r\n    },\r\n    {\r\n        name: 'categories',\r\n        propType: 'metadata',\r\n        metadataField: 'dimensions',\r\n        metadataPropType: 'treeDropdown',\r\n        // Means if specifyColumns===true, this field will be visible or enabled. Otherwise, set to invisible or disabled\r\n        watchedField: 'specifyColumns',\r\n        watchedValue: false,\r\n    },\r\n    {\r\n        name: 'seriesName',\r\n        propType: 'metadata',\r\n        metadataField: 'dimensions',\r\n        metadataPropType: 'treeDropdown',\r\n        // Means if specifyColumns===true, this field will be visible or enabled. Otherwise, set to invisible or disabled\r\n        watchedField: 'specifyColumns',\r\n        watchedValue: false,\r\n    },    \r\n    {\r\n        name: 'filterName', \r\n        propType: 'metadata',\r\n        metadataField: 'dimensions',\r\n        metadataPropType: 'treeDropdown'\r\n    },\r\n    {\r\n        name: 'filtersList', \r\n        propType: 'dynamicFilter',\r\n        metadataField: 'dimensions', // Infer metadata field if it is a dynamicFilter\r\n        metadataPropType: 'treeDropdown',\r\n        multiple: true,\r\n        toolTip: \"Select one or more filters by clicking the Add Parameter button\"\r\n      },\r\n];","import React from 'react';\r\nimport './common.css';\r\nimport './label.css';\r\nimport { Input } from 'semantic-ui-react'\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\n\r\n\r\nconst Label = (props) => {\r\n    console.log('textbox render', props.data.label);\r\n    let classNames = 'ctrlLabel ctrlLabel-report';\r\n    if (props.selected === true) {\r\n        classNames += ' ctrl-selected'\r\n    }\r\n\r\n    let labelStyles = {height: '100%'};\r\n    if (!!props.data.color) {\r\n        labelStyles.color = props.data.color;\r\n    }\r\n    if (!!props.data.backgroundColor) {\r\n        labelStyles.backgroundColor = props.data.backgroundColor;\r\n    }\r\n    if (!!props.data.fontSize) {\r\n        labelStyles.fontSize = props.data.fontSize + 'px';\r\n    }\r\n    if(!!props.data.linkedPage) {\r\n        labelStyles.cursor = 'pointer';\r\n    }\r\n    if(!!props.data.alignment) {\r\n        labelStyles.justifyContent = props.data.alignment;\r\n    }\r\n    // For the data\r\n    let labelToShow;\r\n    if (props.pageApiData && props.data.apiFieldName) {\r\n        labelToShow = props.pageApiData[props.data.apiFieldName];\r\n    }\r\n    else {\r\n        labelToShow = props.data.label;\r\n    }\r\n\r\n    const handleClick = () => {\r\n        if (!props.data.linkedPage || !props.data.handleLinkClick) {\r\n            return;\r\n        }\r\n\r\n        props.data.handleLinkClick(props);\r\n    }\r\n\r\n    return <div className={classNames} style={labelStyles} onClick={handleClick}>\r\n        {props.data.icon && <span><i className={`ui icon ${props.data.icon}`} style={{paddingLeft: '5px'}}/></span> }\r\n        <span style={{marginLeft: '5px'}}>{labelToShow}</span>\r\n    </div>\r\n}\r\nexport default noobControlHoc(Label);\r\n\r\n\r\nexport const labelProps = [\r\n    {\r\n        // label prop: no need to include if no need to customize. Will automatically title-ize the 'name'\r\n        name: 'icon', \r\n        propType: 'icon',\r\n    },\r\n    {\r\n        name: 'color', \r\n        propType: 'color',\r\n    },\r\n    {\r\n        name: 'backgroundColor', \r\n        propType: 'color',\r\n    },\r\n    {\r\n        name: 'fontSize', \r\n        propType: 'number',\r\n        toolTip: 'in pixels unit'\r\n    },\r\n    {\r\n        name: 'linkedPage', \r\n        propType: 'pageLinks',\r\n    },\r\n    {\r\n        name: 'alignment', \r\n        propType: 'alignment',\r\n        toolTip: 'Specify CSS justify-content value, e.g. left, center'\r\n    },\r\n]","import React from 'react';\r\nimport './notification.css'\r\nimport 'react-notifications-component/dist/theme.css';\r\nimport { store } from 'react-notifications-component';\r\n\r\nconst DEFAULT_WIDTH = 400;\r\nconst DEFAULT_DURATION = 1200;\r\n\r\nexport const NotifType = {\r\n    default: 'default',\r\n    success: 'success',\r\n    danger: 'danger',\r\n    warning: 'warning',\r\n    info: 'info'\r\n}\r\n\r\nconst NotifIcon = {\r\n    success: 'check circle',\r\n    danger: 'exclamation circle',\r\n    warning: 'exclamation triangle',\r\n    info: 'info circle'\r\n}\r\n\r\nconst defaultProps = {\r\n    type: \"default\",\r\n    insert: \"top\",\r\n    container: \"top-center\",\r\n    animationIn: [\"animated\", \"slideInDown\"],\r\n    animationOut: [\"animated\", \"slideOutUp\"],\r\n    width: DEFAULT_WIDTH,\r\n    dismiss: {\r\n      duration: DEFAULT_DURATION,\r\n      onScreen: false,\r\n      pauseOnHover: true,\r\n      showIcon: true    // X button to dismiss\r\n    }\r\n};\r\n\r\nexport const ShowMessage = (titleIn, typeIn=NotifType.default, messageIn=' ') => {\r\n    if (!messageIn) {\r\n        messageIn = ' '\r\n    }\r\n\r\n    store.addNotification({\r\n        ...defaultProps,\r\n        title: titleIn,\r\n        message: messageIn,\r\n        type: typeIn,        \r\n    });\r\n}\r\n\r\n// TODO: try to show icon\r\nconst renderContentWithIcon = (type, iconClassName, message) => {\r\n    // return (\r\n    //     <div className={`notification-custom-${type}`}>\r\n    //         <div className=\"notification-custom-icon\">\r\n    //             {/* <i className={`ui icon ${iconClassName}`}/> */}\r\n    //             <i className={`ui icon save`}/>\r\n    //         </div>\r\n    //         <div className=\"notification-custom-content\">\r\n    //             <p className=\"notification-message\">{message}</p>\r\n    //         </div>\r\n    //     </div>\r\n    // )\r\n    // return (\r\n    //     <div className={`notification-custom-success`}>\r\n    //         <div className=\"notification-custom-content\">\r\n    //         <p className=\"notification-message\">\r\n    //             HElllllllllllllllllllloooooooo            \r\n    //         </p>\r\n    //         </div>\r\n    //     </div>\r\n    // );\r\n    return (<div style={{border: '1px soild red'}}>Hello!</div>)\r\n\r\n  }\r\n\r\nexport default ShowMessage;","import React from 'react';\r\n\r\n//import dc from 'dc';\r\n//import dc from 'dc';\r\nimport crossfilter from 'crossfilter2';\r\nimport * as d3 from 'd3/dist/d3';\r\nimport \"dc/dist/style/dc.css\";\r\nimport {\r\n    ResponsiveContainer\r\n  } from 'recharts';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\n\r\n\r\nconst dc = require(\"dc\");\r\n\r\nconst generateData = () => {\r\n    let numTargets = 10;\r\n    let diagKpis = {\r\n        \"Loop Controllability\": [\"Time in Control\", \"Time in Preferred Mode\"],\r\n        \"Valve Controllability\": [\"Time in Control\", \"Total Deviation Time\"],\r\n    };\r\n    let kpiStatuses = [\"Good\", \"Bad\", \"Fair\", \"Uncertain\"];\r\n\r\n    let retList = [];\r\n\r\n    for (let i = 0; i < numTargets; i++) {\r\n        let diags = Object.keys(diagKpis);\r\n        for (let iDiag = 0; iDiag < diags.length; iDiag++) {\r\n            let kpis = diagKpis[diags[iDiag]];\r\n            for (let iKpi = 0; iKpi < kpis.length; iKpi++) {\r\n                retList.push({\r\n                    targetName: `Target_${i}`,\r\n                    diagName: diags[iDiag],\r\n                    kpiname: kpis[iKpi],\r\n                    kpiStatus: kpiStatuses[i % kpiStatuses.length],\r\n                    kpiValue: i + iDiag + iKpi\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return retList;\r\n}\r\n\r\nclass DCChart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRefChart = React.createRef();\r\n        this.theChart = null;\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        var kpis = crossfilter(generateData());\r\n        const dimensionKpi = kpis.dimension(function (data) {\r\n            return data.kpiStatus;\r\n        });\r\n        const groupKpi = dimensionKpi.group();\r\n        //const kpiStatusChart = dc.rowChart(this.myRefChart.current)\r\n        this.theChart = dc.rowChart(this.myRefChart.current)\r\n        .dimension(dimensionKpi)\r\n        .group(groupKpi)    \r\n        .ordinalColors(['#00aa00', '#aa2222', '#999900', '#555555'])   \r\n        // .height(null)         \r\n        // .width(null)     \r\n        // .elasticY(true)\r\n        .elasticX(true)  \r\n        .render();\r\n    }\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        console.log('DC JS componentDidUpdate');\r\n        if (prevProps.w === this.props.w &&\r\n            prevProps.h === this.props.h) {\r\n                return;\r\n        }\r\n\r\n        //debugger\r\n        //this.myRefChart.current.render();\r\n        // dc.renderAll(this.myRefChart.current);\r\n        this.theChart.render();\r\n    }\r\n\r\n    render() {\r\n        let classNames = '';\r\n        if (this.props.selected === true) {\r\n            classNames += ' ctrl-selected'\r\n        }\r\n      \r\n        console.log('DC JS', this.props.w);\r\n        return <div style={{width: '100%', height: '100%'}} className={classNames}>\r\n        <div id=\"myDcBarChart\" style={{width: '100%', height: '100%'}} ref={this.myRefChart}/>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default noobControlHoc(DCChart);\r\n//export default DCChart;","import React from 'react';\r\nimport \"../styles/ToolBox.css\";\r\nimport 'react-grid-layout/css/styles.css';\r\n\r\n//import {connect} from 'react-redux';\r\n//import { bindActionCreators } from \"redux\";\r\nimport {toolItemDragged} from '../actions/index';\r\n\r\nimport { useDrag } from 'react-dnd';\r\nimport ShowMessage, {NotifType} from '../helper/notification';\r\n\r\nexport const ToolItemDragTypes = {\r\n    TOOLITEM: 'toolItem'\r\n}\r\n\r\n\r\nlet onDragStart = (e) => {\r\n    console.log(\"onDragStart!\");\r\n    // temporary code: we tell redux that this item started dragging.\r\n    // This code will not be needed once react-grid-layout code has been updated to pass the mouse event in the onDrop function\r\n}\r\n\r\n/* Original function, without using React-dnd\r\nconst toolItem = (props) => {\r\n    let iconClass = `icon ${props.controlType.icon}`\r\n    return <div className=\"toolItem droppable-element\" draggable={true} unselectable=\"on\" \r\n            onDragStart={(e) => props.toolItemDragged(props.controlType)}>\r\n        <i className={iconClass}></i>\r\n        {props.controlType.displayName}\r\n    </div>\r\n}\r\n*/\r\n\r\nconst handleEndDrag = (item, monitor) => {\r\n    if (monitor.didDrop()) {\r\n        return;\r\n    }\r\n\r\n    ShowMessage('Control was not added', \r\n    NotifType.info, \r\n    'Please drop the control into an empty cell, or make sure there is sufficient space for larger controls.')\r\n}\r\n\r\nconst ToolItem = (props) => {\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: {\r\n            type: ToolItemDragTypes.TOOLITEM,\r\n            minW: props.controlType.minW,\r\n            minH: props.controlType.minH,\r\n            toolItemTypeName: props.controlType.name\r\n        },\r\n        end: (item, monitor) => handleEndDrag(item, monitor),\r\n        collect: monitor => ({\r\n          isDragging: !!monitor.isDragging(),\r\n        }),\r\n      })\r\n\r\n    let iconClass = `icon ${props.controlType.icon}`\r\n    return <div className=\"toolItem\" ref={drag} style={{\r\n        backgroundColor: isDragging ? 'lightblue' : '#cacaca',\r\n      }}>\r\n        <i className={iconClass}></i>\r\n        {props.controlType.displayName}\r\n    </div>\r\n}\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return bindActionCreators({ toolItemDragged }, dispatch);\r\n// }\r\n\r\n//export default toolItem;\r\n//export default connect(null, mapDispatchToProps)(toolItem);\r\nexport default ToolItem;","import React from 'react';\r\nimport ToolItem from './toolItem';\r\nimport \"../styles/ToolBox.css\";\r\n\r\n\r\n\r\nexport const toolBoxItems = [\r\n    {\r\n         name: 'section',\r\n         displayName: 'Section',\r\n         icon: 'wpforms',\r\n         category: 'common',\r\n         minW: 12, minH:1,\r\n    },    \r\n//     {\r\n//          name: 'textbox',\r\n//          displayName: 'Textbox',\r\n//          icon: 'text height',\r\n//          category: 'forms'\r\n//     },    \r\n//     {\r\n//          name: 'combo',\r\n//          displayName: 'Combobox',\r\n//          icon: 'caret square down outline',\r\n//          category: 'forms',\r\n//          minW: 3, minH:1,\r\n//     },    \r\n//     {\r\n//          name: 'checkbox',\r\n//          displayName: 'Checkbox',\r\n//          icon: 'check square outline',\r\n//          category: 'forms'\r\n//     },                \r\n    {\r\n         name: 'richtext',\r\n         displayName: 'Rich Text',\r\n         icon: 'paint brush',\r\n         category: 'forms',\r\n         minW: 3, minH:3,\r\n    },                \r\n//     {\r\n//          name: 'numeric',\r\n//          displayName: 'Number',\r\n//          icon: 'sort numeric down',\r\n//          category: 'forms'\r\n//     },                \r\n//     {\r\n//          name: 'user',\r\n//          displayName: 'User',\r\n//          icon: 'user circle outline',\r\n//          category: 'forms'\r\n//     },     \r\n//     {\r\n//           name: 'status',\r\n//           displayName: 'Status',\r\n//           icon: 'circle outline',\r\n//           category: 'forms'\r\n//      },     \r\n     // {\r\n     //      name: 'date',\r\n     //      displayName: 'Date',\r\n     //      icon: 'calendar alternate outline',\r\n     //      category: 'forms'\r\n     // },     \r\n//      {\r\n//           name: 'attachment',\r\n//           displayName: 'Attachments',\r\n//           icon: 'attach',\r\n//           category: 'forms'\r\n//      },     \r\n//      {\r\n//           name: 'history',\r\n//           displayName: 'History',\r\n//           icon: 'history',\r\n//           category: 'forms'\r\n//      },     \r\n     {\r\n         // Should support expressions, like the Target Name, Vendor, Model etc.\r\n       name: 'label',\r\n       displayName: 'Label',\r\n       icon: 'info',\r\n       category: 'common'\r\n    },\r\n//     {\r\n//           // Should provide a configurable URL\r\n//        name: 'image',\r\n//        displayName: 'Image',\r\n//        icon: 'image outline',\r\n//        category: 'common'\r\n//     },\r\n    {\r\n         name: 'barchart',\r\n         displayName: 'Bar Chart',\r\n         icon: 'chart bar',\r\n         category: 'common',\r\n         minW: 4, minH:5,\r\n    },\r\n    {\r\n         name: 'pie',\r\n         displayName: 'Pie Chart',\r\n         icon: 'chart pie',\r\n         category: 'common',\r\n         minW: 4, minH:5,\r\n    },\r\n     {\r\n          name: 'gauge',\r\n          displayName: 'Gauge',\r\n          icon: 'check circle outline',\r\n          category: 'common',\r\n          minW: 2, minH:3,\r\n     },   \r\n    {\r\n         name: 'line',\r\n         displayName: 'Line Chart',\r\n         icon: 'chart line',\r\n         category: 'common',\r\n         minW: 4, minH:5,\r\n    },\r\n    {\r\n         name: 'table',\r\n         displayName: 'Table',\r\n         icon: 'table',\r\n         category: 'common',\r\n         minW: 5, minH:1,\r\n    },\r\n    {\r\n         name: 'frame',\r\n         displayName: 'Frame',\r\n         icon: 'window maximize outline',\r\n         category: 'common',\r\n         minW: 3, minH:4,\r\n    },\r\n   {\r\n     // Should provide a configurable URL\r\n     name: 'imageMap',\r\n     displayName: 'Image Map',\r\n     icon: 'map pin',\r\n     category: 'common',\r\n     minW: 3, minH:3,\r\n   },\r\n//    {\r\n//      // E.g. permits for a page\r\n//      name: 'childtemplate',\r\n//      displayName: 'Child Template',\r\n//      icon: 'clone outline',\r\n//      category: 'form'\r\n//    },\r\n   {\r\n     name: 'pagebreak',\r\n     displayName: 'Page Break',\r\n     icon: 'window minimize',\r\n     category: 'common',\r\n     minW: 12, minH:1,\r\n   },\r\n//    {\r\n//      name: 'dcbar',\r\n//      displayName: 'DC JS Bar',\r\n//      icon: 'bar',\r\n//      category: 'common',\r\n//      minW: 3, minH:3,\r\n//    },   \r\n];\r\n\r\n\r\nconst drawToolItems = () => {\r\n    return toolBoxItems.map( (toolItem) => {\r\n        return <ToolItem controlType={toolItem} key={toolItem.name}/>;\r\n    })\r\n}\r\n\r\nconst ToolBox = ({containerWidth}) => {\r\n     let classNames = 'toolBox';     \r\n     if (containerWidth < 200) {\r\n          classNames += ' toolBox-1row'\r\n     }\r\n     else {\r\n          classNames += ' toolBox-2rows'\r\n     }\r\n     console.log('toolBox containerWidth', containerWidth);\r\n     return <div className={classNames}>\r\n          {drawToolItems()}\r\n     </div>\r\n}\r\n\r\nexport const getToolItemByName = (name) => toolBoxItems.find(tool => {\r\n     return tool.name === name\r\n});\r\n\r\nexport default ToolBox;","import React, { useContext } from \"react\";\r\nimport { FormContext } from \"./Form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\nimport { Form as SemanticForm, Popup } from \"semantic-ui-react\";\r\n\r\nfunction FormText({ name, rules, label, numeric, toolTip, small, ...rest }) {\r\n  const { register, setValue, unregister } = useContext(FormContext);\r\n  const styles = small ? {paddingTop: '6px', paddingBottom: '6px'} : {};\r\n\r\n  return (<SemanticForm.Field>\r\n            {label && <label>\r\n              <span key={'label-'+name}>{label}</span>\r\n              &nbsp;\r\n              {!!toolTip && <Popup \r\n                  inverted\r\n                  basic\r\n                  size='tiny' style={{opacity: '0.8'}} \r\n                  content={toolTip}\r\n                  trigger={<div style={{display: 'inline-block', color: 'gray'}}>\r\n                  <i className=\"ui icon info circle\"/>\r\n                  </div>} />\r\n              }\r\n            </label>}\r\n            <RHFInput\r\n                as={<input  \r\n                      key={'text-'+name} \r\n                      type={!!numeric ? 'number':'text'}\r\n                      //className=\"ui small\" \r\n                      style={styles}\r\n                      {...rest}>                        \r\n                      </input>\r\n                }\r\n\r\n            //defaultValue=\"\"\r\n            name={name}      \r\n            register={register}\r\n            unregister={unregister}\r\n            setValue={setValue}\r\n            rules={rules}\r\n            />\r\n        </SemanticForm.Field>\r\n  );\r\n}\r\n\r\nexport default FormText;\r\n","import React, { useContext } from \"react\";\r\nimport { FormContext } from \"./Form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\nimport { Form as SemanticForm, Popup } from \"semantic-ui-react\";\r\n\r\nfunction FormCheckbox({ name, label, toolTip, ...rest }) {\r\n  const { register, setValue, unregister } = useContext(FormContext);\r\n\r\n  function handleChange([, props]) {\r\n    return { checked: props.checked };\r\n  }\r\n\r\n  return (<SemanticForm.Field>\r\n    {label && <label>\r\n              <span key={'label-'+name}>{label}</span>\r\n              &nbsp;\r\n              {!!toolTip && <Popup \r\n                  inverted\r\n                  basic\r\n                  size='tiny' style={{opacity: '0.8'}} \r\n                  content={toolTip}\r\n                  trigger={<div style={{display: 'inline-block', color: 'gray'}}>\r\n                  <i className=\"ui icon info circle\"/>\r\n                  </div>} />\r\n              }\r\n    </label>}    \r\n    <RHFInput\r\n      as={<SemanticForm.Checkbox {...rest} />}\r\n      name={name}\r\n      //value={name}\r\n      type=\"checkbox\"\r\n      register={register}\r\n      unregister={unregister}\r\n      setValue={setValue}\r\n      onChangeEvent={handleChange}\r\n    />\r\n    </SemanticForm.Field>\r\n  );\r\n}\r\n\r\nexport default FormCheckbox;\r\n","import React, { useContext } from \"react\";\r\nimport { FormContext } from \"./Form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\nimport { Form as SemanticForm } from \"semantic-ui-react\";\r\n\r\nfunction FormDropDown({ name, label, multiple, isRequired, fluid,...rest }) {\r\n  const { register, setValue, unregister } = useContext(FormContext);\r\n\r\n  function handleChange([, props]) {\r\n    return { value: props.value};\r\n  }\r\n\r\n  // TODO: If multiple is set, there is a console log that says value must be an array instead\r\n  // of undefined. Check if the problem still exists after getting rid of RHF.\r\n  let defaultValue = multiple ? [] : null;\r\n\r\n  return (<SemanticForm.Field>\r\n        <label key={'label-'+name}>{label}</label>\r\n        <RHFInput\r\n        as={<SemanticForm.Dropdown \r\n            key={name}\r\n            fluid={fluid}\r\n            multiple={multiple}\r\n            search\r\n            selection             \r\n            style={{fontWeight:'normal', color: 'black', right: '0', left: 'auto'}}\r\n            {...rest} />}\r\n        name={name}\r\n        register={register}\r\n        unregister={unregister}\r\n        setValue={setValue}\r\n        rules={{required: isRequired }}\r\n        onChangeEvent={handleChange}\r\n        />\r\n    </SemanticForm.Field>\r\n  );\r\n}\r\n\r\nexport default FormDropDown;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { FormContext } from \"./Form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\nimport { Form as SemanticForm, Popup } from \"semantic-ui-react\";\r\n\r\nconst fieldWrapperStyle = {\r\n    display: 'inline-block',\r\n};\r\n\r\nfunction FormIconSelector({ name, rules, label, intialicon, ...rest }) {\r\n  const { register, setValue, unregister } = useContext(FormContext);\r\n  const [myState, setMyState] = useState({\r\n    currVal: intialicon\r\n  });\r\n\r\n  console.log('FormIconSelector render', intialicon);\r\n\r\n  return (<SemanticForm.Field>\r\n            <label key={'label-'+name}>\r\n                <span>{label}</span>\r\n                &nbsp;\r\n                <Popup \r\n                    inverted\r\n                    basic\r\n                    size='tiny' style={{opacity: '0.8'}} \r\n                    content='Semantic UI Icon, e.g. \"home\", \"warning\"' \r\n                    trigger={<div style={{display: 'inline-block', color: 'gray'}}>\r\n                    <i className=\"ui icon info circle\"/>\r\n                    </div>} />\r\n            </label>\r\n            <div className=\"ui icon input fluid\">                \r\n            <RHFInput\r\n                as={<input  key={name} \r\n                    style={fieldWrapperStyle}\r\n                    onInput = {(e) => {\r\n                        console.log('FormIconSelector onInput!', );\r\n                        setMyState({\r\n                            currVal: e.target.value\r\n                        })\r\n                    }}\r\n                    {...rest}>                                \r\n                </input>                        \r\n                }\r\n\r\n            defaultValue=\"\"\r\n            name={name}      \r\n            register={register}\r\n            unregister={unregister}\r\n            setValue={setValue}\r\n            rules={rules}\r\n            />\r\n            <i className={`ui icon large ${myState.currVal}`}/>\r\n            </div>\r\n        </SemanticForm.Field>\r\n  );\r\n}\r\n\r\nexport default FormIconSelector;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { FormContext } from \"./Form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\nimport { Form as SemanticForm, Popup } from \"semantic-ui-react\";\r\n\r\nconst fieldWrapperStyle = {\r\n    display: 'inline-block',\r\n};\r\n\r\nfunction FormColorSelector({ name, rules, label, intialcolor, ...rest }) {\r\n  const { register, setValue, unregister } = useContext(FormContext);\r\n  const [myState, setMyState] = useState({\r\n    currVal: intialcolor\r\n  });\r\n\r\n  console.log('FormColorSelector render', intialcolor);\r\n\r\n  return (<SemanticForm.Field>\r\n            <label key={'label-'+name}>\r\n                <span>{label}</span>\r\n                &nbsp;\r\n                <Popup \r\n                    inverted\r\n                    basic\r\n                    size='tiny' style={{opacity: '0.8'}} \r\n                    content='CSS color, e.g. \"red\", \"#abcdef\"' \r\n                    trigger={<div style={{display: 'inline-block', color: 'gray'}}>\r\n                    <i className=\"ui icon info circle\"/>\r\n                    </div>} />\r\n            </label>\r\n            <div className=\"ui icon input fluid\">\r\n            <RHFInput\r\n                as={<input  key={name} \r\n                    // name={name}\r\n                    style={fieldWrapperStyle}\r\n                    onInput = {(e) => {\r\n                        console.log('FormIconSelector onInput!', );\r\n                        setMyState({\r\n                            currVal: e.target.value\r\n                        })\r\n                    }}\r\n                    {...rest}>                                \r\n                </input>                        \r\n                }\r\n\r\n            defaultValue=\"\"\r\n            name={name}      \r\n            register={register}\r\n            unregister={unregister}\r\n            setValue={setValue}\r\n            rules={rules}\r\n            />\r\n            <i className={`ui icon large square`} style={{color: myState.currVal}}/>\r\n            </div>\r\n        </SemanticForm.Field>\r\n  );\r\n}\r\n\r\nexport default FormColorSelector;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { FormContext } from \"./Form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\nimport { Form as SemanticForm } from \"semantic-ui-react\";\r\nimport './FormRadio.css';\r\n\r\nfunction FormRadio({ name, initialSel, radioGroupContents, ...rest }) {\r\n  const { register, setValue, unregister } = useContext(FormContext);\r\n\r\n  function handleChange(args, {value}) {\r\n    setMyState({value});\r\n    setValue(name, value);\r\n  }\r\n\r\n  const [myState, setMyState] = useState({\r\n    value: initialSel,\r\n  });\r\n\r\n  const renderRadioBtn = (radio) => {\r\n    return <SemanticForm.Radio \r\n    key={'radio_' + radio.value}\r\n    label={radio.label}\r\n    name={radio.name} // radio group name\r\n    value={radio.value}\r\n    checked={myState.value === radio.value}\r\n    onChange={handleChange} />\r\n  }\r\n\r\n  return (\r\n    <RHFInput\r\n      as={<div className=\"radioGroupContainer\">\r\n          {radioGroupContents.map(radio => renderRadioBtn(radio))}\r\n        </div>\r\n      }\r\n      name={name}\r\n      register={register}\r\n      unregister={unregister}\r\n      setValue={setValue}\r\n      onChangeEvent={handleChange}\r\n    />\r\n  );\r\n}\r\n\r\nexport default FormRadio;\r\n","import React, {useState, useContext} from 'react';\r\nimport '../controls/datepicker.css';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { Label, Dropdown} from \"semantic-ui-react\";\r\nimport { FormContext } from \"./Form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\n\r\nexport const dateRangeDropdownOptions = [\r\n    { key: 'Latest value only', text: 'Latest value only', value: 'Latest value only', disabled: true},\r\n    { key: 'Last 1 day', text: 'Last 1 day', value: 'Last 1 day', disabled: true },\r\n    { key: 'Last 7 days', text: 'Last 7 days', value: 'Last 7 days', disabled: true },\r\n    { key: 'Last 30 days', text: 'Last 30 days', value: 'Last 30 days', disabled: true },\r\n    { key: 'Custom Range', text: 'Custom Range', value: 'CustomRange' },\r\n];\r\n\r\nconst FormDateRange = ({ name, label, initialValue, alwaysCustomRange, showMonthYearPicker, dateFormat,...rest }) => {\r\n    //const [startDate, setStartDate] = useState(new Date());\r\n    // No need to set initial values\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [disableDatePicker, setDisableDatePicker] = useState(!alwaysCustomRange);\r\n    const { register, setValue, unregister, errors } = useContext(FormContext);\r\n    let effectiveFormat = dateFormat ? dateFormat : \"yyyy / MMM / dd\";\r\n\r\n    function handleChangeStart([date, evt]) {\r\n        setStartDate(date);\r\n        return {\r\n            value: date\r\n        }\r\n    }\r\n\r\n    function handleChangeEnd([date, evt]) {\r\n        setEndDate(date);\r\n        return {\r\n            value: date\r\n        }\r\n    }\r\n\r\n    function handleChangeValue([, props]) {\r\n        if (props.value === 'CustomRange') {\r\n            setDisableDatePicker(false);\r\n        }\r\n        else {\r\n            setStartDate(null);\r\n            setEndDate(null);\r\n        }\r\n\r\n        return { value: props.value};\r\n    }\r\n\r\n    const renderDropdown = () => {\r\n        if (alwaysCustomRange) {\r\n            return <div style={{display: \"none\"}}></div>\r\n        }\r\n\r\n        return <Dropdown \r\n            fluid                 \r\n            selection   \r\n            options={dateRangeDropdownOptions} \r\n            defaultValue={initialValue ? initialValue : dateRangeDropdownOptions[0].value}         \r\n        />;\r\n    }\r\n\r\n    return <>\r\n                {label && <div className=\"dateLabel\">{label}</div>}\r\n\r\n                <RHFInput\r\n                    as={renderDropdown()}\r\n\r\n                name={name+\".value\"}\r\n                //value={name}\r\n                //type=\"daterange\"\r\n                register={register}\r\n                unregister={unregister}\r\n                setValue={setValue}\r\n                onChangeEvent={handleChangeValue}\r\n                />\r\n                \r\n                <div className=\"dateLabel\">Start:</div>\r\n                <div className=\"datepickerWrapper\">\r\n                <RHFInput\r\n                    as={<DatePicker\r\n                    selected={startDate}\r\n                    //onChange={date => setStartDate(date)}\r\n                    //onChange={args => {debugger}}\r\n                    selectsStart\r\n                    startDate={startDate}\r\n                    endDate={endDate}\r\n                    disabled={disableDatePicker}        \r\n                    showMonthYearPicker={showMonthYearPicker}            \r\n                    dateFormat={effectiveFormat}\r\n                    />}\r\n\r\n                name={name+\".start\"}\r\n                //value={name}\r\n                //type=\"daterange\"\r\n                register={register}\r\n                unregister={unregister}\r\n                setValue={setValue}\r\n                onChangeEvent={handleChangeStart}\r\n                />\r\n            </div>\r\n            <div className=\"dateLabel\">End:</div>\r\n            <div className=\"datepickerWrapper datepickerWrapperEnd\">\r\n            <RHFInput\r\n            as={\r\n                <DatePicker\r\n                selected={endDate}\r\n                //onChange={date => setEndDate(date)}\r\n                selectsEnd\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                minDate={startDate}\r\n                disabled={disableDatePicker}\r\n                showMonthYearPicker={showMonthYearPicker}            \r\n                dateFormat={effectiveFormat}\r\n                />}\r\n\r\n            name={name + \".end\"}\r\n            //value={name}\r\n            //type=\"daterange\"\r\n            register={register}\r\n            unregister={unregister}\r\n            setValue={setValue}\r\n            onChangeEvent={handleChangeEnd}\r\n\r\n            />\r\n        </div>\r\n        </>\r\n}\r\nexport default FormDateRange\r\n","import React, {useState, useContext} from 'react';\r\nimport '../controls/datepicker.css';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { Label, Dropdown} from \"semantic-ui-react\";\r\nimport { FormContext } from \"./Form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\n\r\nexport const conditionOptions = [\r\n    { key: 'Equal', text: '=', value: 'Equal' },\r\n    { key: 'Greater', text: '>', value: 'Greater', disabled: true},\r\n    { key: 'LessThan', text: '<', value: 'LessThan', disabled: true },\r\n    { key: 'In', text: 'In', value: 'In', disabled: true },\r\n    { key: 'NotIn', text: 'Not In', value: 'NotIn', disabled: true },\r\n];\r\n\r\nconst FormFilterInput = ({ name, label, initialValue, ...rest }) => {\r\n    //const [startDate, setStartDate] = useState(new Date());\r\n    // No need to set initial values\r\n    const { register, setValue, unregister, errors } = useContext(FormContext);\r\n\r\n    function handleChangeValue([, props]) {\r\n        return { value: props.value};\r\n      }\r\n\r\n    return <>\r\n                <div className=\"dateLabel\">Parameter:</div>\r\n\r\n                <RHFInput\r\n                    as={<input  \r\n                        key={name} \r\n                        className=\"ui small\" \r\n                        defaultValue={name}\r\n                        readOnly\r\n                        {...rest}>                        \r\n                        </input>\r\n                    }\r\n\r\n                //name={name}\r\n                register={register}\r\n                unregister={unregister}\r\n                setValue={setValue}\r\n                />\r\n                \r\n                <div className=\"dateLabel\">Condition:</div>\r\n                <div className=\"datepickerWrapper\">\r\n                <RHFInput\r\n                    as={<Dropdown \r\n                        fluid                 \r\n                        selection   \r\n                        options={conditionOptions} \r\n                        defaultValue={initialValue ? initialValue : conditionOptions[0].value}         \r\n                     />}\r\n\r\n                name={name+\"Condition\"}\r\n                register={register}\r\n                unregister={unregister}\r\n                setValue={setValue}\r\n                />\r\n            </div>\r\n            <div className=\"dateLabel\">Value:</div>\r\n            <div className=\"datepickerWrapper datepickerWrapperEnd\">\r\n            <RHFInput\r\n            as={<input  \r\n                    key={name} \r\n                    className=\"ui small\" \r\n                    {...rest}>                        \r\n                </input>\r\n            }\r\n\r\n            defaultValue=\"\"\r\n            name={name}\r\n            register={register}\r\n            unregister={unregister}\r\n            setValue={setValue}\r\n\r\n            />\r\n        </div>\r\n        </>\r\n}\r\nexport default FormFilterInput;\r\n","\r\nimport React, {useState, useContext} from 'react';\r\nimport '../controls/datepicker.css';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport DatePicker from 'react-datepicker';\r\nimport { Label, Dropdown} from \"semantic-ui-react\";\r\nimport { FormContext } from \"./Form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\nimport ShowMessage, { NotifType } from '../helper/notification';\r\n\r\nexport const conditionOptions = [\r\n    { key: 'Equal', text: '=', value: 'Equal' },\r\n    { key: 'Greater', text: '>', value: 'Greater', disabled: true},\r\n    { key: 'LessThan', text: '<', value: 'LessThan', disabled: true },\r\n    { key: 'In', text: 'In', value: 'In', disabled: true },\r\n    { key: 'NotIn', text: 'Not In', value: 'NotIn', disabled: true },\r\n];\r\n\r\nconst handleChangeName = (e, name) => {\r\n    return {\r\n        //[name+\".name\"]: e[0].target.value\r\n        value: e[0].target.value\r\n    }\r\n}\r\n\r\nconst FormImageCoord = ({ name, x, y, color, ...rest }) => {\r\n    //const [startDate, setStartDate] = useState(new Date());\r\n    // No need to set initial values\r\n    const { register, setValue, unregister, errors } = useContext(FormContext);\r\n    const [currColor, setCurrColor] = useState(color);\r\n\r\n    function handleChangeValue([, props]) {\r\n        return { value: props.value};\r\n      }\r\n\r\n    const handleChangeColor = ([e]) => {\r\n        setCurrColor(e.target.value);\r\n        return { value: e.target.value};\r\n    }\r\n\r\n    return <>\r\n                <div className=\"dateLabel\">Name:</div>\r\n                <RHFInput\r\n                    as={<input  \r\n                        key={name} \r\n                        className=\"ui small\" \r\n                        //defaultValue={name}\r\n                        {...rest}>\r\n                        </input>\r\n                    }\r\n\r\n                name={name+\".name\"}\r\n                register={register}\r\n                unregister={unregister}\r\n                setValue={setValue}\r\n                onChangeEvent={(e) => handleChangeName(e, name)}\r\n                />\r\n                \r\n                <div className=\"dateLabel\">X:</div>\r\n                <RHFInput\r\n                    as={<input  \r\n                        key={name} \r\n                        className=\"ui small\" \r\n                        //defaultValue={x}\r\n                        readOnly\r\n                        {...rest}>\r\n                        </input>\r\n                    }\r\n\r\n                name={name + \".x\"}\r\n                register={register}\r\n                unregister={unregister}\r\n                setValue={setValue}\r\n                />\r\n                \r\n                <div className=\"dateLabel\">Y:</div>\r\n                <RHFInput\r\n                    as={<input  \r\n                        key={name} \r\n                        className=\"ui small\" \r\n                        //defaultValue={y}\r\n                        readOnly\r\n                        {...rest}>\r\n                        </input>\r\n                    }\r\n\r\n                name={name + \".y\"}\r\n                register={register}\r\n                unregister={unregister}\r\n                setValue={setValue}\r\n                />\r\n\r\n                <div className=\"dateLabel\">Color:</div>\r\n                <div className=\"ui icon input fluid\">\r\n                <RHFInput\r\n                    as={<input  \r\n                        key={name} \r\n                        className=\"ui small\" \r\n                        //defaultValue={color}\r\n                        // onInput = {(e) => {\r\n                        //     setCurrColor(e.target.value);\r\n                        // }}\r\n                        {...rest}>\r\n                        </input>\r\n                    }\r\n\r\n                name={name + \".color\"}\r\n                register={register}\r\n                unregister={unregister}\r\n                setValue={setValue}\r\n                onChangeEvent={(e) => handleChangeColor(e, name)}\r\n                />\r\n                <i className={`ui icon large square`} style={{color: currColor}}/>\r\n                </div>\r\n\r\n                <i className=\"ui icon trash alternate btnImageFormCoordDelete\" onClick={e => ShowMessage(\"Sorry, not yet implemented!\", NotifType.danger)}/>\r\n\r\n        </>\r\n}\r\nexport default FormImageCoord;\r\n","import React, { useContext, useState, useEffect, useRef } from \"react\";\r\nimport { FormContext } from \"./Form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\nimport { Form as SemanticForm, Popup } from \"semantic-ui-react\";\r\nimport 'draft-js/dist/Draft.css';\r\nimport { Editor, EditorState, RichUtils, ContentState, convertToRaw, convertFromRaw } from 'draft-js';\r\nimport './FormRichText.css';\r\n\r\n\r\nconst styleMap = {\r\n    CODE: {\r\n      backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n      fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n      fontSize: 16,\r\n      padding: 2,\r\n    },\r\n  };\r\n\r\n  function getBlockStyle(block) {\r\n    switch (block.getType()) {\r\n      case 'blockquote': return 'RichEditor-blockquote';\r\n      default: return null;\r\n    }\r\n  }\r\n\r\n// class RichText4Form extends React.Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         //this.state = {editorState: EditorState.createEmpty()};\r\n//         this.state = {editorState: EditorState.createWithContent(ContentState.createFromText('Hello'))};\r\n//         //let html = '<div><h5>I am an H5 Tag</h5><h4>I am an H4 Tag</h4><p><a href=\"www.google.com\">www.google.com</a></p></div>';\r\n//         //let html = '<p>First sentence</p><p>Second sentence</p><a href=\"www.google.com\">www.google.com</a></p>';\r\n//         let html = '<table><thead><tr><td><b><i>Hello</i></b></td><td>World</td></tr></thead></table>';\r\n//         let options = {\r\n//           entityStyleFn: entity => {\r\n//             const entityType = entity.get('type').toLowerCase();\r\n//             if (entityType === 'link') {\r\n//               const data = entity.getData();\r\n//               return {\r\n//                 element: 'a',\r\n//                 attributes: {\r\n//                   target: data.targetOption,\r\n//                   href: data.url\r\n//                 }\r\n//               };\r\n//             }\r\n//           }\r\n//         }\r\n//         //this.state = {editorState: EditorState.createWithContent(stateFromHTML(html, options))};\r\n\r\n//         this.focus = () => this.refs.editor.focus();\r\n//         this.onChange = (editorState) => {\r\n//             debugger\r\n//             this.setState({editorState});\r\n//         }\r\n\r\n//         this.handleKeyCommand = (command) => this._handleKeyCommand(command);\r\n//         this.onTab = (e) => this._onTab(e);\r\n//         this.toggleBlockType = (type) => this._toggleBlockType(type);\r\n//         this.toggleInlineStyle = (style) => this._toggleInlineStyle(style);\r\n//     }\r\n\r\n//     _handleKeyCommand(command) {\r\n//         const {editorState} = this.state;\r\n//         const newState = RichUtils.handleKeyCommand(editorState, command);\r\n//         if (newState) {\r\n//           this.onChange(newState);\r\n//           return true;\r\n//         }\r\n//         return false;\r\n//       }\r\n\r\n//       _onTab(e) {\r\n//         const maxDepth = 4;\r\n//         this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\r\n//       }\r\n\r\n//       _toggleBlockType(blockType) {\r\n//         this.onChange(\r\n//           RichUtils.toggleBlockType(\r\n//             this.state.editorState,\r\n//             blockType\r\n//           )\r\n//         );\r\n//       }\r\n\r\n//       _toggleInlineStyle(inlineStyle) {\r\n//         this.onChange(\r\n//           RichUtils.toggleInlineStyle(\r\n//             this.state.editorState,\r\n//             inlineStyle\r\n//           )\r\n//         );\r\n//       }\r\n\r\n//     //https://github.com/jpuri/react-draft-wysiwyg/issues/4\r\n//     //https://codepen.io/Kiwka/pen/YNYvyG\r\n//     render() {\r\n//         const {editorState} = this.state;\r\n\r\n//         // If the user changes block type before entering any text, we can\r\n//         // either style the placeholder or hide it. Let's just hide it now.\r\n//         let className = 'RichEditor-editor';\r\n//         var contentState = editorState.getCurrentContent();\r\n//         if (!contentState.hasText()) {\r\n//           if (contentState.getBlockMap().first().getType() !== 'unstyled') {\r\n//             className += ' RichEditor-hidePlaceholder';\r\n//           }\r\n//         }\r\n\r\n//         return (<div className=\"RichEditor-root\">\r\n//                 <div className=\"toolBarStrip\">\r\n//                     {/* Inline Controls: Bold, Italic etc */}\r\n//                     <InlineStyleControls\r\n//                     editorState={editorState}\r\n//                     onToggle={this.toggleInlineStyle}\r\n//                     />\r\n//                     {/* Block Controls: H1, H2, BlockQuote, Code etc */}\r\n//                     <BlockStyleControls\r\n//                     editorState={editorState}\r\n//                     onToggle={this.toggleBlockType}\r\n//                     />\r\n//                 </div>\r\n\r\n//                 <div className={className} onClick={this.focus}>\r\n//                     <Editor\r\n//                     blockStyleFn={getBlockStyle}\r\n//                     customStyleMap={styleMap}\r\n//                     editorState={editorState}\r\n//                     handleKeyCommand={this.handleKeyCommand}\r\n//                     onChange={this.onChange}\r\n//                     onTab={this.onTab}\r\n//                     ref=\"editor\"\r\n//                     spellCheck={true}\r\n//                     backgroundColor={'red'}\r\n//                     />\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }    \r\n// }\r\n\r\n// START: For the toolbar\r\nclass StyleButton extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.onToggle = (e) => {\r\n        e.preventDefault();\r\n        this.props.onToggle(this.props.style);\r\n      };\r\n    }\r\n\r\n    render() {\r\n      let className = 'RichEditor-styleButton';\r\n      if (this.props.active) {\r\n        className += ' RichEditor-activeButton';\r\n      }\r\n\r\n      return (\r\n        <span className={className} onMouseDown={this.onToggle}>\r\n          {this.props.label}\r\n        </span>\r\n      );\r\n    }\r\n}\r\n\r\nconst BLOCK_TYPES = [\r\n  {label: 'H1', style: 'header-one'},\r\n  {label: 'H2', style: 'header-two'},\r\n  {label: 'H3', style: 'header-three'},\r\n  {label: 'Blockquote', style: 'blockquote'},\r\n  {label: 'UL', style: 'unordered-list-item'},\r\n  {label: 'OL', style: 'ordered-list-item'},\r\n  {label: 'Code', style: 'code-block'},\r\n];\r\n\r\nconst BlockStyleControls = (props) => {\r\n  const {editorState} = props;\r\n  const selection = editorState.getSelection();\r\n  const blockType = editorState\r\n    .getCurrentContent()\r\n    .getBlockForKey(selection.getStartKey())\r\n    .getType();\r\n\r\n  return (\r\n    <div className=\"RichEditor-controls\">\r\n      {BLOCK_TYPES.map((type) =>\r\n        <StyleButton\r\n          key={type.label}\r\n          active={type.style === blockType}\r\n          label={type.label}\r\n          onToggle={props.onToggle}\r\n          style={type.style}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nvar INLINE_STYLES = [\r\n  {label: 'Bold', style: 'BOLD'},\r\n  {label: 'Italic', style: 'ITALIC'},\r\n  {label: 'Underline', style: 'UNDERLINE'},\r\n  {label: 'Monospace', style: 'CODE'},\r\n];\r\n\r\nconst InlineStyleControls = (props) => {\r\n  var currentStyle = props.editorState.getCurrentInlineStyle();\r\n  return (\r\n    <div className=\"RichEditor-controls\">\r\n      {INLINE_STYLES.map(type =>\r\n        <StyleButton\r\n          key={type.label}\r\n          active={currentStyle.has(type.style)}\r\n          label={type.label}\r\n          onToggle={props.onToggle}\r\n          style={type.style}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n// END - For the toolbar\r\n\r\n\r\n// === This is the main control ===\r\n//rules: for isRequired\r\nfunction FormRichText({ name, rules, label, toolTip, initialData, controlId, ...rest }) {\r\n  const { register, setValue, unregister } = useContext(FormContext);\r\n  const refEditor = useRef(null);\r\n\r\n  const getInitialState = () => {\r\n    if (initialData) {\r\n      return EditorState.createWithContent(convertFromRaw(initialData));\r\n    }\r\n    else {\r\n      return EditorState.createWithContent(ContentState.createFromText('Hello\\r\\nworld')); // to test if it can handle new line\r\n    }\r\n  }\r\n\r\n  let initialState = getInitialState();\r\n  // if (initialData) {\r\n  //     initialState = EditorState.createWithContent(convertFromRaw(initialData));\r\n  // }\r\n  // else {\r\n  //     //initialState = EditorState.createEmpty();\r\n  //     initialState = EditorState.createWithContent(ContentState.createFromText('Hello\\r\\nworld')); // to test if it can handle new line\r\n  // }\r\n  const [editorState, setEditorState] = useState(initialState);\r\n\r\n\r\n\r\n  const handleChange = ([e]) => {\r\n      const contentState = editorState.getCurrentContent();\r\n      const rawContent = convertToRaw(contentState);\r\n      setEditorState(e);\r\n      return {\r\n          value: rawContent\r\n      };\r\n  }\r\n\r\n  const onChange = (currEditorState) => {\r\n    setEditorState(currEditorState);\r\n  }\r\n\r\n  const _toggleInlineStyle = (inlineStyle) => {\r\n    onChange(\r\n      RichUtils.toggleInlineStyle(\r\n        editorState,\r\n        inlineStyle\r\n      )\r\n    );\r\n  }\r\n\r\n  const _handleKeyCommand = (command) => {\r\n    const newState = RichUtils.handleKeyCommand(editorState, command);\r\n    if (newState) {\r\n      onChange(newState);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const _onTab = (e) => {\r\n    const maxDepth = 4;\r\n    onChange(RichUtils.onTab(e, editorState, maxDepth));\r\n  }\r\n\r\n  const _toggleBlockType = (blockType) => {\r\n    onChange(\r\n      RichUtils.toggleBlockType(\r\n        editorState,\r\n        blockType\r\n      )\r\n    );\r\n  }\r\n\r\n  const focusHandler = () => {\r\n    if (refEditor) {\r\n      refEditor.current.focus();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('FormRichText id changed', controlId);\r\n    setEditorState(getInitialState());\r\n  }, [controlId]);\r\n\r\n  let className = 'RichEditor-editor';\r\n  var contentState = editorState.getCurrentContent();\r\n  if (!contentState.hasText()) {\r\n    if (contentState.getBlockMap().first().getType() !== 'unstyled') {\r\n      className += ' RichEditor-hidePlaceholder';\r\n    }\r\n  }\r\n\r\n  console.log('FormRichText', name, initialData);\r\n  return (<SemanticForm.Field>\r\n      {label && <label>\r\n          <span key={'label-'+name}>{label}</span>\r\n          &nbsp;\r\n          {!!toolTip && <Popup \r\n              inverted\r\n              basic\r\n              size='tiny' style={{opacity: '0.8'}} \r\n              content={toolTip}\r\n              trigger={<div style={{display: 'inline-block', color: 'gray'}}>\r\n              <i className=\"ui icon info circle\"/>\r\n              </div>} />\r\n          }\r\n      </label>}\r\n      <div className=\"RichEditor-root\">\r\n        <div className=\"toolBarStrip\">\r\n          {/* Inline Controls: Bold, Italic etc */}\r\n          <InlineStyleControls\r\n          editorState={editorState}\r\n          onToggle={_toggleInlineStyle}\r\n          />\r\n          {/* Block Controls: H1, H2, BlockQuote, Code etc */}\r\n          <BlockStyleControls\r\n          editorState={editorState}\r\n          onToggle={_toggleBlockType}\r\n          />\r\n        </div>\r\n      \r\n      <div className={className} onClick={focusHandler}>\r\n        <RHFInput\r\n            as={<Editor  \r\n                    key={name} \r\n                    editorState={editorState}\r\n                    ref={refEditor}\r\n\r\n                    blockStyleFn={getBlockStyle}\r\n                    customStyleMap={styleMap}\r\n                    handleKeyCommand={_handleKeyCommand}\r\n                    onTab={_onTab}\r\n\r\n                    {...rest}>                        \r\n                    </Editor>\r\n            }\r\n\r\n        defaultValue=\"\"\r\n        name={name}      \r\n        register={register}\r\n        unregister={unregister}\r\n        setValue={setValue}\r\n        rules={rules}\r\n        onChangeEvent={handleChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  </SemanticForm.Field>\r\n  );\r\n}\r\n\r\nexport default FormRichText;","import React, {useState, useContext, useEffect} from 'react';\r\nimport { FormContext, FormTreeDropDown, Text} from \"./Form\";\r\nimport TreeSelect, { SHOW_PARENT } from 'rc-tree-select';\r\nimport {Button, Popup, Form as SemanticForm, Input} from \"semantic-ui-react\";\r\nimport './formFilterDyanamicInput.css';\r\nimport 'rc-tree-select/assets/index.css';\r\nimport './FormTreeDropDown.css';\r\nimport {uuidv4} from '../helper/util';\r\nimport {ShowMessage, NotifType} from '../helper/notification';\r\n\r\n// Allows the user to dynamically add filters by clicking \"Add\" button.\r\n// Design: Basically just reuse existing FormComponents. We just manage them here.\r\n\r\n// Similar to FormFilterInput except that the first filtered field is a dropdown instead of a textbox\r\n// And we also remove the Condition combobox. Assume that the condition is always \"Equals\"\r\n\r\nconst FormFilterDynamicInput = ({ name, label, initialValue, toolTip, filterFieldOptions, initialFilters, parentId, ...rest }) => {\r\n    const { register, setValue, unregister, errors } = useContext(FormContext);\r\n    const [filters, setFilters] = useState(initialFilters || {});\r\n    const [currParentId, setCurrParentId] = useState(parentId);\r\n\r\n    function handleChangeValue([, props]) {\r\n        return { value: props.value};\r\n    }\r\n\r\n    const addParameter = () => {\r\n        setFilters({\r\n            ...filters,\r\n            [uuidv4()]: {\r\n                filterName: null,\r\n                filterValue: null\r\n            }\r\n        });\r\n    }\r\n\r\n    const renderFilters = () => {\r\n        //console.log(\"renderFilters\", filters, 'initialFilters:', initialFilters);\r\n        // filterToUse+parentId: bug fix for issue where the fields are blank when selecting one gauge to another gauge\r\n        // cause: useState() is only called/effective in the first render. \r\n        // filters state is still holding the old value. Current latest value is in initialFilters\r\n        // But we also cannot use initialFilters all the time, because the UI will not update if \"Add Filter\" is clicked\r\n        // Fix: use initialFilters if it is the first render. Use filters in the succedding renders.\r\n        let filterToUse = currParentId === parentId ? filters : initialFilters;\r\n        let retList = [];\r\n        for (let prop in filterToUse) {\r\n            retList.push(<div className=\"dynamicFilterRow\" key={`dynamicFilterRow-${prop}`}>\r\n            <FormTreeDropDown\r\n                name={`${name}.${prop}.filterName`}\r\n                treeData={filterFieldOptions}\r\n                isRequired={false}\r\n            />\r\n            <Text small\r\n                name={`${name}.${prop}.filterValue`}\r\n            />\r\n            <i className=\"ui icon trash alternate btnImageFormCoordDelete\" onClick={e => ShowMessage(\"Sorry, not yet implemented!\", NotifType.danger)}/>\r\n        </div>);\r\n        }\r\n\r\n        return retList;\r\n    }\r\n\r\n    //console.log(\"FormFilterDynamicInput, render\", initialFilters);\r\n\r\n    useEffect(() => {\r\n        setFilters(initialFilters || {});\r\n        setCurrParentId(parentId);\r\n    }, [initialFilters, parentId]);\r\n\r\n    return <SemanticForm.Field>\r\n        {label && <label>\r\n                    <span key={'label-'+name}>{label}</span>\r\n                    &nbsp;\r\n                    {!!toolTip && <Popup \r\n                        inverted\r\n                        basic\r\n                        size='tiny' style={{opacity: '0.8'}} \r\n                        content={toolTip}\r\n                        trigger={<div style={{display: 'inline-block', color: 'gray'}}>\r\n                        <i className=\"ui icon info circle\"/>\r\n                        </div>} />\r\n                    }\r\n            </label>}            \r\n        <div><Button type=\"button\" size=\"tiny\" primary onClick={addParameter}>Add Parameter</Button></div>\r\n        <div className=\"dynamicFiltersContainer\">\r\n            {renderFilters()}\r\n        </div>\r\n    </SemanticForm.Field>\r\n}\r\nexport default FormFilterDynamicInput;","import React, { createContext, useEffect } from \"react\";\r\nimport useForm from \"react-hook-form\";\r\nimport { Form as SemanticForm } from \"semantic-ui-react\";\r\nimport {getToolItemByName} from '../components/toolbox';\r\nimport * as constants from '../constants';\r\n\r\nexport const FormContext = createContext();\r\n\r\nconst sanitizeObj = (obj) => {\r\n  if (!obj) {\r\n    return;\r\n  }\r\n  Object.keys(obj).forEach(key => obj[key] === undefined && delete obj[key]);\r\n  return obj;\r\n}\r\n\r\n// Nicely designed wrapper class taken from\r\n// https://codesandbox.io/s/dazzling-napier-ne3e6\r\nfunction Form({ children, onSubmit, inputObj, inputObjId, setControlValues, watchedField, setStateCb, setStateHook,...rest }) {\r\n  const { register, setValue, handleSubmit, unregister, watch, errors } = useForm();\r\n  const watchedValue = !!watchedField ? watch(watchedField) : null; // no way for us to pass back the value conveniently, but the form will rerender anyways\r\n  const inputObjVals = !! inputObj ? [...Object.values(inputObj)] : null\r\n  console.log('Form rerenders', inputObj, watchedValue);  \r\n\r\n    // useEffect(() => {\r\n    //   // Called when input object changes\r\n    //   // TODO: If the form is for rendering control props, inputObjVals can be different size, which useEffect will complain\r\n    //   console.log('Form useEffect (inputObj Changed)', watchedValue);\r\n    //     // Set the initial values\r\n    //     // The controls' values are not really bound to any state or props so we have to update it here\r\n    //     if (setControlValues) {\r\n    //       setControlValues(setValue, inputObj);\r\n    //     }\r\n    // }, inputObjVals)\r\n\r\n    useEffect(() => {\r\n      // Called when input object changes\r\n      // TODO: If the form is for rendering control props, inputObjVals can be different size, which useEffect will complain\r\n      console.log('Form useEffect (inputObj Id changed)', inputObjId);\r\n        // Set the initial values\r\n        // The controls' values are not really bound to any state or props so we have to update it here\r\n        if (setControlValues) {\r\n          setControlValues(setValue, inputObj);\r\n        }\r\n    }, [inputObjId])\r\n\r\n    useEffect(() => {\r\n      // Called only when watched value changes\r\n      console.log('Form useEffect watchedValue changed', watchedValue);\r\n      if (setStateHook) {\r\n        setStateHook(watchedValue);\r\n      }\r\n      else if (setStateCb) {\r\n        if (Array.isArray(watchedField)) {\r\n          setStateCb(sanitizeObj(watchedValue));\r\n        }\r\n        else {\r\n          setStateCb({[watchedField]: watchedValue});\r\n        }        \r\n      }\r\n    }, Array.isArray(watchedField) ? Object.values(watchedValue) : [watchedValue]); // Means if inputObj value does not change, don't run useEffect again.\r\n\r\n  return (\r\n    <FormContext.Provider value={{ register, setValue, handleSubmit, unregister, errors }}>\r\n      {onSubmit && <SemanticForm onSubmit={handleSubmit(onSubmit)} {...rest}>\r\n        {children}\r\n      </SemanticForm>\r\n      }\r\n      {!onSubmit && <SemanticForm {...rest}>\r\n        {children}\r\n      </SemanticForm>\r\n      }\r\n    </FormContext.Provider>\r\n  );\r\n}\r\n\r\nexport { default as Text } from \"./FormText\";\r\nexport { default as FormCheckbox } from \"./FormCheckbox\";\r\nexport { default as Dropdown } from \"./FormDropDown\";\r\nexport { default as IconSelector } from \"./IconSelector\";\r\nexport { default as ColorSelector } from \"./ColorSelector\";\r\nexport { default as FormTreeDropDown } from \"./FormTreeDropDown\";\r\nexport { default as FormRadio } from \"./FormRadio\";\r\nexport { default as FormDateRange } from \"./FormDateRange\";\r\nexport { default as FormFilterInput } from \"./FormFilterInput\";\r\nexport { default as FormImageCoord} from \"./FormImageCoord\";\r\nexport { default as FormRichText} from \"./FormRichText\";\r\nexport { default as FormFilterDyanamicInput} from \"./formFilterDyanamicInput\";\r\n\r\nexport default Form;\r\n","import React, { useContext } from \"react\";\r\nimport { FormContext } from \"./Form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\nimport { Form as SemanticForm, Label} from \"semantic-ui-react\";\r\n\r\nimport 'rc-tree-select/assets/index.css';\r\nimport './FormTreeDropDown.css';\r\nimport TreeSelect, { SHOW_PARENT } from 'rc-tree-select';\r\n\r\nfunction handleChange([value, props, treeNodeEvt]) {\r\n  debugger\r\n  return {\r\n    value: value === undefined ? null : value\r\n  }\r\n}\r\n\r\nconst Icon = (props) => {\r\n  //console.log('icon', props)\r\n  return <i className='ui icon genderless'></i>\r\n}\r\n\r\nconst arrowPath = 'M765.7 486.8L314.9 134.7c-5.3-4.1' +\r\n  '-12.9-0.4-12.9 6.3v77.3c0 4.9 2.3 9.6 6.1 12.6l36' +\r\n  '0 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6' +\r\n  '.7 7.7 10.4 12.9 6.3l450.8-352.1c16.4-12.8 16.4-3' +\r\n  '7.6 0-50.4z';\r\n\r\nconst getSvg = (path, iStyle = {}, style = {}) => {\r\n  return (\r\n    <i style={iStyle}>\r\n      <svg\r\n        viewBox=\"0 0 1024 1024\"\r\n        width=\"1em\"\r\n        height=\"1em\"\r\n        fill=\"currentColor\"\r\n        style={{ verticalAlign: '-.125em', ...style }}\r\n      >\r\n        <path d={path} />\r\n      </svg>\r\n    </i>\r\n  );\r\n}\r\n\r\n\r\nconst switcherIcon = (obj) => {\r\n  if (obj.isLeaf) {\r\n    return null;\r\n  }\r\n  return getSvg(arrowPath,\r\n    { cursor: 'pointer', backgroundColor: 'white' },\r\n    { transform: `rotate(${obj.expanded ? 90 : 0}deg)` });\r\n};\r\n\r\nexport const iconProps = {\r\n  switcherIcon,\r\n};\r\n\r\nconst iconPropsFunction = {\r\n  //inputIcon: () => inputIcon,\r\n  //clearIcon: () => clearIcon,\r\n  //removeIcon: () => removeIcon,\r\n  switcherIcon,\r\n};\r\n\r\n\r\nfunction FormTreeDropDown({ name, label, treeData, isRequired, multiple, defaultValue, value, disabled,...rest }) {\r\n  const { register, setValue, unregister, errors } = useContext(FormContext);\r\n  let labelClassName = disabled ? \"formLabel-disabled\": \"\";\r\n\r\n  return (<SemanticForm.Field>\r\n        {label && <label key={'label-'+name} className={labelClassName}>{label}</label>}\r\n        <RHFInput\r\n        as={<TreeSelect\r\n          style={{ width: '100%' }}\r\n          // transitionName=\"rc-tree-select-dropdown-slide-up\"\r\n          // choiceTransitionName=\"rc-tree-select-selection__choice-zoom\"\r\n          // dropdownStyle={{ maxHeight: 300, overflow: 'auto' }}\r\n          //dropdownPopupAlign={{ overflow: { adjustY: 0, adjustX: 0 }, offset: [0, 2] }}\r\n          placeholder={<div style={{color: \"gray\"}}>Please select...</div>}\r\n          searchPlaceholder=\"Search...\"\r\n          // treeLine\r\n          showSearch={!multiple}\r\n          allowClear\r\n          maxTagTextLength={10}\r\n          treeData={treeData}\r\n          treeNodeFilterProp=\"title\"\r\n          multiple={multiple}\r\n          treeIcon          \r\n          defaultValue={defaultValue}\r\n          treeCheckStrictly={true}\r\n          disabled={disabled}\r\n          {...iconPropsFunction}\r\n          {...rest}\r\n      />}\r\n        name={name}\r\n        register={register}\r\n        unregister={unregister}\r\n        setValue={setValue}\r\n        onChangeEvent={handleChange}\r\n        rules={{required: isRequired }}\r\n        />\r\n      {errors[name] && \r\n        <div>\r\n        <Label basic color='red' pointing>\r\n          Please select a value\r\n        </Label>\r\n        </div>}\r\n    </SemanticForm.Field>\r\n    );\r\n}\r\n\r\nexport default FormTreeDropDown;\r\n","import React from 'react';\r\nimport 'rc-tree-select/assets/index.css';\r\nimport '../form/FormTreeDropDown.css';\r\nimport {iconProps} from '../form/FormTreeDropDown';\r\nimport TreeSelect, { SHOW_PARENT } from 'rc-tree-select';\r\n\r\n// Version that is not inside of a Form, so that we can easily control the value\r\n// Use this if there is no need to collect the value like during form submit; \r\nconst TreeDropdown = ({treeData, multiple, value, onSelect, ...rest}) => {\r\n    return <TreeSelect\r\n    style={{ width: '100%' }}\r\n    // transitionName=\"rc-tree-select-dropdown-slide-up\"\r\n    // choiceTransitionName=\"rc-tree-select-selection__choice-zoom\"\r\n    dropdownStyle={{ maxHeight: 300, overflow: 'auto' }}\r\n    dropdownPopupAlign={{ overflow: { adjustY: 0, adjustX: 0 }, offset: [0, 2] }}\r\n    placeholder={<div style={{color: \"gray\"}}>Please select...</div>}\r\n    searchPlaceholder=\"Search...\"\r\n    // treeLine\r\n    showSearch={!multiple}\r\n    allowClear\r\n    maxTagTextLength={10}\r\n    treeData={treeData}\r\n    treeNodeFilterProp=\"title\"            \r\n    multiple={multiple}\r\n    treeIcon\r\n    treeCheckStrictly={true}\r\n    value={value}\r\n    onSelect={onSelect}    \r\n    {...iconProps}\r\n    {...rest}\r\n    />\r\n}\r\n\r\nexport default TreeDropdown;","import _ from \"lodash\";\r\n\r\nexport const extractName = (groupingArr, data) => {\r\n    let vals = groupingArr.map(g => data[g]);\r\n    return vals.join(' / ');\r\n}\r\n\r\nexport const filterObj = (obj, fields) => {\r\n    return _.pick(obj, fields);\r\n} \r\n\r\nexport const getUniqueValues = (data, seriesName) => {\r\n    return _.uniq(data.map(d => d[seriesName]));\r\n  }\r\n\r\n// For Pie only, there is no series\r\nexport const calculateActiveIndex = (datasetFilter, data, controlId, groupingStackStr) => {\r\n    if (!datasetFilter) {\r\n        return null;\r\n    }\r\n\r\n    let controlIdFilter = datasetFilter[controlId];\r\n    if (!controlIdFilter) {\r\n        return null\r\n    }\r\n    let stackInfo = controlIdFilter[groupingStackStr];\r\n    if (!stackInfo) {\r\n        return null;\r\n    }\r\n\r\n    let sliceInfo = stackInfo.sliceInfo;\r\n\r\n    let dataIndex = data.findIndex(d => {\r\n        // this data must satisfy all filter criteria\r\n        for (let prop in sliceInfo.origObj) {\r\n            let propVal = sliceInfo.origObj[prop];\r\n            if (d.origObj[prop] !== propVal) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\n    return dataIndex >= 0 ? dataIndex : null;\r\n}\r\n\r\n// recursively add the next elements in the groupings array as child of previous element\r\n// For now: groupings is only 1 dimensional i.e. single array list (e.g. [Vendor->Model])\r\n// TODO: groupings should be multidimensional i.e. array of arrays (e.g.[ [Vendor->Model], [Plant->Area->Unit], [CommType] ])\r\nexport const convertGroupingToTreeDropOptions = (groupings) => {\r\n    if (!Array.isArray(groupings)) {\r\n        return [];\r\n    }\r\n\r\n    let retList = [];\r\n    let prevItem = null;\r\n    groupings.forEach(grp => {\r\n        let currItem = {\r\n            key: grp,\r\n            value: grp,\r\n            title: grp,\r\n            children: [],\r\n            parent: prevItem,\r\n            stackValue: prevItem ? [...prevItem.stackValue, grp]: [grp]\r\n        };\r\n        if (retList.length === 0 ) {\r\n            retList.push(currItem); // push first item only\r\n        }\r\n        pushChildToParentArr(prevItem ? prevItem.children : null, currItem);\r\n        prevItem = currItem;\r\n    })\r\n\r\n    return retList;\r\n}\r\n\r\nconst pushChildToParentArr = (parentArray, child) => {\r\n    if (!Array.isArray(parentArray)) {\r\n        return;\r\n    }\r\n\r\n    parentArray.push(child);\r\n}","import React from 'react';\r\nimport {Header} from 'semantic-ui-react';\r\n\r\nexport const getMetadataOptions = (metadata, name) => {\r\n    let fields = metadata[name];\r\n    return fields.map(field => {\r\n        let descriptionJsx = field.description && <Header content={field.name} as=\"h5\" subheader={field.description}/>\r\n        return {\r\n            key: field.name,\r\n            text: field.name,\r\n            value: field.name,\r\n            content: descriptionJsx\r\n        };\r\n    });\r\n}\r\n\r\nexport const getMetadataTreeDropdownOptions = (metadata, names) => {\r\n    let retList = [];\r\n    if (!Array.isArray(names)) {\r\n        return retList;\r\n    }\r\n    \r\n    names.forEach(name => {        \r\n        let treeFields = metadata[name];\r\n        let treeOptions = convertApiMetadataDims(treeFields);\r\n        retList = retList.concat(treeOptions);        \r\n    });    \r\n\r\n    return retList;\r\n}\r\n\r\nconst convertApiMetadataDims = (apiMetadataDims, parent=null) => {\r\n    if (!apiMetadataDims) {\r\n        return null;\r\n    }\r\n\r\n    return apiMetadataDims.map(x => {\r\n        let {name, items, dataType, ...rest} = x;\r\n        let currItem = {\r\n            name: parent ? `${parent.name}.${name}` : name,\r\n            //value: parent ? `${parent.name}.${name}` : name,\r\n            value: name,\r\n            title: name,\r\n            parent,\r\n            stackValue: parent ? [...parent.stackValue, name] : [name],\r\n            disabled: dataType === 'group',\r\n            ...rest\r\n        };\r\n\r\n        currItem.children = convertApiMetadataDims(items, currItem);\r\n\r\n        return currItem;\r\n    });\r\n}\r\n\r\nconst findInTree = (arrTree, name) => {\r\n    if (!Array.isArray(arrTree)) {\r\n        return null;\r\n    }\r\n\r\n    for(let i = 0; i < arrTree.length; i++) {\r\n        let currItem = arrTree[i];\r\n        if (currItem.name === name) {\r\n            return currItem;\r\n        }\r\n\r\n        let findChildren = findInTree(currItem.items, name);\r\n        if (!!findChildren) {\r\n            return findChildren;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport const getMetadataDimTreeDropdownOptions = (dimName, metadata) => {\r\n    let metaDim = metadata.dimensions;\r\n    let findDimName = findInTree(metaDim, dimName);\r\n    if (!findDimName) {\r\n        return [];\r\n    }\r\n    \r\n    return convertApiMetadataDims([findDimName]);\r\n}","import React, { PureComponent, Component, useRef, useEffect, useState } from 'react';\r\nimport {\r\n  PieChart, Pie, Sector, Cell, ResponsiveContainer, Legend, Tooltip\r\n} from 'recharts';\r\nimport TreeDropdown from '../controls/treeDropdown';\r\nimport '../controls/common.css';\r\nimport './pieChart.css';\r\nimport './rechartsCommon.css';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport {extractName, filterObj, calculateActiveIndex, convertGroupingToTreeDropOptions} from '../helper/chartHelper';\r\nimport {getMetadataDimTreeDropdownOptions} from '../helper/metadataManager';\r\n\r\n// TODO: Due to lack of time during POC, this class design is very messy.\r\n// There are 3 classes being exported for various scenarios (reporting, trial page, design mode)\r\n// The design of gauge chart is cleaner. Try to follow that design.\r\n\r\nconst sampleData = [\r\n  { name: 'Category 1', value: 400 },\r\n  { name: 'Category 2', value: 300 },\r\n  { name: 'Category 3', value: 300 },\r\n  { name: 'Category 4', value: 200 },\r\n];\r\n\r\nconst sampleGroups = [\r\n  {\r\n      key: 'status',\r\n      value: 'status',\r\n      title: 'Status',\r\n  }\r\n]\r\n\r\n////const COLORS = ['green', 'red', 'gold', 'gray', 'cyan', 'magenta', 'black', 'lime', 'teal', 'pink', 'violet', 'orange', 'blue', 'indigo'];\r\nconst COLORS = ['#106b21', '#e71837', 'gold', 'gray', '#669999', '#8b008b', 'black', 'lime', 'teal', 'pink', '#a47eb6', '#fc9303', '#0e4bef', '#4b0082'];\r\n\r\nconst RADIAN = Math.PI / 180;\r\nconst renderCustomizedLabel = ({\r\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index, name\r\n}) => {\r\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n  return (\r\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n      {`${name} - ${(percent * 100).toFixed(0)}%`}\r\n    </text>\r\n  );\r\n};\r\n\r\nlet renderLabel = function(entry) {\r\n    return `${entry.name} - ${(entry.percent*100).toFixed(1)}%`;\r\n}\r\n\r\n\r\n// The ResponsiveContainer from recharts is buggy during printing\r\n// We manually set the height and width of the container by querying the DOM\r\nexport const PieForReport = (props) => {\r\n  const chartContainerEl = useRef();\r\n  const [myState, setMyState] = useState({\r\n    height: 0,\r\n    width: 0\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log('[DEBUG] useEffect pie', chartContainerEl);\r\n    if (!chartContainerEl || !chartContainerEl.current) {\r\n      return;\r\n    }\r\n    let rect = chartContainerEl.current.getClientRects()[0]\r\n    setMyState({\r\n      height: rect.height,\r\n      width: rect.width\r\n    })\r\n    \r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"reChartContainer\" ref={chartContainerEl}>\r\n      <div className=\"controlLabel\">{props.data.label + ' width: ' + myState.width}</div>\r\n      <PieChart \r\n          margin={{top: 20, right: 15, left: 15, bottom: 0}}\r\n          height={myState.height}\r\n          width={myState.width}\r\n      >\r\n        {renderPie()}\r\n        {renderLegend()}\r\n      </PieChart>\r\n    </div>\r\n  );  \r\n}\r\n\r\n// The ResponsiveContainer from recharts is OK when viewing from the web browser,\r\n// but buggy during PDF generation (e.g. not taking entire width and height of the container)\r\n// Not used anymore...\r\nconst PieResponsive = (props) => {\r\n  let classNames = 'reChartContainer';\r\n  if (props.selected === true) {\r\n      classNames += ' ctrl-selected'\r\n  }\r\n  let width = props.containerWidth ? props.containerWidth : '100%'\r\n  return (\r\n    <div id=\"pieContainer1\" className={classNames}>\r\n      <div className=\"controlLabel\">{props.data.label}</div>\r\n      <ResponsiveContainer  width=\"100%\" height=\"100%\">\r\n        <PieChart margin={{top: 20, right: 20, left: 20, bottom: 40}}>\r\n          {renderPie()}\r\n          {renderLegend()}\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );  \r\n}\r\n\r\n// Visual cue to identify which wedge is the active one.\r\nconst renderActiveShape = (props) => {\r\n  const RADIAN = Math.PI / 180;\r\n  const {\r\n    cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle,\r\n    fill, payload, percent, value,\r\n  } = props;\r\n  const sin = Math.sin(-RADIAN * midAngle);\r\n  const cos = Math.cos(-RADIAN * midAngle);\r\n  const sx = cx + (outerRadius + 10) * cos;\r\n  const sy = cy + (outerRadius + 10) * sin;\r\n  const mx = cx + (outerRadius + 30) * cos;\r\n  const my = cy + (outerRadius + 30) * sin;\r\n  const ex = mx + (cos >= 0 ? 1 : -1) * 22;\r\n  const ey = my;\r\n  const textAnchor = cos >= 0 ? 'start' : 'end';\r\n\r\n  return (\r\n    <g>\r\n      {/* <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>{payload.name}</text> */}\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        innerRadius={innerRadius}\r\n        outerRadius={outerRadius}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        fill={fill}\r\n      />\r\n      <Sector\r\n        cx={cx}\r\n        cy={cy}\r\n        startAngle={startAngle}\r\n        endAngle={endAngle}\r\n        innerRadius={outerRadius + 3}\r\n        outerRadius={outerRadius + 10}\r\n        fill={fill}\r\n      />\r\n      {/* <path d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`} stroke={fill} fill=\"none\" />\r\n      <circle cx={ex} cy={ey} r={2} fill={fill} stroke=\"none\" />\r\n      <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} textAnchor={textAnchor} fill=\"#333\">{`PV ${value}`}</text>\r\n      <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} dy={18} textAnchor={textAnchor} fill=\"#999\">\r\n        {`(Rate ${(percent * 100).toFixed(2)}%)`}\r\n      </text> */}\r\n    </g>\r\n  );\r\n};\r\n\r\n\r\nconst getDefaultGrouping = (groupingHier) => {\r\n  if (!Array.isArray(groupingHier)) {\r\n    return null;\r\n  }\r\n\r\n  return groupingHier[0];\r\n}\r\n\r\n// This is the latest one that's used\r\nexport class PieResponsiveDataBase extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onGroupSelect = this.onGroupSelect.bind(this);\r\n    //let initialGroupingVal = props.dataProps? getDefaultGrouping(props.dataProps.categories) : null;\r\n    let initialGroupingVal = props.data.dataProps? props.data.dataProps.categories : null;\r\n    console.log('[pieChart] constructor...initialGroupingVal', initialGroupingVal);\r\n    this.state = {\r\n      activeIndex: props.activeIndex, // not used anymore\r\n      groupingBoundVal: initialGroupingVal, // bound to treedropdown\r\n      //groupingBoundValStack: initialGroupingVal ? [initialGroupingVal] : null, // same as groupingBoundVal but in stack format, store this also, for convenience\r\n    };\r\n  }\r\n\r\n  onPieClick = (sectorInfo, index) => {\r\n    //let sectorIndex = args[1];\r\n    this.setState({\r\n      activeIndex: index\r\n    });\r\n\r\n    if (this.props.handleChartClick) {\r\n      // A control can have 1 filter per grouping level\r\n      // we store the grouping stack as string to make it easier to compare\r\n      let groupingStackStr = this.getGroupingStackStr();\r\n\r\n      this.props.handleChartClick(sectorInfo, null, groupingStackStr);\r\n    }\r\n  }\r\n\r\n  getGroupingStackStr = () => {\r\n    let groupingStack = this.props.currControlGrouping ? this.props.currControlGrouping : [this.state.groupingBoundVal];\r\n    return JSON.stringify(groupingStack);\r\n  }\r\n\r\n  onGroupSelect(value, node) {\r\n    console.log(\"[Piechart] onGroupSelect\", value, node.props);\r\n    this.setState({\r\n      groupingBoundVal: value,\r\n    });\r\n\r\n    // Remove the filter from previous lower groups\r\n    // Send a new API Request to the backend\r\n    // Just fire a callback and let it be handled in upper level?\r\n    // Maybe just store the \"temp\" grouping (non-default) of controls of the dashboard in redux store\r\n    if (this.props.handleGroupSelect) {\r\n      this.props.handleGroupSelect(node.props.stackValue);\r\n    }\r\n  }\r\n\r\n  formatApiData(apiData, dataProps, currControlGrouping) {\r\n    let grouping = currControlGrouping ? currControlGrouping : [dataProps.categories];\r\n    return apiData.map(d => {\r\n      let extractedName = extractName(grouping, d);\r\n\r\n      return {\r\n        name: extractedName,\r\n        value: parseInt(d.value),\r\n        origObj: filterObj(d, grouping)\r\n      }\r\n    })\r\n  }\r\n\r\n  renderPieWithData = (props) => {\r\n    let formattedData = null;\r\n    if (props.designMode) {\r\n      formattedData = sampleData;\r\n    }\r\n    else if (props.data.dataProps) {\r\n      if (!props.apiData || !props.metadata) {\r\n        return null;\r\n      }\r\n      formattedData = this.formatApiData(props.apiData.data, props.data.dataProps, props.currControlGrouping);\r\n    }\r\n\r\n    let activeIndex = calculateActiveIndex(props.datasetFilters, formattedData, props.i, this.getGroupingStackStr())    \r\n\r\n    return <Pie\r\n      data={formattedData}\r\n      labelLine={true}\r\n      //label={renderCustomizedLabel}\r\n      label\r\n      //label={renderLabel}\r\n      //   outerRadius={100}\r\n      fill=\"#8884d8\"\r\n      dataKey=\"value\"\r\n      isAnimationActive={false}\r\n      onClick={this.onPieClick}\r\n      activeIndex={activeIndex}\r\n      activeShape={renderActiveShape}\r\n    >\r\n      { formattedData && formattedData.length > 0 &&\r\n        formattedData.map((entry, index) => {\r\n          return <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n        })\r\n      }\r\n    </Pie>;    \r\n  }\r\n\r\n  componentDidUpdate(previousProps, previousState) {\r\n    // If the layout name changes, the constructor may not be called again (I think if the ID did not change).\r\n    // So we perform the updates here\r\n    if (previousProps.layoutName !== this.props.layoutName) {\r\n      let initialGroupingVal = this.props.data.dataProps? this.props.data.dataProps.categories : null;\r\n      this.setState({\r\n        groupingBoundVal: initialGroupingVal\r\n      });\r\n      console.log('piechart, componentDidUpdate, initialGroupingVal: ', initialGroupingVal, 'previousProps.layoutName', previousProps.layoutName, 'this.props.layoutName', this.props.layoutName);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let classNames = 'reChartContainer';\r\n    if (this.props.selected === true) {\r\n        classNames += ' ctrl-selected'\r\n    }    \r\n\r\n    console.log('[pieChart] render, group:', this.state.groupingBoundVal);\r\n\r\n    return <div id=\"pieContainer1\" className={classNames}>\r\n      <div className=\"controlLabel\">{this.props.data.label}</div>\r\n      <div>\r\n        {!this.props.designMode && this.props.data.dataProps && this.props.metadata &&<TreeDropdown \r\n          //treeData={convertGroupingToTreeDropOptions(this.props.dataProps.categories, props.metadata)} \r\n          treeData={getMetadataDimTreeDropdownOptions(this.props.data.dataProps.categories, this.props.metadata)} \r\n          value={this.state.groupingBoundVal}\r\n          onSelect={this.onGroupSelect}\r\n          treeDefaultExpandAll\r\n          key={`treedropdown-${this.props.i}`}\r\n        />}\r\n        {this.props.designMode && <TreeDropdown \r\n          treeData={sampleGroups} \r\n          value={sampleGroups[0].key}\r\n          treeDefaultExpandAll\r\n          disabled\r\n        />}        \r\n      </div>\r\n      <ResponsiveContainer  width=\"100%\" height=\"100%\">\r\n        <PieChart margin={{top: 20, right: 20, left: 20, bottom: 45}}>\r\n        {this.renderPieWithData(this.props)}\r\n        {renderLegend()}\r\n        <Tooltip />\r\n      </PieChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  }\r\n} // end: PieResponsiveDataBase class\r\nexport const PieResponsiveData = noobControlHoc(PieResponsiveDataBase);\r\n\r\n// This is for the trial page only!\r\nexport class PieWithData extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeIndex: props.activeIndex\r\n    };\r\n  }\r\n\r\n  onPieClick = (sectorInfo, index) => {\r\n    //let sectorIndex = args[1];\r\n    this.setState({\r\n      activeIndex: index\r\n    });\r\n\r\n    if (this.props.pieClickCallback) {\r\n      this.props.pieClickCallback(sectorInfo);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(previousProps, previousState) {\r\n  }\r\n\r\n  extractName(groupingArr, data) {\r\n    let vals = groupingArr.map(g => data[g]);\r\n    return vals.join(' / ');\r\n  }\r\n\r\n  formatApiData(apiData, dataProps) {\r\n    let grouping = dataProps.grouping;\r\n    return apiData.map(d => {\r\n      let extractedName = this.extractName(grouping, d);\r\n\r\n      return {\r\n        name: extractedName,\r\n        value: d.value\r\n      }\r\n    })\r\n  }\r\n\r\n  renderPieWithData = (props) => {\r\n    let formattedData = props.apiData || sampleData;\r\n    if (props.dataProps) {\r\n      formattedData = this.formatApiData(props.data.data, props.dataProps);\r\n    }\r\n\r\n    return <Pie\r\n      data={formattedData}\r\n      labelLine={true}\r\n      //label={renderCustomizedLabel}\r\n      label\r\n      //label={renderLabel}\r\n      //   outerRadius={100}\r\n      fill=\"#8884d8\"\r\n      dataKey=\"value\"\r\n      isAnimationActive={false}\r\n      onClick={this.onPieClick}\r\n      activeIndex={this.props.activeIndex}\r\n      activeShape={renderActiveShape}\r\n    >\r\n      { formattedData && formattedData.length > 0 &&\r\n        formattedData.map((entry, index) => {\r\n          return <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n        })\r\n      }\r\n    </Pie>;    \r\n  }\r\n\r\n  render() {\r\n    return <PieChart margin={{top: 20, right: 20, left: 20, bottom: 25}} width={400} height={400}>\r\n      {this.renderPieWithData(this.props)}\r\n      {renderLegend()}\r\n      <Tooltip />\r\n    </PieChart>\r\n  }\r\n} // end: PieWithData class\r\n\r\n// Common function\r\n// Renders Pie Chart and Legends\r\nconst renderPie = () => {\r\n  return <Pie\r\n      data={sampleData}\r\n      labelLine={true}\r\n      //label={renderCustomizedLabel}\r\n      label\r\n      //label={renderLabel}\r\n      //   outerRadius={100}\r\n      fill=\"#8884d8\"\r\n      dataKey=\"value\"\r\n      isAnimationActive={false}      \r\n    >\r\n      {\r\n        sampleData.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\r\n      }\r\n    </Pie>;    \r\n}\r\n\r\nconst renderLegend = () => {\r\n  return <Legend \r\n    wrapperStyle={{overflow: \"auto\", height: \"65px\"}}\r\n    margin={{top: 0, right: 0, left: 0, bottom: 0}}\r\n    verticalAlign=\"bottom\"/>\r\n}\r\n\r\nexport default noobControlHoc(PieResponsive);\r\n\r\n// export default noobControlHoc(Example);\r\n\r\n// Properties Panel Portion\r\nexport const pieProps = [\r\n  {\r\n    name: 'dataProps', \r\n    propType: 'section',\r\n  },\r\n  {\r\n    name: 'datasetId', \r\n    propType: 'number',\r\n    toolTip: 'Put the same datasetId for all controls that are linked. When a filter is applied in one control, other linked controls will also be filtered.'\r\n  },\r\n  {\r\n    name: 'requestType', \r\n    propType: 'metadata',\r\n    metadataField: 'requestTypes',\r\n    metadataPropType: 'dropdown'\r\n  },\r\n  {\r\n    name: 'categories', \r\n    propType: 'metadata',\r\n    metadataField: 'dimensions',\r\n    metadataPropType: 'treeDropdown'\r\n  },\r\n  // {\r\n  //   // TODO: this is for aggregation dropdown\r\n  //   // Value depends on the selected dimension\r\n  //   name: 'aggregation', \r\n  //   propType: 'metadata',\r\n  //   metadataField: null,\r\n  //   metadataPropType: 'dropdown',\r\n  //   metadataAssoc: 'categories',\r\n  //   metadataAssocField: 'aggregations'\r\n  // },\r\n  {\r\n    name: 'aggregation', \r\n    propType: 'metadata',\r\n    metadataField: null,\r\n    metadataPropType: 'textbox',\r\n    toolTip: 'Only count is supported in this version',\r\n    readOnly: true\r\n  },\r\n];","import React, { PureComponent, useRef, useEffect, useState } from 'react';\r\nimport {\r\n    BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,Cell, LabelList\r\n  } from 'recharts';\r\n  import './barChart.css';  \r\n\r\nimport '../controls/common.css';\r\nimport './rechartsCommon.css';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport _ from \"lodash\";\r\nimport TreeDropdown from '../controls/treeDropdown';\r\nimport {extractName, filterObj, calculateActiveIndex, convertGroupingToTreeDropOptions} from '../helper/chartHelper';\r\nimport {getMetadataDimTreeDropdownOptions} from '../helper/metadataManager';\r\n\r\n// TODO: Due to lack of time during POC, this class design is very messy.\r\n// There are 3 classes being exported for various scenarios (reporting, trial page, design mode)\r\n// The design of gauge chart is cleaner. Try to follow that design.\r\n\r\n//const COLORS = ['green', 'red', 'gold', 'gray', 'cyan', 'magenta', 'black', 'lime', 'teal', 'pink', 'violet', 'orange', 'blue', 'indigo'];\r\nconst COLORS = ['#106b21', '#e71837', 'gold', 'gray', 'cyan', 'magenta', 'black', 'lime', 'teal', 'pink', 'violet', 'orange', 'blue', 'indigo'];\r\n\r\nexport const sampleData = [\r\n  {\r\n    date: 'Category A', \"Series 3\": 4000, \"Series 1\": 2400, \"Series 2\": 2400,\r\n  },\r\n  {\r\n    date: 'Category B', \"Series 3\": 3000, \"Series 1\": 1398, \"Series 2\": 2210,\r\n  },\r\n  {\r\n    date: 'Category C', \"Series 3\": 2000, \"Series 1\": 9800, \"Series 2\": 2290,\r\n  },\r\n  {\r\n    date: 'Category D', \"Series 3\": 2780, \"Series 1\": 3908, \"Series 2\": 2000,\r\n  },\r\n  {\r\n    date: 'Category E', \"Series 3\": 1890, \"Series 1\": 4800, \"Series 2\": 2181,\r\n  },\r\n  {\r\n    date: 'Category F', \"Series 3\": 2390, \"Series 1\": 3800, \"Series 2\": 2500,\r\n  },\r\n];\r\n\r\nconst sampleGroups = [\r\n  {\r\n      key: 'month',\r\n      value: 'month',\r\n      title: 'Month',\r\n  }\r\n]\r\n\r\nconst monthTickFormatter = (tick) => {\r\n  const date = new Date(tick);\r\n\r\n  return tick;\r\n  //return date.getMonth() + 1;\r\n};\r\n\r\nconst renderQuarterTick = (tickProps) => {\r\n  const { x, y, payload } = tickProps;\r\n  const { value, offset } = payload;\r\n  const date = new Date(value);\r\n  const month = date.getMonth();\r\n  const quarterNo = Math.floor(month / 3) + 1;\r\n  const isMidMonth = month % 3 === 1;\r\n\r\n  if (month % 3 === 1) {\r\n    return <text x={x + offset} y={y - 4} textAnchor=\"middle\">{`Q${quarterNo}`}</text>;\r\n  }\r\n\r\n  const isLast = month === 11;\r\n\r\n  if (month % 3 === 0 || isLast) {\r\n    const pathX = Math.floor(isLast ? x + offset * 2 : x) + 0.5;\r\n\r\n    return <path d={`M${pathX},${y - 4}v${-35}`} stroke=\"darkgray\" />;\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const BarChartForReport = (props) => {\r\n  const chartContainerEl = useRef();\r\n  const [myState, setMyState] = useState({\r\n    height: 0,\r\n    width: 0\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log('[DEBUG] useEffect bar', chartContainerEl);\r\n    if (!chartContainerEl || !chartContainerEl.current) {\r\n      return;\r\n    }\r\n    let rect = chartContainerEl.current.getClientRects()[0]\r\n    setMyState({\r\n      height: rect.height,\r\n      width: rect.width\r\n    })\r\n    \r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"reChartContainer\" ref={chartContainerEl}>\r\n      <div className=\"controlLabel\">{props.data.label}</div>\r\n        {renderChartContents(true, myState.width, myState.height, sampleData)}\r\n    </div>\r\n  );  \r\n}\r\n\r\n// Just specify null for width and height if the BarChart is going to be placed inside a ResponsiveContainer\r\n// Important to set isAnimationActive to false during printing\r\n// This is for the designer only\r\nconst renderChartContents = (bAnimate, width, height, data, stacked) => {\r\n  let stackId = stacked === true ? 'a' : null;\r\n  return (\r\n    <BarChart\r\n              width={width}\r\n              height={height}\r\n              data={data}\r\n              margin={{\r\n              top: 0, right: 10, left: 5, bottom: 50,\r\n              }}\r\n          >\r\n      <CartesianGrid vertical={false}/>\r\n      <XAxis dataKey=\"date\" tick={<CustomizedAxisTick />} \r\n        height={100} interval={0}\r\n        // tickFormatter={monthTickFormatter} \r\n      />\r\n      {/* <XAxis dataKey=\"date\" axisLine={false} tickLine={false} interval={0} tick={renderQuarterTick} height={1} scale=\"band\" xAxisId=\"quarter\" /> */}\r\n      <YAxis axisLine={false}/>\r\n      <Tooltip />\r\n      <Legend verticalAlign=\"top\" wrapperStyle={{\r\n      paddingBottom: \"20px\"\r\n      }}/>\r\n      <Bar dataKey=\"Series 1\" fill=\"green\" stackId={stackId} isAnimationActive={false} />\r\n      <Bar isAnimationActive={bAnimate} dataKey=\"Series 3\" fill=\"gold\" stackId={stackId}/>      \r\n      <Bar isAnimationActive={bAnimate} dataKey=\"Series 2\" fill=\"gray\" stackId={stackId}/>      \r\n    </BarChart>\r\n  )\r\n}\r\n\r\n// Notes:\r\n// Maybe let the user to customize the following:\r\n// - interval (ticks)\r\n// - X axis height\r\n// seriesList - must contain the actual names (e.g. \"Good\", \"Bad\",\"Fair\")\r\n// This function is for the trial page only\r\nconst renderChartContentsTrial = (bAnimate, width, height, data, category, seriesList) => {\r\n  return (\r\n    <BarChart\r\n              width={width}\r\n              height={height}\r\n              data={data}\r\n              margin={{\r\n              top: 20, right: 10, left: 5, bottom: 30,\r\n              }}\r\n          >\r\n      <CartesianGrid vertical={false}/>\r\n      <XAxis height={100} dataKey={category} tick={<CustomizedAxisTickTrial />} interval={0} />\r\n      <YAxis axisLine={false}/>\r\n      <Tooltip />\r\n      <Legend  verticalAlign=\"top\" wrapperStyle={{\r\n      paddingTop: \"10px\"\r\n      }}/>\r\n\r\n\r\n      <Bar dataKey={seriesList[0]} fill=\"green\" strokeWidth={4} isAnimationActive={true} onClick={(...args) => {\r\n        console.log('Bar clicked first cat', ...args);}\r\n        }>\r\n        {/* {\r\n          data.map((entry, index) => (\r\n            <Cell key={`cell-${index}`} stroke={'black'}  strokeWidth={2} myCellId={secondaryList[0]+index}/>\r\n          ))\r\n        } */}\r\n      </Bar>\r\n      <Bar dataKey={seriesList[1]} fill=\"gold\"/>      \r\n    </BarChart>\r\n  )\r\n}\r\n\r\nconst getUniqueValues = (data, seriesName) => {\r\n  return _.uniq(data.map(d => d[seriesName]));\r\n}\r\n\r\nconst formatBarchartData = (data, groupings, seriesName, aggregation=\"value\") => {\r\n  let retList = [];\r\n  for (let i = 0; i < data.length; i++) {\r\n    let currData = data[i];\r\n    let currCategoryVal = extractName(groupings, currData); //e.g. \"Yokogawa / EJA\"\r\n    let currCategoryObj = filterObj(currData, groupings);\r\n    let findRetList = retList.find(r => r.name === currCategoryVal);\r\n    if (!findRetList) {\r\n      findRetList = {\r\n        name: currCategoryVal, \r\n        origCatObj: currCategoryObj,\r\n        origSeriesName: seriesName // we need this later for filtering\r\n      };\r\n      retList.push(findRetList);\r\n    }\r\n\r\n    let seriesVal = currData[seriesName];\r\n    findRetList[seriesVal] = parseInt(currData[aggregation]);\r\n  }\r\n\r\n  return retList;\r\n}\r\n\r\n\r\n\r\nclass CustomizedAxisTick extends PureComponent {\r\n  render() {\r\n    const {\r\n      x, y, stroke, payload,\r\n    } = this.props;\r\n   \r\n    return (\r\n      <g transform={`translate(${x},${y})`}>\r\n        <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">{payload.value}</text>\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nclass CustomizedAxisTickTrial extends PureComponent {\r\n  render() {\r\n    const {\r\n      x, y, stroke, payload,\r\n    } = this.props;\r\n\r\n    let jsonObj = JSON.parse(payload.value);\r\n    \r\n    return (\r\n      <g transform={`translate(${x},${y})`}>\r\n        <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">{Object.values(jsonObj).join(' / ')}</text>\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport class BarChartWithData extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (renderChartContentsTrial(true, 600, 400, \r\n      this.props.apiData, \r\n      this.props.primary, \r\n      this.props.secondaryList));\r\n  }\r\n}\r\n\r\n// This is for the Designer sample only\r\nfunction BarChartResponsive(props) {\r\n  let classNames = 'reChartContainer';\r\n  if (props.selected === true) {\r\n      classNames += ' ctrl-selected'\r\n  }\r\n\r\n  return (\r\n    <div className={classNames}>\r\n      <div className=\"controlLabel\">{props.data.label}</div>\r\n      <ResponsiveContainer width={\"100%\"} height=\"100%\">\r\n        {renderChartContents(true, null, null, sampleData, props.stacked)}\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst getDefaultGrouping = (groupingHier) => {\r\n  if (!Array.isArray(groupingHier)) {\r\n    return null;\r\n  }\r\n\r\n  return groupingHier[0];\r\n}\r\n\r\nclass BarResponsiveDataBase extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //let initialGroupingVal = props.dataProps? getDefaultGrouping(props.dataProps.configedCategories) : null;\r\n    let initialGroupingVal = props.data.dataProps? props.data.dataProps.categories : null;\r\n    this.state = {\r\n      activeCategoryIndex: null, // This is the active category index (index value follows the formattedData index)\r\n      activeSeries: null, // This is the active series inside the active category (e.g. \"Normal\", \"Warning\")\r\n      groupingBoundVal: initialGroupingVal\r\n    }\r\n    this.onGroupSelect = this.onGroupSelect.bind(this);\r\n  }\r\n\r\n  handleClick = (data, index, seriesVal) => {\r\n    console.log('Bar clicked ', index, seriesVal);\r\n    // TODO: Do not use this\r\n    // Instead, check the redux store filter objects and calculate the index based on the current grouping selected\r\n    this.setState({\r\n      activeCategoryIndex: index,\r\n      activeSeries: seriesVal\r\n    });\r\n\r\n    // Fire a redux action\r\n    // origObj e.g. {vendor: \"Yokogawa\", \"PRM Device Status\": \"Normal\"} ...basically the filter for this bar\r\n    // unlike pie chart, origObj is not readily available at this point so we need to build it\r\n    let origObj = {\r\n      ...data.origCatObj,      \r\n    };\r\n\r\n    let seriesInfo = {[data.origSeriesName]: seriesVal};\r\n\r\n    if (this.props.handleChartClick) {\r\n      // A control can have 1 filter per grouping level\r\n      // we store the grouping stack as string to make it easier to compare\r\n      let groupingStackStr = this.getGroupingStackStr();\r\n\r\n      this.props.handleChartClick({origObj}, seriesInfo, groupingStackStr);\r\n    }\r\n  }\r\n\r\n  getGroupingStackStr = () => {\r\n    let groupingStack = this.props.currControlGrouping ? this.props.currControlGrouping : [this.state.groupingBoundVal];\r\n    return JSON.stringify(groupingStack);\r\n  }\r\n\r\n// For rendering an individual bar (group) inside a barchart\r\n  renderBars = (uniqSeriesVals, activeIndex, activeSeries) => {\r\n    let stackId = this.props.data.stacked === true ? 'a' : null;\r\n    //console.log(\"renderBars\", uniqSeriesNames); // Normal, Error, Warning\r\n    return uniqSeriesVals.map((seriesVal, seriesIndex) => {\r\n      return <Bar \r\n          key={`bar-${seriesVal}-${seriesIndex}`} \r\n          dataKey={seriesVal} \r\n          fill={COLORS[seriesIndex % COLORS.length]} \r\n          // Turn off animation because of rechart bug: the triangles in renderCustomizedLabel() are rendered intermittently\r\n          isAnimationActive={false} \r\n          stackId={stackId}\r\n          onClick={(data, index) => this.handleClick(data, index, seriesVal)}\r\n        >\r\n        <LabelList dataKey={\"name\"} content={(props) => this.renderCustomizedLabel(props, activeIndex, activeSeries)} mySeriesName={seriesVal}/>    \r\n      </Bar>\r\n    }\r\n    );      \r\n  }\r\n\r\n  renderCustomizedLabel = (props, activeIndex, activeSeries) => {    \r\n    const {\r\n      x, y, width, height, value, mySeriesName, index\r\n    } = props;    \r\n\r\n    // Do not use the state activeIndex\r\n    // Parse this.props.datasetFilters to get the active index\r\n    if (activeIndex !== index || \r\n      activeSeries !== mySeriesName) {\r\n      return null;\r\n    }  \r\n    \r\n    const xyOffset = 1;\r\n    const sideLen = 8;\r\n    let trianglePts;\r\n    if (this.props.data.stacked) {\r\n      // draw on left\r\n      trianglePts = `${ x - xyOffset} ${ y + height/2}, ${ x - xyOffset - sideLen} ${ y + height/2 - sideLen /2}, ${ x - xyOffset - sideLen} ${ y + height/2 + sideLen /2}`;\r\n    }\r\n    else {\r\n      // draw on top\r\n      trianglePts = `${x + width / 2 - sideLen /2 } ${y-xyOffset- sideLen}, ${x + width / 2 + sideLen /2 } ${y-xyOffset- sideLen}, ${x+width/2} ${y-xyOffset}`;\r\n    }\r\n\r\n    console.log('renderCustomizedLabel', mySeriesName, index, trianglePts);\r\n  \r\n    // Draw a triangle on top if the bar is the selected series of the selected index\r\n    return (\r\n      <g>\r\n        <polygon id=\"e1_polygon\" points={trianglePts} fill=\"rgba(0, 0, 0, 0.7)\"/>\r\n      </g>\r\n    );\r\n  };\r\n\r\n  getDataIndex = (data, filter) => {    \r\n    return data.findIndex(d => {\r\n      let currDataCatObj = d.origCatObj;\r\n      for (let prop in filter) {\r\n        let propVal = filter[prop];\r\n        if (currDataCatObj[prop] !== propVal) {\r\n            return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  // Input data sample:\r\n  // {PRM Device Status: \"GOOD\", Vendor: \"Yokogawa\", Model: \"EJA\", count: 100},\r\n  // {PRM Device Status: \"BAD\", Vendor: \"Yokogawa\", Model: \"EJA\", count: 100},\r\n  // {PRM Device Status: \"FAIR\", Vendor: \"Yokogawa\", Model: \"EJA\", count: 100},\r\n  // {PRM Device Status: \"GOOD\", Vendor: \"Yokogawa\", Model: \"EJX\", count: 100},\r\n  // {PRM Device Status: \"BAD\", Vendor: \"Yokogawa\", Model: \"EJX\", count: 100},\r\n  // {PRM Device Status: \"FAIR\", Vendor: \"Yokogawa\", Model: \"EJX\", count: 100},\r\n  // \r\n  // Need to transform/compress it to:\r\n  // {name: \"Yokogawa / EJA\", GOOD: 100, BAD: 100, FAIR: 100},\r\n  // {name: \"Yokogawa / EJX\", GOOD: 100, BAD: 100, FAIR: 100},\r\n  // \r\n  // categories: e.g. [\"Vendor\", \"Model\"]\r\n  // seriesName: e.g. \"PRM Device Status\"\r\n  // aggregation: \"count\"\r\n  renderChartContentsUngroupedData = (data, groupings, seriesName, aggregation) => {\r\n    let uniqSeriesVals = getUniqueValues(data, seriesName); // Good, bad, fair, e.g.\r\n    let formattedData = formatBarchartData(data, groupings, seriesName, aggregation);\r\n    // Calculate the active index and series first\r\n    let stackStr = this.getGroupingStackStr();\r\n    let filterAtGroup = this.findFilterAtGroup(stackStr);\r\n    let activeIndex, activeSeries;\r\n\r\n    if (filterAtGroup && filterAtGroup.sliceInfo && filterAtGroup.sliceInfo.origObj) {\r\n      activeIndex = this.getDataIndex(formattedData, filterAtGroup.sliceInfo.origObj);\r\n      activeSeries = filterAtGroup.seriesInfo && Object.values(filterAtGroup.seriesInfo)[0];\r\n    }\r\n\r\n    return (\r\n      <BarChart\r\n                data={formattedData}\r\n                margin={{\r\n                top: 0, right: 10, left: 5, bottom: 50,\r\n                }}\r\n            >\r\n        <CartesianGrid vertical={false}/>\r\n        <XAxis height={100} dataKey={\"name\"} tick={<CustomizedAxisTick />} interval={0} />\r\n        <YAxis axisLine={false}/>\r\n        <Tooltip />\r\n        <Legend  verticalAlign=\"top\" wrapperStyle={{\r\n        paddingBottom: \"20px\"\r\n        }}/>\r\n          {this.renderBars(uniqSeriesVals, activeIndex, activeSeries)}   \r\n\r\n      </BarChart>\r\n    )\r\n  }  \r\n\r\n  findFilterAtGroup = (newStackStr) => {\r\n    if (!this.props.datasetFilters) {\r\n      return null;\r\n    }\r\n\r\n    let controlFilters = this.props.datasetFilters[this.props.i];\r\n    if (!controlFilters) {\r\n      return null;\r\n    }\r\n\r\n    return controlFilters[newStackStr];\r\n  }\r\n\r\n  onGroupSelect(value, node) {\r\n    console.log(\"[Barchart] onGroupSelect\", value, node.props);\r\n\r\n    // calculate the new activeIndex/series from the new groupValue\r\n    // let stackStr = JSON.stringify(node.props.stackValue);\r\n    // let filterAtNewGroup = findFilterAtGroup(stackStr);\r\n    // if (filterAtNewGroup) {\r\n    //   // Find the index from the data\r\n    // }\r\n\r\n    this.setState({\r\n      groupingBoundVal: value,\r\n    });\r\n\r\n    // Remove the filter from previous lower groups\r\n    // Send a new API Request to the backend\r\n    // Just fire a callback and let it be handled in upper level?\r\n    // Maybe just store the \"temp\" grouping (non-default) of controls of the dashboard in redux store\r\n    if (this.props.handleGroupSelect) {\r\n      let stacks = node.props.stackValue;\r\n      this.props.handleGroupSelect(stacks);\r\n    }\r\n  }\r\n  \r\n  getChartContents = () => {\r\n    if (!this.props.designMode) {\r\n      if (!this.props.apiData) {\r\n        // Means API data not yet fetched\r\n        return <div></div>;\r\n      }\r\n\r\n      let grouping = this.props.currControlGrouping ? this.props.currControlGrouping : [this.props.data.dataProps.categories];\r\n\r\n      return this.renderChartContentsUngroupedData(\r\n        this.props.apiData.data, \r\n        grouping, \r\n        this.props.data.dataProps.seriesName,\r\n        this.props.data.dataProps.aggregation)\r\n    }\r\n    else {\r\n      // Show sample data\r\n      return renderChartContents(true, null, null, sampleData, this.props.data.stacked);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(previousProps, previousState) {\r\n    // If the layout name changes, the constructor may not be called again (I think if the ID did not change).\r\n    // So we perform the updates here\r\n    if (previousProps.layoutName !== this.props.layoutName) {\r\n      let initialGroupingVal = this.props.data.dataProps? this.props.data.dataProps.categories : null;\r\n      this.setState({\r\n        groupingBoundVal: initialGroupingVal\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let classNames = 'reChartContainer';\r\n    if (this.props.selected === true) {\r\n        classNames += ' ctrl-selected'\r\n    }\r\n\r\n    return (\r\n      <div className={classNames}>\r\n        <div className=\"controlLabel\">{this.props.data.label}</div>\r\n        <div>\r\n          {!this.props.designMode && this.props.data.dataProps && this.props.metadata && <TreeDropdown \r\n            //treeData={convertGroupingToTreeDropOptions(this.props.dataProps.configedCategories)} \r\n            treeData={getMetadataDimTreeDropdownOptions(this.props.data.dataProps.categories, this.props.metadata)} \r\n            value={this.state.groupingBoundVal}\r\n            onSelect={this.onGroupSelect}\r\n            treeDefaultExpandAll\r\n          />}\r\n          {this.props.designMode && !this.props.dataProps && <TreeDropdown \r\n            treeData={sampleGroups} \r\n            value={sampleGroups[0].key}\r\n            treeDefaultExpandAll\r\n            disabled\r\n          />}                \r\n        </div>\r\n        <ResponsiveContainer width={\"100%\"} height=\"100%\">        \r\n        {this.getChartContents(this.props)}        \r\n        </ResponsiveContainer>\r\n      </div>);\r\n  }\r\n}\r\n\r\nexport const BarResponsiveData = noobControlHoc(BarResponsiveDataBase)\r\n\r\nexport default noobControlHoc(BarChartResponsive);\r\n\r\n// For Properties Panel\r\nexport const barProps = [\r\n  {\r\n    name: 'stacked', \r\n    propType: 'bool',\r\n  },\r\n  {\r\n    name: 'dataProps', \r\n    propType: 'section',\r\n  },\r\n  {\r\n    name: 'datasetId', \r\n    propType: 'number',\r\n  },\r\n  {\r\n    name: 'requestType', \r\n    propType: 'metadata',\r\n    metadataField: 'requestTypes',\r\n    metadataPropType: 'dropdown'\r\n  },\r\n  {\r\n    name: 'categories', \r\n    propType: 'metadata',\r\n    metadataField: 'dimensions',\r\n    metadataPropType: 'treeDropdown'\r\n  },\r\n  {\r\n    name: 'seriesName', \r\n    propType: 'metadata',\r\n    metadataField: 'dimensions',\r\n    metadataPropType: 'treeDropdown'\r\n  },\r\n  {\r\n    name: 'aggregation', \r\n    propType: 'metadata',\r\n    metadataField: null,\r\n    metadataPropType: 'textbox',\r\n    toolTip: 'Only count is supported in this version',\r\n    readOnly: true\r\n  },\r\n\r\n];","import React, { Fragment, useRef, useState, useEffect } from 'react';\r\nimport './lineChart.css';\r\nimport './rechartsCommon.css';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport {LineChart as RechartLineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer} from 'recharts';\r\nimport {getUniqueValues} from '../helper/chartHelper';\r\n\r\nconst sampleData = [\r\n  {name: 'Category A', Series1: 5.5, },\r\n  {name: 'Category B', Series1: 3.5, },\r\n  {name: 'Category C', Series1: 9.8, },\r\n  {name: 'Category D', Series1: 7.7, },\r\n];\r\n\r\nconst CustomizedLabel = (props) => {\r\n  const {x, y, stroke, value} = props;\r\n\t\t\r\n  return <text x={x} y={y} dy={-10} fill={stroke} fontSize={14} textAnchor=\"middle\">{value}</text>\r\n}\r\n\r\nconst CustomizedAxisTick = (props) => {\r\n  const {x, y, stroke, payload, category} = props;\r\n  let textVal = payload.value;\r\n  \r\n  if (category === 'Day') {\r\n    let dateParsed = Date.parse(payload.value);\r\n    if (!!dateParsed) {\r\n      let dateObj = new Date(dateParsed);      \r\n      if (!!dateObj) {\r\n        textVal = dateObj.toLocaleDateString();\r\n      }\r\n    }\r\n  }\r\n\t\t\r\n  return (\r\n    <g transform={`translate(${x},${y})`}>\r\n      <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">{textVal}</text>\r\n    </g>\r\n  );\r\n}\r\n\r\n// For now, just support 1 series\r\n// import this class if not in design mode\r\nexport const LineChartBase = (props) => {\r\n\r\n  const reformatLineChartData = (apiData) => {\r\n    // Input:\r\n    // {Day: \"2020-01-01\", Alarm Type: \"Out of Spec\", value: 50}\r\n    // {Day: \"2020-01-01\", Alarm Type: \"Normal\", value: 10}\r\n    // Output:\r\n    // {Day: \"2020-01-01\", Out of Spec: 50, Normal: 10}\r\n\r\n    let retList = [];\r\n    let categories = props.data.dataProps.categories; // e.g. Day\r\n    let seriesName = props.data.dataProps.seriesName; // e.g. Alarm Type\r\n\r\n    for (let i = 0; i < apiData.length; i++) {\r\n      let currData = apiData[i];\r\n      let currCategoryVal = currData[categories];\r\n      let currSeriesName = currData[seriesName];\r\n      let currSeriesVal = currData.value;\r\n      let findRetList = retList.find(r => r[categories] === currCategoryVal);\r\n      if (!findRetList) {\r\n        findRetList = {\r\n          [categories]: currCategoryVal\r\n        }\r\n        retList.push(findRetList);\r\n      }\r\n\r\n      findRetList[currSeriesName] = currSeriesVal;\r\n    }\r\n\r\n    return retList;\r\n  }\r\n\r\n  // Recharts has a bug during printing / saving to PDF\r\n  // Do not use the ResponsiveContainer during printing\r\n  const renderLineChartContainer = () => {\r\n    if (props.reportMode) {\r\n      return renderLineChartContents();\r\n    }\r\n    else {\r\n      return <ResponsiveContainer width={\"100%\"} height=\"100%\">\r\n        {renderLineChartContents()}\r\n      </ResponsiveContainer>\r\n    }\r\n  }\r\n\r\n  const renderLineChartContents = () => {\r\n    // the height and width are just overridden when placed inside a ReponsiveContainer\r\n    return (\r\n      <RechartLineChart data={dataToUse}\r\n      margin={{top: 20, right: 30, left: 0, bottom: 25}}\r\n      height={myState.height}\r\n      width={myState.width}\r\n      >\r\n\r\n        <CartesianGrid strokeDasharray=\"3 3\"/>\r\n        <XAxis dataKey={category} height={60} tick={<CustomizedAxisTick category={category}/>} padding={{ left: 50 }} interval={0}/>\r\n        <YAxis unit={props.data.unit}/>\r\n        <Tooltip/>\r\n        <Legend />\r\n        <Line \r\n          type=\"monotone\" \r\n          dataKey={seriesName}\r\n          stroke=\"blue\" \r\n          label={<CustomizedLabel stroke=\"blue\"/>}\r\n          dot={{ stroke: 'blue', strokeWidth: 10 }}\r\n          animationDuration={500}/>\r\n      </RechartLineChart>\r\n    );\r\n  }\r\n\r\n  const chartContainerEl = useRef();\r\n  const [myState, setMyState] = useState({\r\n    height: 0,\r\n    width: 0\r\n  });\r\n\r\nuseEffect(() => {\r\n    console.log('[DEBUG] useEffect gauge', chartContainerEl);\r\n    if (!chartContainerEl || !chartContainerEl.current || !chartContainerEl.current.getClientRects()) {\r\n      return;\r\n    }\r\n    let rect = chartContainerEl.current.getClientRects()[0]\r\n    if (!rect) {\r\n        return;\r\n    }\r\n    setMyState({\r\n      height: rect.height,\r\n      width: rect.width\r\n    })\r\n    \r\n}, []);\r\n  \r\n  let isAnimationActive = props.designMode ? true : false;  \r\n  let seriesName = props.designMode ? \"Series1\": props.data.dataProps.seriesName;\r\n  let category = props.designMode ? \"name\": props.data.dataProps.categories;\r\n  let dataToUse = [];\r\n  if (props.designMode) {\r\n    dataToUse = sampleData;\r\n  }\r\n  else if (!!props.apiData) {\r\n    debugger\r\n    dataToUse = reformatLineChartData(props.apiData.data)\r\n    let allUniqeSeriesVals = getUniqueValues(props.apiData.data, props.data.dataProps.seriesName);\r\n    if (Array.isArray(allUniqeSeriesVals) && allUniqeSeriesVals.length>0) {\r\n      seriesName = allUniqeSeriesVals[0]; // for POC, we assume only 1 series\r\n    }\r\n  }\r\n\r\n  debugger\r\n  console.log('linechart render', dataToUse);\r\n\r\n  let classNames = 'reChartContainer '; \r\n  if (props.selected) {\r\n    classNames += 'ctrl-selected';\r\n  }\r\n\r\n  return (<div className={classNames} ref={chartContainerEl}>\r\n    <div className=\"controlLabel\">{props.data.label}</div>    \r\n      {renderLineChartContainer()} \r\n    </div>\r\n  );\r\n}\r\n\r\n// import this if Design Mode\r\nexport default noobControlHoc(LineChartBase);\r\n\r\n\r\n// For Properties Panel\r\nexport const lineProps = [\r\n  {\r\n    name: 'dataProps', \r\n    propType: 'section',\r\n  },\r\n  {\r\n    name: 'datasetId', \r\n    propType: 'number',\r\n  },\r\n  {\r\n    name: 'requestType', \r\n    propType: 'metadata',\r\n    metadataField: 'requestTypes',\r\n    metadataPropType: 'dropdown'\r\n  },\r\n  {\r\n    name: 'categories', \r\n    propType: 'metadata',\r\n    metadataField: 'dimensions',\r\n    metadataPropType: 'treeDropdown'\r\n  },\r\n  {\r\n    name: 'seriesName', \r\n    propType: 'metadata',\r\n    metadataField: 'dimensions',\r\n    metadataPropType: 'treeDropdown'\r\n  },\r\n  {\r\n    name: 'filterName', \r\n    propType: 'metadata',\r\n    metadataField: 'dimensions',\r\n    metadataPropType: 'treeDropdown'\r\n  },\r\n\r\n]","import React, {useRef, useState, useEffect} from 'react';\r\nimport { Sector, Cell, PieChart, Pie, ResponsiveContainer, Legend } from 'recharts';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport './rechartsCommon.css';\r\n\r\nconst GaugeChart = (props) => {\r\n    console.log('[DEBUG] render GaugeChart', props);    \r\n    const width = parseInt(props.maxWidth)? parseInt(props.maxWidth) : 300;\r\n    const chartValue = props.apiData && Array.isArray(props.apiData.data) && props.apiData.data.length > 0 ? \r\n                        parseFloat(props.apiData.data[0].value) : 0;\r\n    let unit = \"%\";\r\n    const colorData = [{\r\n            value: 20, // Meaning span is 0 to 20\r\n            color: '#e71837' // 'red' pastel\r\n        }, {\r\n            value: 60, // span 20 to 80\r\n            color: '#fce903' // 'gold pastel'\r\n        }, {\r\n            value: 20, // span 80 to 100\r\n            color: '#106b21' // 'green' pastel\r\n        }\r\n    ];\r\n\r\n    const activeSectorIndex = colorData.map((cur, index, arr) => {\r\n        const curMax = [...arr]\r\n            .splice(0, index + 1)\r\n            .reduce((a, b) => ({ value: a.value + b.value }))\r\n            .value;\r\n        return (chartValue > (curMax - cur.value)) && (chartValue <= curMax);\r\n    })\r\n    .findIndex(cur => cur);\r\n\r\n    const sumValues = colorData\r\n        .map(cur => cur.value)\r\n        .reduce((a, b) => a + b);\r\n\r\n    const arrowData = [\r\n        { value: chartValue },\r\n        { value: 0 },\r\n        { value: sumValues - chartValue }\r\n    ];\r\n\r\n    const pieProps = {\r\n        startAngle: 180,\r\n        endAngle: 0,\r\n        cx: '50%',\r\n        //cy: width / 2\r\n        cy: props.data.label && props.data.label.length > 0 ? '55%' : '65%'\r\n        //cy: '50%'\r\n    };\r\n\r\n    const pieRadius = {\r\n        // innerRadius: (width / 2) * 0.35,\r\n        // outerRadius: (width / 2) * 0.4\r\n        // innerRadius: (width / 4) + width / 16 - 10 - width / 36,\r\n        // outerRadius: (width / 4) + width / 16 - 10\r\n        innerRadius: '90%',\r\n        outerRadius: '100%'\r\n    };\r\n\r\n    const Arrow = ({ cx, cy, midAngle, outerRadius }) => { //eslint-disable-line react/no-multi-comp\r\n        const RADIAN = Math.PI / 180;\r\n        const sin = Math.sin(-RADIAN * midAngle);\r\n        const cos = Math.cos(-RADIAN * midAngle);\r\n        // const mx = cx + (outerRadius + width * 0.03) * cos;\r\n        // const my = cy + (outerRadius + width * 0.03) * sin;\r\n        const mx = cx + (outerRadius) * cos;\r\n        const my = cy + (outerRadius) * sin;\r\n        return (\r\n            <g>\r\n                <circle cx={cx} cy={cy} r={width * 0.03} fill=\"#666\" stroke=\"none\"/>\r\n                <path d={`M${cx},${cy}L${mx},${my}`} strokeWidth=\"6\" stroke=\"#666\" fill=\"none\" strokeLinecap=\"round\"/>\r\n                <text x={cx} y={cy + width/8 } textAnchor=\"middle\" fontSize={width / 13}>{chartValue}{unit}</text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    const ActiveSectorMark = ({ cx, cy, innerRadius, outerRadius, startAngle, endAngle, fill }) => { //eslint-disable-line react/no-multi-comp\r\n        return (\r\n            <g>\r\n                <Sector\r\n                    cx={cx}\r\n                    cy={cy}\r\n                    innerRadius={innerRadius}\r\n                    outerRadius={outerRadius * 1.0}\r\n                    startAngle={startAngle}\r\n                    endAngle={endAngle}\r\n                    fill={fill}\r\n                />\r\n            </g>\r\n        );\r\n    };\r\n\r\n    // Draws the \"plate\" part of the page (the semicircle part)\r\n    const renderGaugePlate = () => {\r\n        return <Pie\r\n        activeIndex={activeSectorIndex}\r\n        activeShape={ActiveSectorMark}\r\n        data={colorData}\r\n        fill=\"#8884d8\"\r\n        isAnimationActive={false}\r\n        dataKey=\"value\"\r\n        { ...pieRadius }\r\n        { ...pieProps }\r\n    >\r\n        {\r\n            colorData.map((entry, index) => (\r\n                <Cell key={`cell-${index}`} fill={colorData[index].color} />\r\n            ))\r\n        }\r\n        </Pie>\r\n    }\r\n\r\n    // Draws the needle of the gauge\r\n    const renderGaugeNeedle = () => {\r\n        return <Pie\r\n            stroke=\"none\"\r\n            activeIndex={1}\r\n            activeShape={ Arrow }\r\n            data={ arrowData }\r\n            outerRadius={ pieRadius.outerRadius }\r\n            fill=\"none\"\r\n            dataKey=\"value\"\r\n            isAnimationActive={false}\r\n            { ...pieProps }\r\n        />\r\n    }\r\n\r\n    // Recharts has a bug during printing / saving to PDF\r\n    // Do not use the ResponsiveContainer during printing\r\n    const renderGaugeChartArea = () => {\r\n        if (props.reportMode) {\r\n            return <PieChart margin={{top: 0, right: 0, left: 0, bottom: 0}}\r\n                height={myState.height}\r\n                width={myState.width}\r\n            >\r\n                    {renderGaugePlate()}\r\n                    {renderGaugeNeedle()}\r\n                </PieChart>;\r\n        }\r\n        else {\r\n            return <ResponsiveContainer  width=\"100%\" height=\"100%\" >\r\n                <PieChart margin={{top: 0, right: 0, left: 0, bottom: 0}}\r\n                >\r\n                    {renderGaugePlate()}\r\n                    {renderGaugeNeedle()}\r\n                </PieChart>\r\n            </ResponsiveContainer>\r\n        }\r\n    }\r\n\r\n    let classNames = 'reChartContainer '; \r\n    if (props.selected) {\r\n      classNames += 'ctrl-selected';\r\n    }\r\n\r\n    const chartContainerEl = useRef();\r\n    const [myState, setMyState] = useState({\r\n        height: 0,\r\n        width: 0\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log('[DEBUG] useEffect gauge', chartContainerEl);\r\n        if (!chartContainerEl || !chartContainerEl.current || !chartContainerEl.current.getClientRects()) {\r\n          return;\r\n        }\r\n        let rect = chartContainerEl.current.getClientRects()[0]\r\n        if (!rect) {\r\n            return;\r\n        }\r\n        setMyState({\r\n          height: rect.height,\r\n          width: rect.width\r\n        })\r\n        \r\n    }, []);\r\n\r\n    return (<div className={classNames} ref={chartContainerEl}>\r\n        {props.data.label && props.data.label.length > 0 && <div className=\"controlLabel\">{props.data.label}</div>}\r\n        {renderGaugeChartArea()}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default noobControlHoc(GaugeChart);\r\n\r\n\r\n// Properties Panel Portion\r\nexport const gaugeProps = [\r\n    {\r\n      name: 'dataProps', \r\n      propType: 'section',\r\n    },\r\n    {\r\n      name: 'datasetId', \r\n      propType: 'number',\r\n      toolTip: 'Put the same datasetId for all controls that are linked. When a filter is applied in one control, other linked controls will also be filtered.'\r\n    },\r\n    {\r\n      name: 'requestType', \r\n      propType: 'metadata',\r\n      metadataField: 'requestTypes',\r\n      metadataPropType: 'dropdown'\r\n    },\r\n    {\r\n      name: 'groupings', \r\n      propType: 'metadata',\r\n      metadataField: 'dimensions',\r\n      metadataPropType: 'treeDropdown',\r\n      multiple: true\r\n    },\r\n    {\r\n        name: 'filtersList', \r\n        propType: 'dynamicFilter',\r\n        metadataField: 'dimensions', // Infer metadata field if it is a dynamicFilter\r\n        metadataPropType: 'treeDropdown',\r\n        multiple: true,\r\n        toolTip: \"Select one or more filters by clicking the Add Parameter button\"\r\n      },\r\n    ];","import React from 'react';\r\nimport '../controls/common.css';\r\nimport './gauge.css'\r\nimport {ResponsiveContainer} from 'recharts';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport GaugeChart from 'react-gauge-chart';\r\n\r\nconst Gauge = (props) => {\r\n    console.log('gauge render', props.h);\r\n    let classNames = 'gauge';\r\n    if (props.selected === true) {\r\n        classNames += ' ctrl-selected'\r\n    }\r\n\r\n    // Bug: This chart does not respect the height; only the width\r\n    return <div className={classNames}>\r\n        <div className=\"controlLabel\">{props.data.label}</div>\r\n        <ResponsiveContainer  width=\"100%\" height=\"90%\">\r\n            <GaugeChart id={props.i}\r\n            nrOfLevels={20} \r\n            percent={props.data.percent} \r\n            textColor={\"black\"}\r\n            colors={['red', 'gold', 'green']}\r\n            marginInPercent={0.055}\r\n            style={{width: '100%'}}\r\n            />\r\n        </ResponsiveContainer>\r\n\r\n    </div>\r\n}\r\nexport default noobControlHoc(Gauge);","import React, { Component } from 'react';\r\nimport './noobForm.css';\r\nimport NoobControl from './noobControl';\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\nimport { updateLayout } from '../actions/index';\r\nimport {ControlDragTypes} from './noobControlContent';\r\nimport { WIDTH_LARGE } from '../constants';\r\n\r\nconst ROW_HEIGHT = 50;\r\nconst CONTROL_PADDING = 20;\r\nconst GRID_GAP = 5;\r\n\r\n// CSS Grid based layout editor, instead of using react-grid-layout\r\n// problems with RGL:\r\n// [1] combobox multiselect: Griditem size does not expand based on the child content's size\r\n// [2] if {useCssTransform = true}, there will be overlap problems with the combobox dropdown.\r\n//     side effect of setting it to false is that drag and drop becomes unpredictable with Drag-from-outside\r\n// But of course, there are many good features in RGL that might be difficult to recreate:\r\n// [1] Animations, on-the fly preview\r\n//      - might not be feasible with CSS Grid/current design. Anyways, this is just cosmetic.\r\n// [2] Auto-arrange elements on DnD\r\n// [3] Opaque Drag image. RGL's Drag image looks very nice because the Drag Image is 100% Opaque\r\n//     In Chrome, Native DnD from HTML5 looks weird as it is semi-transparent with some gradient\r\n//     In Edge, the drag image also looks different.\r\n//  => React DnD Supports \"Custom Drag Layer\"...TODO: Experiment on this. From the examples, this also works on touch backend.\r\n//  => This way, the drag previews will be consistent across all browsers.\r\n\r\n// use destructuring to capture all the properties passed from upper component\r\n//const NoobForm = ({containerWidth, controls, layoutProps, eventCallbacks}) => {\r\nclass NoobForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // Possible optimization: save all the DOM elements of the controls to the state\r\n            // Because while resizing, there is a need to find all control Id's using DOM query\r\n            // Maybe get a fresh copy of all DOM elements during mousedown of the resizer\r\n            resizingControlId: null,        \r\n        };\r\n        this.onMouseLeave = this.onMouseLeave.bind(this);\r\n        this.onMouseMove = this.onMouseMove.bind(this);\r\n        this.onResizerMouseDown = this.onResizerMouseDown.bind(this);\r\n        this.onMouseUp = this.onMouseUp.bind(this);\r\n        this.onDropControl = this.onDropControl.bind(this);\r\n        this.checkDroppable = this.checkDroppable.bind(this);\r\n    }\r\n\r\n    // for handling resizing operations\r\n    onMouseMove(e, controlIds) {\r\n        if (this.state.resizingControlId == null) {\r\n            return;\r\n        }\r\n\r\n        // [1] Find the DOM Control via document query\r\n        let domControl = this.findControlDomById(this.state.resizingControlId);\r\n        if (domControl === null) {\r\n            return;\r\n        }\r\n\r\n\r\n        let rectContainer = domControl.container.getClientRects()[0];\r\n\r\n        let yDelta = !!e.touches ? e.touches[0].clientY - rectContainer.bottom: e.clientY - rectContainer.bottom;\r\n        let xDelta = !!e.touches ? e.touches[0].clientX - rectContainer.right : e.clientX - rectContainer.right;\r\n\r\n        if (!domControl.container.classList.contains('resizingControl')) {\r\n            domControl.container.classList.add('resizingControl');\r\n            domControl.content.classList.add('resizingContent');\r\n        }   \r\n\r\n        domControl.placeholder.style.height = `${this.state.origHeight - 2}px`;\r\n        domControl.placeholder.style.width = `${this.state.origWidth - 2}px`;\r\n        //debugger\r\n        // console.log('onMouseMove....', this.state.origHeight);\r\n\r\n        //console.log('MouseMove/TouchMove', yDelta, xDelta);\r\n\r\n        // [2] Set the new width and height based on the mouse position\r\n        domControl.content.style.width = `${rectContainer.width + xDelta}px`;\r\n        domControl.content.style.height = `${rectContainer.height + yDelta}px`;\r\n\r\n        let rectResizing = domControl.content.getClientRects()[0];\r\n\r\n        // [3] Check overlaps with other controls - highlight them\r\n        this.checkOverlaps(this.state.resizingControlId, rectResizing, controlIds); // overlap with other controls\r\n\r\n        // [4] Check overlaps with landing pad - highlight them\r\n        this.checkLandingPadOverlap(this.state.resizingControlId, rectContainer, rectResizing);\r\n\r\n    }\r\n\r\n    // While resizing a big control (width/height > 1), its internal landing pads will be displayed as visual cue for the user.\r\n    // If the control is resized smaller during dragging, only the landing pads that are covered ny the mouse position will be highlighted\r\n    checkLandingPadOverlap(resizingControlId, rectContainer, rectResizing) {\r\n        // will only take effect if the resizing rect's height or width is smaller than the container\r\n        // if (rectContainer.width <= rectResizing.width && \r\n        //     rectContainer.height <= rectResizing.height) {\r\n        //         this.removeAllLandingPadPotentialDrops();\r\n        //         return;\r\n        // }    \r\n        \r\n        let landingPadsDom = this.findLandingPadsByParentControl(resizingControlId);\r\n        //console.log('[DEBUG] checkLandingPadOverlap...' + landingPadsDom.length);\r\n        // check if resizing rect covers me\r\n        landingPadsDom.forEach(landingPad => {\r\n            let rectLandingPad = landingPad.getClientRects()[0];\r\n            let isOverlapped = this.hasOverlap(rectResizing, rectLandingPad);\r\n            if (isOverlapped) {\r\n                landingPad.classList.add('landingPadPotentialDrop');\r\n            }\r\n            else if (landingPad.classList.contains('landingPadPotentialDrop')) {\r\n                landingPad.classList.remove('landingPadPotentialDrop');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Maybe no need to call this.\r\n    // Since the landing pad elements are only rendered if there is a resizing element\r\n    removeAllLandingPadPotentialDrops() {\r\n        // TODO: don't search the entire document. Supply the designer root element only\r\n        let landingPadPotDrops = document.getElementsByClassName('landingPadPotentialDrop');\r\n        if (landingPadPotDrops.length > 0) {\r\n            // console.log('[DEBUG] removeAllLandingPadPotentialDrops' + landingPadPotDrops.length);\r\n        }\r\n    \r\n        while (landingPadPotDrops.length > 0) {\r\n            let currPad = landingPadPotDrops[0];\r\n            currPad.classList.remove('landingPadPotentialDrop');\r\n        }\r\n    }\r\n\r\n    findLandingPadsByParentControl(controlId) {\r\n        // TODO: don't search the entire document. Supply the designer root element only\r\n        let ret = {};\r\n        let keyQuery = `[parentctrlid=\"ctrl${controlId}\"]`;\r\n        return document.querySelectorAll(keyQuery);\r\n    }\r\n\r\n    // bFindall: true to find all; false to return just the first one\r\n    // findControlByClassName(rootElem, strClass) {\r\n    //     if (!rootElem || !strClass) {\r\n    //         return null;\r\n    //     }\r\n\r\n    //     return rootElem.getElementsByClassName(strClass);\r\n    // }\r\n\r\n    // also works\r\n    hasOverlapComplicated(rect1, rect2) {\r\n\r\n        //There are less scenarios for no collision so use this instead of checking for collision\r\n        let noHorzCollision = rect2.right < rect1.left || rect2.left > rect1.right;\r\n        let noVertCollision = rect2.bot < rect1.top || rect2.top > rect1.bottom;\r\n\r\n        console.log(`   [DEBUG] NoHorz: ${noHorzCollision}, NoVert: ${noVertCollision}, FINAL: ${noHorzCollision || noVertCollision}`);\r\n        // There is overlap if there is Vertical AND Horizontal collision\r\n        return !noHorzCollision && !noVertCollision;\r\n    }\r\n\r\n    // simpler\r\n    hasOverlap(rect1, rect2) {\r\n        // if one rect is on the left side of the other rect\r\n        if (rect2.right < rect1.left || rect2.left > rect1.right) {\r\n            //console.log(\"   [hasOverlap] No horz overlap\");\r\n            return false;\r\n        }\r\n\r\n        // if one rect is on top of the other\r\n        if (rect2.bottom < rect1.top || rect2.top > rect1.bottom) {\r\n            //console.log(\"   [hasOverlap] No vertical overlap\");\r\n            return false;\r\n        }\r\n\r\n        //console.log(\"   [hasOverlap] has overlap\");\r\n        return true;\r\n    }\r\n\r\n    // Edge overlap is not considered overlap\r\n    hasOverlapStrict(rect1, rect2) {\r\n        // if one rect is on the left side of the other rect\r\n        if (rect2.right <= rect1.left || rect2.left >= rect1.right) {\r\n            //console.log(\"   [hasOverlap] No horz overlap\");\r\n            return false;\r\n        }\r\n\r\n        // if one rect is on top of the other\r\n        if (rect2.bottom <= rect1.top || rect2.top >= rect1.bottom) {\r\n            //console.log(\"   [hasOverlap] No vertical overlap\");\r\n            return false;\r\n        }\r\n\r\n        //console.log(\"   [hasOverlap] has overlap\");\r\n        return true;\r\n    }\r\n    \r\n    // While resizing the control, if it overlaps with other controls,\r\n    // those controls will be highlighted as potential landing spots.\r\n    checkOverlaps(resizingControlId, rectResizing, controlIds) {\r\n        //console.log(`[DEBUG][checkOverlaps][${resizingControlId}][L-R: ${rectResizing.left} - ${rectResizing.right}][T-B: ${rectResizing.top} - ${rectResizing.bottom}]`);\r\n        var foundInvalid = false;\r\n        var overlapsFound = [];\r\n        controlIds.forEach((controlId) => {       \r\n            if (resizingControlId === controlId) {\r\n                return; // continue\r\n            }\r\n            let domControl = this.findControlDomById(controlId);\r\n            if (domControl === null) {\r\n                return;\r\n            }\r\n    \r\n            let rectContainer = domControl.container.getClientRects()[0];\r\n            \r\n            //console.log(`[DEBUG][${controlId}][L-R: ${rectContainer.left} - ${rectContainer.right}][T-B: ${rectContainer.top} - ${rectContainer.bottom}]`);\r\n            let isOverlap = this.hasOverlap(rectResizing, rectContainer);\r\n            if (isOverlap) {\r\n                domControl.container.classList.add('potentialResizeDrop');\r\n                overlapsFound.push(domControl);\r\n                // Check if it's an invalid overalp (non empty control)\r\n                if (!!domControl.container.dataset.controltype || \r\n                    parseInt(domControl.container.dataset.layoutw) > 1 ||\r\n                    parseInt(domControl.container.dataset.layouth) > 1) {\r\n                    foundInvalid = true;\r\n                }\r\n            }\r\n            else if (domControl.container.classList.contains('potentialResizeDrop')) {    \r\n                domControl.container.classList.remove('potentialResizeDrop');\r\n                domControl.container.classList.remove('potentialResizeDrop-invalid');\r\n            }                    \r\n        } );\r\n\r\n        // console.log(\"Overlaps found: \", overlapsFound.length);\r\n        // If there is an invalid drop target, mark all potential drops as invalid\r\n        if (foundInvalid) {\r\n            overlapsFound.forEach(dom => {\r\n                dom.container.classList.add('potentialResizeDrop-invalid');\r\n            })\r\n        }\r\n        else {\r\n            overlapsFound.forEach(dom => {\r\n                dom.container.classList.remove('potentialResizeDrop-invalid');\r\n            })\r\n        }\r\n    }\r\n\r\n    onMouseLeave(event, controlIds) {\r\n        if (this.state.resizingControlId) {\r\n            console.log('onMouseLeave while resizing');\r\n            this.clearAllTemporaryClasses(controlIds);\r\n            this.setState({\r\n                resizingControlId: null,\r\n                // Will be set to the original height of the container at the start of resize operation\r\n                origHeight: null,\r\n                origWidth: null\r\n            });    \r\n        }\r\n    }\r\n\r\n    onResizerMouseDown(event, controlId) {\r\n        console.log('mouse down resizer...', controlId, event);\r\n        let domResizing = this.findControlDomById(controlId);\r\n        // Note: setState will cause the entire form and all the controls to rerender\r\n        this.setState({\r\n            resizingControlId: controlId,\r\n            origHeight: domResizing.container.getClientRects()[0].height,\r\n            origWidth: domResizing.container.getClientRects()[0].width,\r\n        });    \r\n    }\r\n\r\n    // Revert all class changes done during drag operation for resize\r\n    clearAllTemporaryClasses(controlIds) {\r\n        controlIds.forEach( currCtrlId => {\r\n            let domControl = this.findControlDomById(currCtrlId);\r\n            if (domControl === null) {\r\n                return;\r\n            }\r\n    \r\n            domControl.container.classList.remove('potentialResizeDrop');\r\n            domControl.container.classList.remove('potentialResizeDrop-invalid');\r\n            domControl.container.classList.remove('controlPotentialDrop');\r\n    \r\n            if (currCtrlId === this.state.resizingControlId) {\r\n                domControl.container.classList.remove('resizingControl');\r\n                domControl.content.classList.remove('resizingContent');\r\n                domControl.content.style.height = domControl.container.style.height;\r\n                domControl.content.style.width = domControl.container.style.width;    \r\n            }\r\n\r\n            domControl.placeholder.style.height = null;\r\n            domControl.placeholder.style.width = null;\r\n        });\r\n    }\r\n\r\n    // For handling resize only\r\n    onMouseUp(event, controlIds) {\r\n        if (!this.state.resizingControlId) {\r\n            this.clearAllTemporaryClasses(controlIds);\r\n            return;\r\n        }\r\n        console.log('mouseup while resizing');\r\n\r\n        // Calling setState will re-render all the controls\r\n        // But during re-render, if we manually added some classes to the DOM elements, they will still be there during rerender\r\n        // So we still to manually remove all the temprary class names we added during dragging\r\n        //this.removeAllLandingPadPotentialDrops();\r\n\r\n        // if there is an overlap with a nonempty control, do not allow it!\r\n        let formElem = document.getElementById(\"noobForm\");\r\n        let hasInvalidOverlaps = formElem.getElementsByClassName('potentialResizeDrop-invalid').length > 0;\r\n        if (hasInvalidOverlaps) {\r\n            console.log('hasInvalidOverlaps...cancelling resize operation');\r\n            this.clearAllTemporaryClasses(controlIds);\r\n            this.setState({\r\n                resizingControlId: null\r\n            });\r\n            return;\r\n        }\r\n\r\n        let newSize = this.calculateNewSize(this.state.resizingControlId);\r\n\r\n        this.clearAllTemporaryClasses(controlIds);\r\n        this.setState({\r\n            resizingControlId: null\r\n        });\r\n\r\n        // Do this check only after calling clearAllTemporaryClasses() because that is essential regardless if we resize or not\r\n        if (!newSize) {\r\n            return;\r\n        }\r\n\r\n        // Fire an action to let the redux store know that a control has been resized\r\n        let resizedControlPojo = this.findControlPojo(this.state.resizingControlId);\r\n        if (resizedControlPojo) {\r\n            resizedControlPojo.w = newSize.w;\r\n            resizedControlPojo.h = newSize.h;   \r\n            this.props.updateLayout([resizedControlPojo]); \r\n        }\r\n        else {\r\n            // it's an empty control...create and empty control with new dimension\r\n            let controlDom = document.getElementById('ctrl'+this.state.resizingControlId);\r\n            this.props.updateLayout([{\r\n                i: this.state.resizingControlId,\r\n                x: parseInt(controlDom.dataset.layoutx),\r\n                y: parseInt(controlDom.dataset.layouty),\r\n                w: newSize.w,\r\n                h: newSize.h\r\n            }]);\r\n        }\r\n        \r\n    }\r\n\r\n    findControlPojo(controlId) {\r\n        if (!this || !this.props || !this.props.controls) {            \r\n            console.log(\"findControlPojo: props is empty\");\r\n            return null;\r\n        }\r\n\r\n        let findControl = this.props.controls.find(control => control.i === controlId);\r\n        if (!findControl) {\r\n            console.log(\"findControlPojo: did not find the control with ID\", controlId); // just log it\r\n        }\r\n\r\n        return findControl;\r\n    }\r\n\r\n    // For resizing\r\n    findPotentialDrops() {\r\n        let retList = [];\r\n        // Edge does not support spread/rest operator on DOM list, so use Array.from\r\n        // retList.push(...document.getElementsByClassName(\"potentialResizeDrop\"));\r\n        // retList.push(...document.getElementsByClassName(\"landingPadPotentialDrop\"));\r\n        retList.push(...Array.from(document.getElementsByClassName(\"potentialResizeDrop\")));\r\n        retList.push(...Array.from(document.getElementsByClassName(\"landingPadPotentialDrop\")));\r\n        return retList;\r\n    }\r\n\r\n    calculateNewSize(resizingControlId) {\r\n        // check how many of the controls have the 'potentialResizeDrop' class in their DOM\r\n        if (resizingControlId === null) {\r\n            return null;\r\n        }\r\n        \r\n        console.log('[DEBUG][calculateNewSize]' + resizingControlId);\r\n    \r\n        let resizedControlDom = this.findControlDomById(resizingControlId);\r\n    \r\n        let domControls = this.findPotentialDrops();\r\n        if (!domControls || !resizedControlDom || domControls.length === 0) {\r\n            console.log('[DEBUG][calculateNewSize] Cannot find potential drops. Maybe the control was not resized');\r\n            return null; // means control was not resized\r\n        }\r\n        \r\n        let maxX = 0;\r\n        let maxY = 0;\r\n            \r\n        for (let i = 0; i < domControls.length; i++) {\r\n            let currControl = domControls[i];\r\n            let currX = parseInt(currControl.dataset.layoutx);\r\n            let currY = parseInt(currControl.dataset.layouty);\r\n            if (currX && currX > maxX) {\r\n                maxX = currX;\r\n            }\r\n            if (currY && currY > maxY) {\r\n                maxY = currY;\r\n            }\r\n        };\r\n    \r\n        return {\r\n            // no need to include rowspan. There is a validation that we can only resize (even if it's blank) if control is 1x1\r\n            w: maxX - resizedControlDom.container.dataset.layoutx + 1,\r\n            h: maxY - resizedControlDom.container.dataset.layouty + 1,\r\n        }    \r\n    }\r\n    \r\n\r\n    findControlDomById(controlId) {\r\n        let ret = {};\r\n        let keyQuery = `[id=\"ctrl${controlId}\"]`;\r\n        let retEl = document.querySelectorAll(keyQuery);\r\n        if (retEl.length !== 1) {\r\n            return null;\r\n        }\r\n    \r\n        ret.container = retEl[0];\r\n        ret.landingPad = ret.container.firstChild;\r\n        ret.content = ret.landingPad.nextSibling;\r\n        ret.placeholder = ret.content.nextSibling;\r\n        ret.resizer = ret.placeholder.nextSibling;\r\n        \r\n            \r\n        return ret;    \r\n    }\r\n\r\n    createEmptyControl(inX, inY, id) {\r\n        // Return a 1x1 control\r\n        return {\r\n            w: 1,\r\n            h: 1,\r\n            i: id,\r\n            x: inX,\r\n            y: inY\r\n        }        \r\n    }\r\n\r\n    checkDroppable(controlData, draggedItem, landingPadInfo) {\r\n        if (draggedItem.type == ControlDragTypes.CONTROL) {\r\n            if (landingPadInfo) {\r\n                return this.checkDroppableControlLandingPad(controlData, draggedItem, landingPadInfo);    \r\n            }\r\n            return this.checkDroppableControl(controlData, draggedItem);\r\n        }\r\n\r\n        return this.checkDroppableToolItem(controlData, draggedItem) \r\n    }\r\n\r\n    // This will highlight the following:\r\n    // * landing pads that are covered by the control being moved\r\n    // * neighbouring controls covered by the control being moved\r\n    // Return true or false, depending if there is sufficient space\r\n    checkDroppableControlLandingPad(droppedControl, draggedItem, landingPadInfo) {\r\n        // Actually draggedItem and droppedControl are just the same because landing pad is rendered\r\n        //console.log('checkDroppableControlLandingPad', droppedControl, draggedItem, landingPadInfo);\r\n        let retVal = true;\r\n\r\n        // [a] For the landing pads, actually just straightup highlight all landing pads that with x>= landingPadInfo.x and same for y\r\n        let landingPadX = landingPadInfo.layoutPos[\"data-layoutx\"]; // already adjusted to include control's x and y position\r\n        let landingPadY = landingPadInfo.layoutPos[\"data-layouty\"];\r\n        // debugger\r\n        let landingPadsAll = this.findLandingPadsByParentControl(droppedControl.i);\r\n        let landingPadsCovered = this.findCoveredLandingPads(landingPadsAll, landingPadX, landingPadY);\r\n\r\n        // [b] Find neighbouring empty controls to the right and bottom of the droppedControl\r\n        let controlsCovered = this.findCoveredControls(landingPadX, landingPadY, droppedControl);\r\n        if (controlsCovered.length === 0) {\r\n            // \r\n            retVal = false;\r\n        }\r\n\r\n\r\n        // [c] Perform the highlights\r\n        landingPadsAll.forEach(landingPad => {\r\n            if (landingPadsCovered.indexOf(landingPad) < 0) {\r\n                landingPad.classList.remove('landingPadPotentialDrop'); \r\n                landingPad.classList.remove('potentialResizeDrop-invalid'); \r\n            }\r\n            else {\r\n                // Mark all landing pads\r\n                if (retVal) {\r\n                    landingPad.classList.remove('potentialResizeDrop-invalid'); \r\n                    landingPad.classList.add('landingPadPotentialDrop'); \r\n                }\r\n                else {\r\n                    landingPad.classList.add('potentialResizeDrop-invalid'); \r\n                }                \r\n            }\r\n        });\r\n\r\n        controlsCovered.forEach(control => {\r\n            control.classList.add('controlPotentialDrop'); \r\n        });\r\n\r\n        // [d] Remove those that are no longer valid (highlighted green from previous call)\r\n        // Since this is not a JS Arr, use classic for-loop\r\n        let designerDom = document.getElementById('noobForm');\r\n        let potentialDropsAll = designerDom.getElementsByClassName('controlPotentialDrop');\r\n        this.removePreviousPotentialDrops(potentialDropsAll, controlsCovered);\r\n\r\n\r\n        return retVal;\r\n    }\r\n\r\n    // Neighbour controls that should be highligted while moving a control that overlaps with itself\r\n    findCoveredControls(landingPadX, landingPadY, controlData) {\r\n        let retList = [];\r\n        let deficitW = landingPadX - controlData.x;\r\n        let deficitH = landingPadY - controlData.y;\r\n        let designerDom = document.getElementById('noobForm');\r\n\r\n        // debugger\r\n        // Find all controls to the right\r\n        for (let x=0; x < deficitW; x++) {\r\n            for (let y=0; y < controlData.h; y++) {\r\n                let query = designerDom.querySelector(`div[data-layouty=\"${y + landingPadY}\"][data-layoutx=\"${x + controlData.w + controlData.x}\"]`);\r\n                if (!query || !!query.dataset.controltype) {\r\n                    return [];\r\n                }\r\n                retList.push(query);\r\n            }\r\n        }\r\n\r\n        // Find all controls to the bottom\r\n        for (let y=0; y < deficitH; y++) {\r\n            for (let x=0; x < controlData.w; x++) {\r\n                let query = designerDom.querySelector(`div[data-layouty=\"${y + controlData.h + controlData.y}\"][data-layoutx=\"${x + landingPadX}\"]`);\r\n                if (!query || !!query.dataset.controltype) {\r\n                    return [];\r\n                }\r\n                retList.push(query);\r\n            }\r\n        }\r\n        return retList;\r\n    }\r\n\r\n    // Landing pads that should be highligted while moving a control that overlaps with itself\r\n    findCoveredLandingPads(landingPadsAll, x, y) {\r\n        let retList = [];\r\n        for (let i = 0; i < landingPadsAll.length; i++) {\r\n            let currLandingPadDom = landingPadsAll[i];\r\n            if (currLandingPadDom.dataset.layoutx >= x && currLandingPadDom.dataset.layouty >= y) {\r\n                retList.push(currLandingPadDom);\r\n            }\r\n        }\r\n\r\n        return retList;\r\n    }\r\n\r\n    checkDroppableControl(controlData, draggedItem) {\r\n        // if dragged to itself, return false immediately.\r\n        // Do not allow dropping to same position. It's pointless and just a waste of processing.\r\n        if (controlData.i === draggedItem.i)  {\r\n            this.clearAllTemporaryClasses([controlData.i])\r\n            //console.log('checkDroppableControl, dragged to itself...return false', controlData);\r\n            return false;\r\n        }\r\n\r\n        //console.log('checkDroppableControl', controlData);\r\n\r\n        let retVal = true;\r\n        // If dragged to a different control of different dimension, do not allow\r\n        if (draggedItem.i !== controlData.i && !!controlData.ctrlType &&\r\n            (draggedItem.w !== controlData.w || draggedItem.h !== controlData.h)) {\r\n            retVal = false; // We just want to proceed removing the previous potential drops\r\n            console.log('checkDroppableControl: false agad', controlData.i);\r\n        }        \r\n\r\n        // if dragged to an empty space, make sure there is enough space\r\n        let potentialDropsNow = retVal ? this.getPotentialDropsForMoving(controlData, draggedItem) : []; \r\n        retVal = potentialDropsNow.length > 0;\r\n\r\n        // [2] Highlight the neighbours green\r\n        potentialDropsNow.forEach(dom => {dom.classList.add('controlPotentialDrop')})\r\n\r\n        // [3] Remove those that are no longer valid (highlighted green from previous call)\r\n        // Since this is not a JS Arr, use classic for-loop\r\n        let designerDom = document.getElementById('noobForm');\r\n        let potentialDropsPrevious = designerDom.getElementsByClassName('controlPotentialDrop');\r\n        this.removePreviousPotentialDrops(potentialDropsPrevious, potentialDropsNow);\r\n\r\n        return retVal;\r\n    }\r\n\r\n    // Callback triggered by the control, to check if it's OK to drop the draggedItem into the controlData\r\n    // Reason to handle highlighting @parent side: multiple cells can be hihglighted for bigger controls (minH or minW > 1)\r\n    // Checks:\r\n    // - Enough free space is available, if the control is bigger than 1x1\r\n    // - Highlights the siblings that will be potential drop targets also\r\n    // Hope this function is not too slow, as this function can be called many times during duration of Drag\r\n    // Return: true or false -- will affect the mouse cursor (handled by react dnd)\r\n    // Other functions: highlight cells green if valid. If invalid, simply returns false.\r\n    // Assumption controlData isOver() === true\r\n    // Design note: We cannot handle highlighting to red for invalids in this function because there is not way for us to 'erase' red highlights here.\r\n    // We don't need to 'erase' green highlights upon mouseUp because the reducer will be called to re-render the control.\r\n    checkDroppableToolItem(controlData, draggedItem) {\r\n        let retVal = !controlData.ctrlType; // If false, we just want to remove the previous highlights\r\n        let minH = draggedItem.minH ? draggedItem.minH : 1;\r\n        let minW = draggedItem.minW ? draggedItem.minW : 1;\r\n                \r\n        // [1] Find the siblings that are covered by minW and minH. If cannot find, means inValid Drop\r\n        // gather first and highlight only when all controls are found\r\n        let potentialDropsNow = retVal ? this.getPotentialDropsForNewItem(controlData, minW, minH) : []; \r\n\r\n        // [2] Highlight the neighbours green\r\n        potentialDropsNow.forEach(dom => {dom.classList.add('controlPotentialDrop')})\r\n        retVal = potentialDropsNow.length > 0;\r\n\r\n        // [3] Remove those that are no longer valid (highlighted green from previous call)\r\n        // Since this is not a JS Arr, use classic for-loop\r\n        let designerDom = document.getElementById('noobForm');\r\n        let potentialDropsPrevious = designerDom.getElementsByClassName('controlPotentialDrop');\r\n        this.removePreviousPotentialDrops(potentialDropsPrevious, potentialDropsNow);\r\n\r\n        return retVal;\r\n    }\r\n\r\n    // For new item, only allow dropping if ALL the cells are empty and unresized\r\n    getPotentialDropsForNewItem(controlData, draggedItemW, draggedItemH) {\r\n        let designerDom = document.getElementById('noobForm');        \r\n        \r\n\r\n        // Check first if the controlData already has the exact dimension\r\n        if (controlData.w === draggedItemW && controlData.h === draggedItemH) {\r\n            return [document.getElementById('ctrl'+controlData.i)];\r\n        }\r\n\r\n        // Find the siblings that are covered by minW and minH. If cannot find, means inValid Drop\r\n        let potentialDropsNow = []; // gather first and highlight only when all controls are found\r\n        for (let x = draggedItemW - 1; x >= 0; x--) {\r\n            for (let y = draggedItemH - 1; y >= 0; y--) {\r\n                // start with the rightmost and bottom-most; fail faster\r\n                let query = designerDom.querySelector(`div[data-layouty=\"${y + controlData.y}\"][data-layoutx=\"${x + controlData.x}\"]`);       \r\n                if (!query) {\r\n                    return [];\r\n                }\r\n\r\n                potentialDropsNow.push(query);\r\n            }\r\n        }\r\n        //console.log('getPotentialDrops', controlData.i, potentialDropsNow);\r\n        return potentialDropsNow;\r\n    }\r\n\r\n    // For moving control, it is OK to move the control that overlaps with draggedItem's current coordinates\r\n    getPotentialDropsForMoving(hoveredControlData, draggedItem) {\r\n        let designerDom = document.getElementById('noobForm');        \r\n        \r\n        // Check first if the controlData already has the exact dimension\r\n        if (hoveredControlData.w === draggedItem.w && hoveredControlData.h === draggedItem.h) {\r\n            return [document.getElementById('ctrl'+hoveredControlData.i)];\r\n        }\r\n\r\n        // Find the siblings that are covered by minW and minH. If cannot find, means inValid Drop\r\n        let rectDraggedItem = {\r\n            top: draggedItem.y, \r\n            bottom: draggedItem.y + draggedItem.h, \r\n            left: draggedItem.x, \r\n            right: draggedItem.x + draggedItem.w\r\n        };\r\n\r\n        let potentialDropsNow = []; // gather first and highlight only when all controls are found\r\n        let foundOverlapWithDraggedItem = false;\r\n        for (let x = draggedItem.w - 1; x >= 0; x--) {\r\n            for (let y = draggedItem.h - 1; y >= 0; y--) {\r\n                // start with the rightmost and bottom-most; fail faster\r\n\r\n                // Check if this coordinate is covered by the draggedItem\r\n                let rectCurr = {\r\n                    top: hoveredControlData.y + y,\r\n                    bottom: hoveredControlData.y + y + 1,\r\n                    left: hoveredControlData.x + x,\r\n                    right: hoveredControlData.x + x + 1,\r\n                }\r\n\r\n                if (this.hasOverlapStrict(rectCurr, rectDraggedItem)) {\r\n                    if (!foundOverlapWithDraggedItem) {\r\n                        let overlappedDom = document.getElementById('ctrl'+draggedItem.i);\r\n                        potentialDropsNow.push(overlappedDom);\r\n                        foundOverlapWithDraggedItem = true;\r\n                    }\r\n                    continue;\r\n                }                                \r\n\r\n                let query = designerDom.querySelector(`div[data-layouty=\"${y + hoveredControlData.y}\"][data-layoutx=\"${x + hoveredControlData.x}\"]`);       \r\n                if (!query || !!query.dataset.controltype) {\r\n                    return [];\r\n                }\r\n\r\n                potentialDropsNow.push(query);\r\n            }\r\n        }\r\n        //console.log('getPotentialDrops', controlData.i, potentialDropsNow);\r\n        return potentialDropsNow;\r\n    }\r\n\r\n    removePreviousPotentialDrops(potentialDropsPrevious, potentialDropsNow) {\r\n        for (var i = 0; i < potentialDropsPrevious.length; i++) {\r\n            let prev = potentialDropsPrevious[i];\r\n            if (potentialDropsNow.indexOf(prev) >= 0) {\r\n                continue;\r\n            }\r\n            prev.classList.remove('controlPotentialDrop');\r\n        }\r\n    }\r\n\r\n    onDropControl(ctrlDest, itemDropped, landingPadPos) {\r\n        \r\n        if (itemDropped.type === 'toolItem') {\r\n            this.handleToolItemDrop(ctrlDest, itemDropped);\r\n        }\r\n        else if (landingPadPos) {\r\n            this.handleControlMoveWithLandingPad(ctrlDest, itemDropped, landingPadPos);\r\n        }\r\n        else {\r\n            this.handleControlMove(ctrlDest, itemDropped);\r\n        }\r\n\r\n        // Clear the temp classes of ctrlDest\r\n        this.clearAllTemporaryClasses([ctrlDest.i, itemDropped.i]);\r\n    }\r\n\r\n    handleControlMoveWithLandingPad(ctrlDest, itemDropped, landingPadPos) {\r\n        // ctrlDest and itemDropped are expected to be the same\r\n        console.log('handleControlMoveWithLandingPad', ctrlDest, itemDropped, landingPadPos);\r\n        let landingPadX = landingPadPos['data-layoutx'];\r\n        let landingPadY = landingPadPos['data-layouty'];\r\n\r\n        let updatedControl = {\r\n            ...ctrlDest,\r\n            x: landingPadX,\r\n            y: landingPadY\r\n        }\r\n\r\n        this.props.updateLayout([updatedControl]); \r\n    }\r\n\r\n    handleToolItemDrop(ctrlDest, itemDropped) {\r\n        console.log('handleToolItemDrop', ctrlDest, itemDropped);\r\n        let newDate = new Date();\r\n        // Fire an action to let the redux store know that a control has been added\r\n        this.props.updateLayout([{\r\n            i: ctrlDest.i + newDate.toString(),  // TODO: Generate an ID in reducer\r\n            ctrlType: itemDropped.toolItemTypeName,\r\n            x: ctrlDest.x,\r\n            y: ctrlDest.y,\r\n            w: !!itemDropped.minW ? itemDropped.minW : 1,\r\n            h: !!itemDropped.minH ? itemDropped.minH : 1,\r\n        }]); \r\n    }\r\n\r\n    handleControlMove(ctrlDest, itemDropped) {\r\n        console.log('handleControlDrop', ctrlDest, itemDropped);\r\n        // Fire an action to let the redux store know that a control has been added\r\n        let updatedControls = [];\r\n        let itemDroppedNew = {\r\n            ...itemDropped,\r\n            x: ctrlDest.x,\r\n            y: ctrlDest.y,\r\n        };\r\n        updatedControls.push(itemDroppedNew);\r\n\r\n        if (!!ctrlDest.ctrlType) {\r\n            let ctrlDestNew = {\r\n                ...ctrlDest,\r\n                x: itemDropped.x,\r\n                y: itemDropped.y\r\n            }\r\n            updatedControls.push(ctrlDestNew);\r\n        }\r\n\r\n        this.props.updateLayout(updatedControls); \r\n    }\r\n\r\n    renderControl(control, containerWidth, numCols) {\r\n        return <NoobControl \r\n                key={'ctrl'+control.i} \r\n                controlData={{...control}}\r\n                parentDropCallback={this.onDropControl}\r\n                resizerMouseDown={this.onResizerMouseDown}\r\n                resizingControlId={this.state.resizingControlId}\r\n                parentCheckDroppable={this.checkDroppable}\r\n                isSelected={false}\r\n                containerWidth={containerWidth}\r\n                numCols={numCols}/>\r\n    }\r\n\r\n    // Returns an array containing the flat coordinates of the specified control\r\n    // E.g. Control is x:0, y:0, w:3, h:2, layoutWidth:10\r\n    // return: [0,   1,  2,         --> first row\r\n    //          10, 11, 12]         --> second row\r\n    getFills(control, layoutWidth) {\r\n        let retList = [];\r\n        for (var iRow = 0; iRow < control.h; iRow++) {\r\n            for (var iCol = 0; iCol < control.w; iCol++) {\r\n                \r\n                let adjustedX = iCol + control.x; \r\n                let adjustedY = iRow + control.y;\r\n                retList.push(adjustedY * layoutWidth + adjustedX);\r\n            }\r\n        }\r\n\r\n        return retList;\r\n    }\r\n\r\n\r\n    renderControlsWithLayout(layoutData, controls, containerWidth) {\r\n        let retList = [];  \r\n        let fillMap = [];\r\n        for (var iRow = 0; iRow < layoutData.rows; iRow++) {\r\n            for (var iCol = 0; iCol < layoutData.columns; iCol++) {            \r\n                let flatCoord = iRow * layoutData.columns + iCol;\r\n                // if coordinate already filled, skip\r\n                if (fillMap.find(n => n === flatCoord)) {\r\n                    continue;\r\n                }\r\n\r\n                // try to find if there is a control associated\r\n                // otherwise just render an empty control\r\n                let findControl = controls.find(ctrl => ctrl.x == iCol && ctrl.y == iRow );\r\n                if (!findControl) {\r\n                    let emptyControlPojo = this.createEmptyControl(iCol, iRow, flatCoord); // plain old JS obj\r\n                    let emptyControlJsx = this.renderControl(emptyControlPojo, containerWidth, layoutData.columns);\r\n                    retList.push({\r\n                        id: emptyControlPojo.i,\r\n                        jsx: emptyControlJsx\r\n                    });                    \r\n                }\r\n                else {\r\n                    //retList.push(this.renderControl(findControl));\r\n                    console.log('renderControlsWithLayout', findControl.i, findControl.x, findControl.y, findControl.w, findControl.h);\r\n                    let controlJsx = this.renderControl(findControl, containerWidth, layoutData.columns);\r\n                    retList.push({\r\n                        id: findControl.i,\r\n                        jsx: controlJsx\r\n                    });\r\n                    let newFills = this.getFills(findControl, layoutData.columns)\r\n                    fillMap = fillMap.concat(newFills);\r\n                }\r\n            }\r\n        }\r\n\r\n        return retList;\r\n    }\r\n\r\n    renderControlsAsSingleCol(layoutData, controls, containerWidth) {\r\n        let retList = [];\r\n        // We still need the for-loops so that the controls are sorted from top-left to bottom right\r\n        for (var iRow = 0; iRow < layoutData.rows; iRow++) {\r\n            for (var iCol = 0; iCol < layoutData.columns; iCol++) {            \r\n                let flatCoord = iRow * layoutData.columns + iCol;\r\n                // try to find if there is a control associated\r\n                // otherwise just render an empty control\r\n                let findControl = controls.find(ctrl => ctrl.x == iCol && ctrl.y == iRow );\r\n                if (!findControl) {\r\n                    continue;\r\n                }\r\n                else {\r\n                    // pass in null as the containerWidth, to indicate that we don't want to display as grid\r\n                    let controlJsx = this.renderControl(findControl, containerWidth, 1);\r\n                    retList.push({\r\n                        id: findControl.i,\r\n                        jsx: controlJsx\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return retList;\r\n    }\r\n\r\n    renderControls(layoutData, controls, containerWidth) {\r\n        // debugger\r\n        // For retlist: we don't use object (KV pair) beacause we need to render them according to the order we pushed them to the list.\r\n        // Retrieving the keys or values via Object.keys()/Object.values() do not come in the order that they were set\r\n        if (containerWidth > WIDTH_LARGE) {\r\n            return this.renderControlsWithLayout(layoutData, controls, containerWidth);\r\n        }\r\n        else {\r\n            return this.renderControlsAsSingleCol(layoutData, controls, containerWidth);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log('render NoobForm...', this.props.selectedPage);\r\n        let {controls, layoutData} = this.props;\r\n        let controlsList = this.renderControls(layoutData, controls, this.props.containerWidth);\r\n        let controlIds = controlsList.map(c => c.id);\r\n        let controlsJsx = controlsList.map(c => c.jsx);\r\n    \r\n        var divStyle = this.props.containerWidth > WIDTH_LARGE ?\r\n        {'gridTemplateColumns': `repeat(${layoutData.columns}, 1fr)`} : \r\n        {'gridTemplateColumns': '1fr'};\r\n\r\n        let classNames = \"noobForm \";\r\n        if (this.props.selectedPage) {\r\n            classNames += \"page-selected\";\r\n        }\r\n    \r\n        return (\r\n        <div id=\"noobForm\"\r\n            className={classNames}\r\n            onMouseLeave={(e) => {this.onMouseLeave(e, controlIds)}}\r\n\r\n            onMouseUp={(e) => {this.onMouseUp(e, controlIds)}}\r\n            onTouchEnd={(e) => {this.onMouseUp(e, controlIds)}}\r\n\r\n            onMouseMove={(e) => {this.onMouseMove(e, controlIds)}}\r\n            onTouchMove={(e) => {this.onMouseMove(e, controlIds)}}\r\n\r\n            //onMouseDown={(e) => {console.log('[noobForm] MouseDown')}}\r\n            style={divStyle}>\r\n            {controlsJsx}            \r\n        </div>    \r\n        );    \r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedPage: state.designer.pageSelected,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({ updateLayout }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NoobForm);","export const WIDTH_LARGE = 600;\r\nexport const NAME_CONTROL_ID = 'controlId'\r\nexport const NAME_CONTROL_TYPE = 'controlType'","import React, { Component } from 'react';\r\nimport {ControlDragTypes} from './noobControlContent';\r\nimport { useDrop } from 'react-dnd';\r\nimport './noobForm.css';\r\n\r\nconst LandingPads = ({controlData, resizingControlId, droppingItemType, droppingItem, \r\n                    noobControlCanDropCallback, noobControlDropCallback}) => {\r\n    // If this control is not resizing, no need to render the landing pads\r\n    if (resizingControlId !== controlData.i && droppingItemType !== ControlDragTypes.CONTROL) {\r\n        return null;\r\n    }\r\n\r\n    // If this control is not moving, no need to render the landing pads also\r\n    // If dropping a control, and it's not the same as the dragged control, no need to render also\r\n    if (droppingItemType === ControlDragTypes.CONTROL && controlData.i !== droppingItem.i) {\r\n        return null\r\n    }\r\n\r\n    console.log('renderLandingPads for ', controlData);\r\n\r\n    let landingPadStyle = {\r\n        gridTemplateColumns: `repeat(${controlData.w}, 1fr)`,\r\n        gridTemplateRows: `repeat(${controlData.h}, 1fr)`,\r\n    }\r\n\r\n    return (<div className=\"landingPadContainer\" style={landingPadStyle}>\r\n        {createLandingPads(controlData, noobControlCanDropCallback, noobControlDropCallback)}\r\n    </div>)\r\n}\r\n\r\n// Create a landing pad to allow the user to reduce the size of the control\r\n//function createLandingPads(rowSpan, colSpan, domParentCtrlId, parentX, parentY) {\r\nfunction createLandingPads(controlData, noobControlCanDropCallback, noobControlDropCallback) {    \r\n    let retList = [];\r\n    for (let i=0; i < controlData.h; i++) {\r\n        for (let j=0; j < controlData.w; j++) {\r\n            let layoutPos = {\r\n                'data-layoutx': j + controlData.x,\r\n                'data-layouty': i + controlData.y,\r\n            }\r\n            retList.push(<LandingPad \r\n                domParentCtrlId={'ctrl'+controlData.i}\r\n                layoutPos={layoutPos}\r\n                key={\"landingpadcontainer\"+(i * controlData.w + j)}\r\n                keyLandingPad={\"landingpad\"+(i * controlData.w + j)}\r\n                canDropParentCallback={noobControlCanDropCallback}\r\n                dropParentCallback={noobControlDropCallback}\r\n            />);\r\n        }\r\n    }\r\n\r\n    return retList;\r\n}\r\n\r\nconst canDropInLandingPad = (draggedItem, monitor, keyLandingPad, layoutPosIn, canDropCallback) => {\r\n    // Note: this function will be called for each mouse movement, so make sure this is efficient\r\n    // But, unless there is a change in the value, there won't be a re-render.\r\n    //console.log('canDropMe', controlData, draggedItem.type, draggedItem.minW, draggedItem.minH);\r\n    if (!monitor.isOver()) {\r\n        return false;\r\n    }\r\n\r\n    let landingPadInfo = {\r\n        key: keyLandingPad,\r\n        layoutPos: layoutPosIn\r\n    }\r\n\r\n    return canDropCallback(draggedItem, landingPadInfo);\r\n}\r\n\r\n// need a try-catch because inside monitor.canDrop(), it is trying to find the DOM ID first\r\n// however, the monitor function is still being fired even if the element is no longer rendered\r\n// -> The landing pads are only rendered during resizing or moving.\r\n//    No issue with resizing since everything is implemented manually\r\n//    But for moving, the dom id is required by react-dnd\r\nconst canDropCollectHandler = (monitor, keyLandingPad) => {\r\n    //console.log('[collect] canDrop for landingPad', keyLandingPad, 'already dropped:', monitor.didDrop());\r\n    let retVal = false;\r\n    try {\r\n        return !!monitor.canDrop();\r\n    }\r\n    catch(ex) {\r\n        console.log('[collect] canDrop landingPad exception for (note: this exception is expected)', keyLandingPad, 'exception:', ex.name, ex.message);\r\n    }\r\n    return false;\r\n}\r\n\r\nconst LandingPad = ({domParentCtrlId, layoutPos, keyLandingPad, canDropParentCallback, dropParentCallback}) => {\r\n\r\n    //console.log('render LandingPad for ', keyLandingPad);\r\n    const [{ isOver, canDrop}, drop] = useDrop({\r\n        accept: [ControlDragTypes.CONTROL],\r\n        canDrop: (item, monitor) => canDropInLandingPad(item, monitor, keyLandingPad, layoutPos, canDropParentCallback),\r\n        drop: (droppedItem) => dropParentCallback(droppedItem, layoutPos),\r\n        collect: monitor => ({\r\n            // these are the fields that will be added to the component's props/state\r\n            // downside is that it needs to execute the function\r\n            isOver: !!monitor.isOver({ shallow: true }),\r\n            //canDrop: !!monitor.canDrop(),            \r\n            canDrop: canDropCollectHandler(monitor, keyLandingPad),\r\n\t\t}),\r\n    });\r\n\r\n    const styles = {}        \r\n    \r\n    if (isOver) {\r\n        if (!canDrop) {\r\n            styles.backgroundColor = 'red';\r\n        }\r\n    }\r\n\r\n    return <div className=\"landingPadCell\" \r\n        parentctrlid={domParentCtrlId} \r\n        key={keyLandingPad}\r\n        ref={drop}\r\n        style={styles}\r\n        {...layoutPos}>\r\n    </div>\r\n}\r\n\r\nexport default LandingPads;","import React from 'react'\r\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'\r\nimport './editDialog.css';\r\n\r\nconst modalStyle = {\r\n    \r\n  }\r\n\r\nclass EditDialog extends React.Component {\r\n\r\n    render() {\r\n        let {controlInfo} = this.props;\r\n        return (<Modal \r\n            closeIcon={true}\r\n            closeOnDimmerClick={true}\r\n            trigger={<i className=\"ui icon cog editBtn\" style={modalStyle}></i>}>\r\n            <Modal.Header>Edit Control Dialog for {controlInfo.i}</Modal.Header>\r\n            <Modal.Content>\r\n            <Modal.Description>\r\n                <Header>Under Construction...</Header>\r\n                <p>\r\n                Will be available soon\r\n                </p>    \r\n            </Modal.Description>\r\n            </Modal.Content>\r\n        </Modal>)\r\n    }\r\n}\r\nexport default EditDialog\r\n","import React, { Component } from 'react';\r\nimport NoobForm from './noobForm';\r\nimport { ToolItemDragTypes } from './toolItem';\r\nimport { useDrop } from 'react-dnd';\r\nimport NoobControlContent, {ControlDragTypes} from './noobControlContent';\r\nimport LandingPads from './noobControlLandingPad';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport {selectedControl} from '../actions/index';\r\nimport EditDialog from './editDialog';\r\n\r\n\r\nexport const ROW_HEIGHT = 40;\r\nconst CONTROL_PADDING = 20;\r\nconst GRID_GAP = 5;\r\n\r\n\r\nconst handleControlSelect = (controlData) => {\r\n    console.log('controlSelected, dispatch action...', this);\r\n    selectedControl(controlData.i);\r\n}\r\n\r\nconst canDropMe = (controlData, draggedItem, monitor, parentCheckDroppable) => {\r\n    // Note: this function will be called for each mouse movement, so make sure this is efficient\r\n    // But, unless there is a change in the value, there won't be a re-render.\r\n    //console.log('canDropMe', controlData, draggedItem.type, draggedItem.minW, draggedItem.minH);\r\n    if (!monitor.isOver({shallow: true})) {\r\n        //console.log('canDropMe...not over...return false');\r\n        return false;\r\n    }\r\n    //console.log('canDropMe', controlData, draggedItem.type, monitor.isOver());\r\n    let canDrop = parentCheckDroppable(controlData, draggedItem);\r\n    return canDrop;\r\n}\r\n\r\nconst renderResizer = (controlId, onResizerMouseDown) => {\r\n    return (<div \r\n            className=\"resizer\" \r\n            id={\"ctrlResizer\" + controlId}\r\n            onMouseDown={(e) => {  \r\n                // This event is being called first before the Drag on the control starts\r\n                // Call preventDefault to disable moving of the control\r\n                // Resizing is given a higher priority since it covers a very small area\r\n                onResizerMouseDown(e, controlId);\r\n                e.preventDefault();\r\n            }}\r\n            onTouchStart={\r\n                (e) => {  \r\n                    // This event is being called first before the Drag on the control starts\r\n                    // Call preventDefault to disable moving of the control\r\n                    // Resizing is given a higher priority since it covers a very small area\r\n                    onResizerMouseDown(e, controlId);\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n            ></div>\r\n        );\r\n}\r\n\r\nconst NoobControl = ({controlData, resizerMouseDown, resizingControlId, \r\n                    parentCheckDroppable, parentDropCallback,\r\n                    selectedControl, containerWidth, numCols}) => {\r\n    \r\n    // [a] Hooks setup for drop\r\n    const [{ isOverShallow, canDrop, droppingItemType, droppingItem }, drop] = useDrop({\r\n        accept: [ToolItemDragTypes.TOOLITEM, ControlDragTypes.CONTROL],\r\n        canDrop: (item, monitor) => canDropMe(controlData, item, monitor, parentCheckDroppable),\r\n        drop: (droppedItem) => parentDropCallback(controlData, droppedItem),\r\n        collect: monitor => ({\r\n            // these are the fields that will be added to the component's props/state\r\n            // downside is that it needs to execute the function\r\n            //isOver: !!monitor.isOver(),\r\n            isOverShallow: !!monitor.isOver({ shallow: true }), // shallow: true means it will give way to landing pads (children)\r\n            canDrop: !!monitor.canDrop(),\r\n            // Add checking first. Without checking, once an item in toolbox starts dragging, all controls will rerender\r\n            //droppingItemType: !!monitor.isOver() && !!monitor.canDrop() ? monitor.getItemType() : null\r\n            droppingItemType: !!monitor.isOver() ? monitor.getItemType() : null,\r\n            droppingItem: !!monitor.isOver() ? monitor.getItem() : null,\r\n\t\t}),\r\n      });\r\n\r\n    //console.log('render NoobControl', controlData.i, isOverShallow, canDrop, droppingItemType);\r\n    //console.log('render NoobControl', controlData.i, controlData.x, controlData.y, controlData.w, controlData.h);\r\n    \r\n\r\n    // [b] Preparations\r\n    let classNames = 'noobControl';\r\n    let ctrlStyle = {\r\n        // set the minHeight instead of height. Height will make the height fixed regardless of the content.\r\n        // minHeight allows the parent container to grow depending on content\r\n        //'minHeight': (ROW_HEIGHT * controlData.h) + (CONTROL_PADDING * (controlData.h - 1)) + (GRID_GAP * (controlData.h - 1)), \r\n        // Maybe no need to include padding and grid gap\r\n        'minHeight': (ROW_HEIGHT * controlData.h), \r\n    }\r\n    // [b1] - Normal desktop size layout\r\n    if (numCols > 1) {\r\n        let usableWidth = containerWidth-20; // 20 for the noobform left and right padding of 10 each\r\n        let widthOfCtrl = usableWidth * controlData.w / 12.0 -5; // 12 is the number of columns; minus 5 for the grid gap\r\n        ctrlStyle.gridRowEnd = 'span ' + controlData.h;\r\n        ctrlStyle.gridColumnEnd = 'span ' + controlData.w;\r\n        if (!document.URL.toLowerCase().includes('reporting')) {\r\n            ctrlStyle.maxWidth = `${widthOfCtrl}px`; \r\n        }\r\n    }\r\n    // [b2] - Show as single column if containerWidth is null (if container size is too small, null is passed)\r\n    else {\r\n        ctrlStyle.maxWidth = `${containerWidth-20 - 5}px`; \r\n    }\r\n\r\n    // Highlighting to green is handled in noobForm. Highlighting to pink is handled here because if !canDrop, the mouseUp event was prevented by React Dnd.\r\n    if (isOverShallow && !canDrop) {\r\n        ctrlStyle.backgroundColor = 'pink';\r\n    }\r\n\r\n    // access these in Javascript by x.dataset.layoutx (Note: all lowercase - javascript/html rule)\r\n    // Purpose: convenience when processing resize operations\r\n    let layoutPos = {\r\n        'data-layoutx': controlData.x,\r\n        'data-layouty': controlData.y,\r\n        'data-layouth': controlData.h,\r\n        'data-layoutw': controlData.w,\r\n        'data-controltype': controlData.ctrlType,\r\n    }\r\n    let domCtrlId = \"ctrl\"+controlData.i;\r\n\r\n    console.log('render NoobControl', controlData.i, ctrlStyle.maxWidth, \"containerWidth\", containerWidth);\r\n    \r\n    // [c] Render:\r\n    // [c.1] return the landing pad first, which is only shown when the control is being resized\r\n    // [c.2] followed by the content\r\n    // [c.3] followed by the placeholder which will only be visible during resizing. Purpose is maintain the original size of the container while resizing.\r\n    // [c.4] followed by the small resizer.\r\n    // [c.5] followed by the settings button\r\n    //       This order must be followed to avoid the need for z-index\r\n    return <div id={domCtrlId}\r\n            className={classNames} \r\n            style={ctrlStyle}\r\n            ref={drop}\r\n            onMouseUp={() => {console.log('onMouseUp control level')}}\r\n            {...layoutPos}\r\n            >\r\n        {/* {renderLandingPads(controlData, resizingControlId, droppingItemType)} */}\r\n        <LandingPads \r\n            controlData={controlData}\r\n            resizingControlId={resizingControlId}\r\n            droppingItemType={droppingItemType}\r\n            droppingItem={droppingItem}\r\n            noobControlCanDropCallback={(draggedItem, landingPadInfo) => {\r\n                return parentCheckDroppable(controlData, draggedItem, landingPadInfo)\r\n            }}\r\n            noobControlDropCallback={(droppedItem, landingPadPos) => {\r\n                parentDropCallback(controlData, droppedItem, landingPadPos)\r\n            }}\r\n        />\r\n        <NoobControlContent \r\n            controlSelected={() => selectedControl(controlData.i)}            \r\n            {...controlData} \r\n            maxWidth={ctrlStyle.maxWidth}\r\n        />\r\n        <div className=\"resizePlaceholder\"></div>      \r\n        {renderResizer(controlData.i, resizerMouseDown)}  \r\n        {/* {controlData.ctrlType && <EditDialog controlInfo={controlData}/>}                         */}\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    let myId = ownProps.controlData.i;\r\n    let stateControlData = state.designer && state.designer.layout && state.designer.layout.find(control => control.i === myId);\r\n    if (stateControlData) {\r\n        return {\r\n            //isSelected: stateControlData.selected\r\n            controlData: stateControlData\r\n        };    \r\n    }\r\n\r\n    return {};\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators({ selectedControl }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NoobControl);","import React, {useRef, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Gauge as CanvasGauge, Donut, TextRenderer} from 'gaugeJS/dist/gauge.min';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport './gauge.css';\r\nimport {ROW_HEIGHT} from '../components/noobControl';\r\n\r\n//https://github.com/keanemind/react-gaugejs/blob/master/Gauge.js\r\n/**\r\n * React wrapper for GaugeJS.\r\n * @param {*} props\r\n * @return {Object} React element\r\n */\r\nfunction Gauge(props) {\r\n  const canvas = useRef();\r\n  const span = useRef();\r\n  const gauge = useRef();\r\n\r\n  useEffect(() => {\r\n    // Observe the span node\r\n    const config = {\r\n      characterData: true,\r\n      attributes: true,\r\n      childList: true,\r\n      subtree: true,\r\n    };\r\n    const observer = new MutationObserver((mutationsList, observer) => {\r\n      props.textChangeHandler(span.current.innerText);\r\n    });\r\n    observer.observe(span.current, config);\r\n\r\n    // var textRenderer = new TextRenderer(document.getElementById('preview-textfield'))\r\n    // textRenderer.render = function(gauge){\r\n    //   var percentage = gauge.displayedValue / gauge.maxValue;\r\n    //   this.el.innerHTML = (percentage * 100).toFixed(2) + \"%\"\r\n    //   debugger\r\n      \r\n    // };\r\n    // gauge.current.setTextField(textRenderer);\r\n\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    gauge.current = (\r\n      props.donut ? new Donut(canvas.current) : new CanvasGauge(canvas.current)\r\n    );\r\n    gauge.current.setTextField(span.current);\r\n    gauge.current.setOptions(props.options);\r\n    gauge.current.maxValue = props.maxValue;\r\n    gauge.current.setMinValue(props.minValue);\r\n    gauge.current.animationSpeed = props.animationSpeed;\r\n    gauge.current.set(props.value);\r\n  }, [props.donut]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    gauge.current.setOptions(props.options);\r\n  }, [props.options]);\r\n\r\n  useEffect(() => {\r\n    gauge.current.maxValue = props.maxValue;\r\n  }, [props.maxValue]);\r\n\r\n  useEffect(() => {\r\n    gauge.current.setMinValue(props.minValue);\r\n  }, [props.minValue]);\r\n\r\n  useEffect(() => {\r\n    gauge.current.animationSpeed = props.animationSpeed;\r\n  }, [props.animationSpeed]);\r\n\r\n  useEffect(() => {\r\n    gauge.current.set(props.data.percent);\r\n\r\n    // To allow decimal values on the label\r\n    var textRenderer = new TextRenderer(span.current)\r\n    textRenderer.render = function(gauge){\r\n      var percentage = gauge.displayedValue / gauge.maxValue;\r\n      this.el.innerHTML = (percentage * 100).toFixed(2) + \"%\"\r\n      \r\n    };\r\n    gauge.current.setTextField(textRenderer);\r\n\r\n  }, [props.data.percent]);\r\n\r\n  /* eslint-disable no-unused-vars */\r\n  const {\r\n    maxValue,\r\n    minValue,\r\n    animationSpeed,\r\n    options,\r\n    donut,\r\n    value,\r\n    textChangeHandler,\r\n    ...passThroughProps\r\n  } = props;\r\n  /* eslint-enable no-unused-vars */\r\n\r\n  let classNames = 'gauge';\r\n  if (props.selected === true) {\r\n      classNames += ' ctrl-selected'\r\n  }\r\n\r\n  // aspect ratio of w:h is 2:1\r\n  // We compute the height based on the number of rows allocated (default height only)\r\n  // then we compute the width\r\n  let height = props.h * ROW_HEIGHT - 50; // subtract 50 for the gauge size\r\n  let width = height*2;\r\n  if (props.maxWidth) {\r\n    let maxWidth = parseInt(props.maxWidth);\r\n    if (width > maxWidth) {\r\n      width = maxWidth;\r\n      height = width / 2;\r\n    }\r\n  }\r\n  \r\n  let heightPx = `${height}px`; // subtract 50 for the gauge size\r\n  let widthPx = `${height*2}px`;\r\n\r\n  // TODO: Ruined the web resizing after fixing the report alignment/sizing\r\n  // Separate the function for web/reporting if necessary\r\n  // Another issue: the gauge canvas does not appear if the gauge is not visible during the time it was rendered (e.g. default tab is not forms designer)\r\n  // Might not need to fix since there won't be any gauge in the default layout\r\n  return (\r\n    <div className={classNames}>\r\n      <div className=\"controlLabel\">{props.data.label}</div>\r\n      <div className=\"gauge-svgContainer\">\r\n      <div className=\"gauge-svgContainer2\">\r\n        <canvas ref={canvas} style={{width:widthPx, height: heightPx}} className=\"canvas-preview\" ></canvas>\r\n        <div ref={span} className=\"preview-textfield gauge-label\"></div>\r\n      </div>      \r\n      </div>      \r\n    </div>\r\n  );\r\n}\r\n\r\nGauge.defaultProps = {\r\n  maxValue: 100,\r\n  minValue: 0,\r\n  animationSpeed: 100000,\r\n  options: {\r\n    angle: 0.0,\r\n    lineWidth: 0.15,\r\n    radiusScale: 0.9,\r\n    pointer: {\r\n      length: 0.5,\r\n      strokeWidth: 0.05,\r\n      color: 'black',\r\n    },\r\n    limitMax: false,\r\n    limitMin: false,\r\n    // colorStart: 'red',\r\n    // colorStop: 'green',\r\n    strokeColor: '#ff0000',\r\n    generateGradient: true,\r\n    highDpiSupport: true,\r\n    staticZones: [\r\n      {strokeStyle: \"red\", min: 0, max: 20}, // Red from 100 to 130\r\n      {strokeStyle: \"gold\", min: 20, max: 80}, // Yellow\r\n      {strokeStyle: \"green\", min: 80, max: 100}, // Green\r\n    ],  \r\n    // These are the small labels around the gauge\r\n    staticLabels: {\r\n      font: \"15px\",  // Specifies font\r\n      labels: [0, 20, 80, 100],  // Print labels at these values\r\n      color: \"#000000\",  // Optional: Label text color\r\n      fractionDigits: 0  // Optional: Numerical precision. 0=round off.\r\n    },\r\n    fractionDigits: 2\r\n  },\r\n  donut: false,\r\n  textChangeHandler: () => {},\r\n  value: 85.5, // Do not set to 0...bug in the library...will render a small dot on upper left corner. set to a very small number instead like 0.0001\r\n};\r\n\r\nGauge.propTypes = {\r\n  maxValue: PropTypes.number.isRequired,\r\n  minValue: PropTypes.number.isRequired,\r\n  animationSpeed: PropTypes.number.isRequired,\r\n  options: PropTypes.object.isRequired,\r\n  donut: PropTypes.bool.isRequired,\r\n  value: PropTypes.number.isRequired,\r\n  textChangeHandler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default noobControlHoc(Gauge);","import React from 'react';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\n\r\nconst PageBreak = (props) => {\r\n    let classNames = props.selected === true ? 'ctrl-selected' : '';\r\n    return <div style={{width: '100%', height: '100%', backgroundColor: 'lightyellow'}} className={classNames}\r\n    />\r\n}\r\n\r\nexport default noobControlHoc(PageBreak);","// taken from react-image-mapper\r\n// Reason why we ported the entire source code: Hover does not work in Edge\r\n// https://github.com/coldiary/react-image-mapper/issues/36\r\n// Basically, just change mouseEnter and mouseLeave with mouseHover and mouseOut\r\n// We can switch back to the npm module once the issue is fixed\r\n\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport isEqual from \"react-fast-compare\";\r\n\r\nexport default class ImageMapper extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t[\r\n\t\t\t\"drawrect\",\r\n\t\t\t\"drawcircle\",\r\n\t\t\t\"drawpoly\",\r\n\t\t\t\"initCanvas\",\r\n\t\t\t\"renderPrefilledAreas\"\r\n\t\t].forEach(f => (this[f] = this[f].bind(this)));\r\n\t\tlet absPos = { position: \"absolute\", top: 0, left: 0 };\r\n\t\tthis.styles = {\r\n\t\t\tcontainer: { position: \"relative\" },\r\n\t\t\tcanvas: { ...absPos, pointerEvents: \"none\", zIndex: 2 },\r\n\t\t\t// [Ray] Remove the z-index, so that the resizer can be visible\r\n\t\t\t//img: { ...absPos, zIndex: 1, userSelect: \"none\" },\r\n\t\t\timg: { ...absPos, zIndex: 1, userSelect: \"none\" },\r\n\t\t\tmap: (props.onClick && { cursor: \"pointer\" }) || undefined\r\n\t\t};\r\n\t\t// Props watched for changes to trigger update\r\n\t\tthis.watchedProps = [\r\n\t\t\t\"active\",\r\n\t\t\t\"fillColor\",\r\n\t\t\t\"height\",\r\n\t\t\t\"imgWidth\",\r\n\t\t\t\"lineWidth\",\r\n\t\t\t\"src\",\r\n\t\t\t\"strokeColor\",\r\n\t\t\t\"width\"\r\n\t\t];\r\n\t}\r\n\r\n\tshouldComponentUpdate(nextProps) {\r\n\t\tconst propChanged = this.watchedProps.some(\r\n\t\t\tprop => this.props[prop] !== nextProps[prop]\r\n\t\t);\r\n\r\n\t\t//return !isEqual(this.props.map, this.state.map) || propChanged;\r\n\t\treturn !isEqual(this.props.map, this.state.map) || \r\n\t\t\t\tpropChanged ||\r\n\t\t\t\t!isEqual(this.props.map.name, nextProps.map.name) ||\r\n\t\t\t\t!isEqual(this.props.map.areas, nextProps.map.areas);\r\n\t}\r\n\r\n\tcomponentWillMount() {\r\n\t\tthis.updateCacheMap();\r\n\t}\r\n\r\n\tupdateCacheMap() {\r\n\t\tthis.setState(\r\n\t\t\t{ map: JSON.parse(JSON.stringify(this.props.map)) },\r\n\t\t\tthis.initCanvas\r\n\t\t);\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tthis.updateCacheMap();\r\n\t\tthis.initCanvas();\r\n\t}\r\n\r\n\tdrawrect(coords, fillColor, lineWidth, strokeColor) {\r\n\t\tlet [left, top, right, bot] = coords;\r\n\t\tthis.ctx.fillStyle = fillColor;\r\n\t\tthis.ctx.lineWidth = lineWidth;\r\n\t\tthis.ctx.strokeStyle = strokeColor;\r\n\t\tthis.ctx.strokeRect(left, top, right - left, bot - top);\r\n\t\tthis.ctx.fillRect(left, top, right - left, bot - top);\r\n\t\tthis.ctx.fillStyle = this.props.fillColor;\r\n\t}\r\n\r\n\tdrawcircle(coords, fillColor, lineWidth, strokeColor) {\r\n\t\tthis.ctx.fillStyle = fillColor;\r\n\t\tthis.ctx.beginPath();\r\n\t\tthis.ctx.lineWidth = lineWidth;\r\n\t\tthis.ctx.strokeStyle = strokeColor;\r\n\t\tthis.ctx.arc(coords[0], coords[1], coords[2], 0, 2 * Math.PI);\r\n\t\tthis.ctx.closePath();\r\n\t\tthis.ctx.stroke();\r\n\t\tthis.ctx.fill();\r\n\t\tthis.ctx.fillStyle = this.props.fillColor;\r\n\t}\r\n\r\n\tdrawpoly(coords, fillColor, lineWidth, strokeColor) {\r\n\t\tcoords = coords.reduce(\r\n\t\t\t(a, v, i, s) => (i % 2 ? a : [...a, s.slice(i, i + 2)]),\r\n\t\t\t[]\r\n\t\t);\r\n\t\t\r\n\t\tthis.ctx.fillStyle = fillColor;\r\n\t\tthis.ctx.beginPath();\r\n\t\tthis.ctx.lineWidth = lineWidth;\r\n\t\tthis.ctx.strokeStyle = strokeColor;\r\n\t\tlet first = coords.unshift();\r\n\t\tthis.ctx.moveTo(first[0], first[1]);\r\n\t\tcoords.forEach(c => this.ctx.lineTo(c[0], c[1]));\r\n\t\tthis.ctx.closePath();\r\n\t\tthis.ctx.stroke();\r\n\t\tthis.ctx.fill();\r\n\t\tthis.ctx.fillStyle = this.props.fillColor;\r\n\t}\r\n\r\n\tinitCanvas() {\r\n\t\tif (this.props.width) this.img.width = this.props.width;\r\n\r\n\t\tif (this.props.height) this.img.height = this.props.height;\r\n\r\n\t\tthis.canvas.width = this.props.width || this.img.clientWidth;\r\n\t\tthis.canvas.height = this.props.height || this.img.clientHeight;\r\n\t\tthis.container.style.width =\r\n\t\t\t(this.props.width || this.img.clientWidth) + \"px\";\r\n\t\tthis.container.style.height =\r\n\t\t\t(this.props.height || this.img.clientHeight) + \"px\";\r\n\t\tthis.ctx = this.canvas.getContext(\"2d\");\r\n\t\tthis.ctx.fillStyle = this.props.fillColor;\r\n\t\t//this.ctx.strokeStyle = this.props.strokeColor;\r\n\r\n\t\tif (this.props.onLoad) this.props.onLoad();\r\n\r\n\t\tthis.renderPrefilledAreas();\r\n\t}\r\n\r\n\thoverOn(area, index, event) {\r\n\t\tconst shape = event.target.getAttribute(\"shape\");\r\n\r\n\t\tif (this.props.active && this[\"draw\" + shape]) {\r\n\t\t\tthis[\"draw\" + shape](\r\n\t\t\t\tevent.target.getAttribute(\"coords\").split(\",\"),\r\n\t\t\t\tarea.fillColor,\r\n\t\t\t\tarea.lineWidth || this.props.lineWidth,\r\n\t\t\t\tarea.strokeColor || this.props.strokeColor\r\n\t\t\t);\r\n\t\t}\r\n\t\tif (this.props.onMouseEnter) this.props.onMouseEnter(area, index, event);\r\n\t}\r\n\r\n\thoverOff(area, index, event) {\r\n\t\tif (this.props.active) {\r\n\t\t\tthis.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\t\t\tthis.renderPrefilledAreas();\r\n\t\t}\r\n\r\n\t\tif (this.props.onMouseLeave) this.props.onMouseLeave(area, index, event);\r\n\t}\r\n\r\n\tclick(area, index, event) {\r\n\t\tif (this.props.onClick) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tthis.props.onClick(area, index, event);\r\n\t\t}\r\n\t}\r\n\r\n\timageClick(event) {\r\n\t\tif (this.props.onImageClick) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tthis.props.onImageClick(event);\r\n\t\t}\r\n\t}\r\n\r\n\tmouseMove(area, index, event) {\r\n\t\tif (this.props.onMouseMove) {\r\n\t\t\tthis.props.onMouseMove(area, index, event);\r\n\t\t}\r\n\t}\r\n\r\n\timageMouseMove(area, index, event) {\r\n\t\tif (this.props.onImageMouseMove) {\r\n\t\t\tthis.props.onImageMouseMove(area, index, event);\r\n\t\t}\r\n\t}\r\n\r\n\tscaleCoords(coords) {\r\n\t\tconst { imgWidth, width } = this.props;\r\n\t\t// calculate scale based on current 'width' and the original 'imgWidth'\r\n\t\tconst scale = width && imgWidth && imgWidth > 0 ? width / imgWidth : 1;\r\n\t\treturn coords.map(coord => coord * scale);\r\n\t}\r\n\r\n\trenderPrefilledAreas() {\r\n\t\tthis.state.map.areas.map(area => {\r\n\t\t\tif (!area.preFillColor) return;\r\n\t\t\tthis[\"draw\" + area.shape](\r\n\t\t\t\tthis.scaleCoords(area.coords),\r\n\t\t\t\tarea.preFillColor,\r\n\t\t\t\tarea.lineWidth || this.props.lineWidth,\r\n\t\t\t\tarea.strokeColor || this.props.strokeColor\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tcomputeCenter(area) {\r\n\t\tif (!area) return [0, 0];\r\n\r\n\t\tconst scaledCoords = this.scaleCoords(area.coords);\r\n\r\n\t\tswitch (area.shape) {\r\n\t\t\tcase \"circle\":\r\n\t\t\t\treturn [scaledCoords[0], scaledCoords[1]];\r\n\t\t\tcase \"poly\":\r\n\t\t\tcase \"rect\":\r\n\t\t\tdefault: {\r\n\t\t\t\t// Calculate centroid\r\n\t\t\t\tconst n = scaledCoords.length / 2;\r\n\t\t\t\tconst { y, x } = scaledCoords.reduce(\r\n\t\t\t\t\t({ y, x }, val, idx) => {\r\n\t\t\t\t\t\treturn !(idx % 2) ? { y, x: x + val / n } : { y: y + val / n, x };\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{ y: 0, x: 0 }\r\n\t\t\t\t);\r\n\t\t\t\treturn [x, y];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trenderAreas() {\r\n\t\treturn this.state.map.areas.map((area, index) => {\r\n\t\t\tconst scaledCoords = this.scaleCoords(area.coords);\r\n\t\t\tconst center = this.computeCenter(area);\r\n\t\t\tconst extendedArea = { ...area, scaledCoords, center };\r\n\t\t\treturn (\r\n\t\t\t\t<area\r\n\t\t\t\t\tkey={area._id || index}\r\n\t\t\t\t\tshape={area.shape}\r\n\t\t\t\t\tcoords={scaledCoords.join(\",\")}\r\n\t\t\t\t\t// [Ray] Fix the Edge mouse hover issue\r\n\t\t\t\t\t// onMouseEnter={this.hoverOn.bind(this, extendedArea, index)}\r\n                    // onMouseLeave={this.hoverOff.bind(this, extendedArea, index)}\r\n\t\t\t\t\tonMouseOver={this.hoverOn.bind(this, extendedArea, index)}\r\n\t\t\t\t\tonMouseOut={this.hoverOff.bind(this, extendedArea, index)}                    \r\n\t\t\t\t\tonMouseMove={this.mouseMove.bind(this, extendedArea, index)}\r\n\t\t\t\t\tonClick={this.click.bind(this, extendedArea, index)}\r\n\t\t\t\t\thref={area.href}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div style={this.styles.container} ref={node => (this.container = node)}>\r\n\t\t\t\t<img\r\n\t\t\t\t\tstyle={this.styles.img}\r\n\t\t\t\t\tsrc={this.props.src}\r\n\t\t\t\t\tuseMap={`#${this.state.map.name}`}\r\n\t\t\t\t\talt=\"\"\r\n\t\t\t\t\tref={node => (this.img = node)}\r\n\t\t\t\t\tonLoad={this.initCanvas}\r\n\t\t\t\t\tonClick={this.imageClick.bind(this)}\r\n\t\t\t\t\tonMouseMove={this.imageMouseMove.bind(this)}\r\n\t\t\t\t/>\r\n\t\t\t\t<canvas ref={node => (this.canvas = node)} style={this.styles.canvas} />\r\n\t\t\t\t<map name={this.state.map.name} style={this.styles.map}>\r\n\t\t\t\t\t{this.renderAreas()}\r\n\t\t\t\t</map>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nImageMapper.defaultProps = {\r\n\tactive: true,\r\n\tfillColor: \"rgba(255, 255, 255, 0.5)\",\r\n\tlineWidth: 1,\r\n\tmap: {\r\n\t\tareas: [],\r\n\t\tname: \"image-map-\" + Math.random()\r\n\t},\r\n\tstrokeColor: \"rgba(0, 0, 0, 0.5)\"\r\n};\r\n\r\nImageMapper.propTypes = {\r\n\tactive: PropTypes.bool,\r\n\tfillColor: PropTypes.string,\r\n\theight: PropTypes.number,\r\n\timgWidth: PropTypes.number,\r\n\tlineWidth: PropTypes.number,\r\n\tsrc: PropTypes.string.isRequired,\r\n\tstrokeColor: PropTypes.string,\r\n\twidth: PropTypes.number,\r\n\r\n\tonClick: PropTypes.func,\r\n\tonMouseMove: PropTypes.func,\r\n\tonImageClick: PropTypes.func,\r\n\tonImageMouseMove: PropTypes.func,\r\n\tonLoad: PropTypes.func,\r\n\tonMouseEnter: PropTypes.func,\r\n\tonMouseLeave: PropTypes.func,\r\n\r\n\tmap: PropTypes.shape({\r\n\t\tareas: PropTypes.arrayOf(\r\n\t\t\tPropTypes.shape({\r\n\t\t\t\tarea: PropTypes.shape({\r\n\t\t\t\t\tcoords: PropTypes.arrayOf(PropTypes.number),\r\n\t\t\t\t\thref: PropTypes.string,\r\n\t\t\t\t\tshape: PropTypes.string,\r\n\t\t\t\t\tpreFillColor: PropTypes.string,\r\n\t\t\t\t\tfillColor: PropTypes.string\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t),\r\n\t\tname: PropTypes.string\r\n\t})\r\n};\r\n","import React from 'react';\r\nimport ImageMapper from './imageMapperLib';\r\nimport './imageMap.css';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport {getAprBaseUrl} from '../api/masterData';\r\n\r\n// Should use different names if there are more than 1 instance of maps in the web page\r\n// Otherwise the mouse pointer will have conflicts\r\n// The coordinates are against the orig image dimension because imgWidth is specified\r\nconst MAP ={\r\n    name: \"myMap\",\r\n    areas: [\r\n        {name: \"Room 1\", shape: \"circle\", coords: [170, 20, 15 ], preFillColor: \"blue\"},\r\n        {name: \"Room 2\", shape: \"circle\", coords: [400, 120, 15 ], preFillColor: \"#ffcf0c\"},\r\n        {name: \"Room 3\", shape: \"circle\", coords: [70, 100, 15 ], preFillColor: \"green\"},\r\n    ]\r\n};\r\n\r\nconst MAP2 ={\r\n    name: \"myMap2\",\r\n    areas: [\r\n        {name: \"Room A\", shape: \"circle\", coords: [140, 20, 15 ], preFillColor: \"red\"},\r\n        {name: \"Room B\", shape: \"circle\", coords: [200, 150, 15 ], preFillColor: \"#ffcf0c\"},\r\n        {name: \"Room C\", shape: \"circle\", coords: [90, 120, 15 ], preFillColor: \"magenta\"},\r\n        {name: \"Room D\", shape: \"circle\", coords: [40, 180, 15 ], preFillColor: \"cyan\"},\r\n        {name: \"Room E\", shape: \"circle\", coords: [390, 25, 15 ], preFillColor: \"orange\"},\r\n        {name: \"Room F\", shape: \"circle\", coords: [380, 190, 15 ], preFillColor: \"maroon\"},\r\n    ]\r\n};\r\n\r\nconst DEFAULT_IMG = 'layout.gif'; // This image can be accessed from http://localhost:3000/layout.gif, and deployed inside the public folder of this React App\r\n\r\nclass ImageMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imageLoaded: false,\r\n            scaledImgW: null,\r\n            scaledImgH: null,\r\n            hoveredArea: null\r\n        }\r\n        this.imageLoadHandler = this.imageLoadHandler.bind(this);\r\n    }\r\n\r\n    imageLoadHandler(e) {\r\n\r\n        let origImgW = e.srcElement.width;\r\n        let origImgH = e.srcElement.height;\r\n        if (!!this.props.maxWidth) {\r\n            \r\n            this.setState({\r\n                imageLoaded: true,\r\n                origImgW,\r\n                origImgH\r\n            });    \r\n        }\r\n        else {\r\n            this.setState({\r\n                imageLoaded: true,\r\n                origImgW,\r\n                origImgH\r\n            });    \r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        var img = new Image();\r\n        img.onload = this.imageLoadHandler;\r\n        img.src = this.getImageUrl();\r\n    }\r\n\r\n    enterArea(area) {\r\n        console.log('enterArea', area)\r\n\t\tthis.setState({\r\n\t\t\thoveredArea: area,\r\n\t\t});\r\n\t}\r\n    \r\n    leaveArea(area) {\r\n\t\tthis.setState({\r\n\t\t\thoveredArea: null,\r\n\t\t});\r\n    }\r\n\r\n    getTipPosition(area) {\r\n        // if (!area) {\r\n        //     return {top: '170px', left: '100px'};\r\n        // }\r\n        console.log('[getTipPosition]', area.center[1], area.center[0]);\r\n\t\treturn { top: `${area.center[1]}px`, left: `${area.center[0]}px` };\r\n    }\r\n    \r\n    computeWidthHeight(origImgW, origImgH, maxWidthPx) {\r\n        if (!!maxWidthPx) {\r\n            let propsMaxWidth = parseFloat(maxWidthPx) - 5;\r\n            let scaledImageH = propsMaxWidth / origImgW * origImgH;\r\n            return {\r\n                w: propsMaxWidth,\r\n                h: scaledImageH\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                w: origImgW,\r\n                h: origImgH\r\n            }\r\n        }\r\n    }\r\n\r\n    getImageUrl() {\r\n        return this.props.data && this.props.data.imageProps && this.props.data.imageProps.image ? \r\n                    `${getAprBaseUrl()}/files/${this.props.data.imageProps.image}` \r\n                    : DEFAULT_IMG;\r\n    }\r\n\r\n    getMapToUse() {\r\n        if (this.props.data && this.props.data.imageProps && this.props.data.imageProps.image) {\r\n            return this.props.data && this.props.data.imageProps && this.props.data.imageProps.map;\r\n        }\r\n\r\n        return this.props.useOther ? MAP2 : MAP;\r\n    }\r\n\r\n    // e.g. groupings = ['A', 'B', 'C']\r\n    // return 'C'\r\n    getLastGroupingItem() {\r\n        if (!this.props || !this.props.data || !this.props.data.dataProps || !Array.isArray(this.props.data.dataProps.groupings) || this.props.data.dataProps.groupings.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return this.props.data.dataProps.groupings[this.props.data.dataProps.groupings.length - 1];\r\n    }\r\n\r\n    getTooltip(areaName) {\r\n         debugger\r\n        let lowestProp = this.getLastGroupingItem();\r\n        if (!this.props.apiData || !this.props.apiData.data || !lowestProp) {\r\n            return areaName;\r\n        }\r\n                \r\n        let findApiData = this.props.apiData.data.find(a => a[lowestProp] === areaName);\r\n        if (!findApiData) {\r\n            return areaName;\r\n        }\r\n\r\n        let tipStr = '';\r\n        let kvPairsStr = []\r\n        for (var prop in findApiData) {\r\n            if (prop === lowestProp) {\r\n                kvPairsStr.push(`${prop}: ${findApiData[prop]}`);\r\n            }\r\n            else if (prop === 'value') {\r\n                kvPairsStr.push(`KPI Score: ${findApiData[prop]}`);\r\n            }\r\n        }\r\n        \r\n        return kvPairsStr.join(', ');\r\n    }\r\n   \r\n    \r\n    render() {\r\n        let imageUrl = this.getImageUrl();\r\n        let mapToUse = this.getMapToUse();\r\n\r\n        if (!this.state.imageLoaded) {\r\n            return <div>Loading Image...</div>;\r\n        }\r\n        let classNames = this.props.selected === true ? 'ctrl-selected' : '';\r\n        var computedSize = this.computeWidthHeight(this.state.origImgW, this.state.origImgH, this.props.maxWidth);\r\n        console.log(\"[ImageMap] Computed W, H: \", computedSize, \"max Width: \", this.props.maxWidth, this.props.apiData);\r\n\r\n        return <div style={{ position: \"relative\" }} className={classNames}>\r\n            <ImageMapper src={imageUrl}\r\n                map={mapToUse}\r\n                onMouseEnter={area => this.enterArea(area)}\r\n                onMouseLeave={area => this.leaveArea(area)}\r\n                width={computedSize.w} // get it from the container width\r\n                height={computedSize.h} // calculate based on the image aspect ratio\r\n                imgWidth={this.state.origImgW}\r\n                // onClick={area => this.clickArea(area)}\r\n        >\r\n        </ImageMapper>\r\n        {this.state.hoveredArea && (\r\n            <span className=\"imageMapToolTip\" style={{ ...this.getTipPosition(this.state.hoveredArea) }}>\r\n                {/* {this.state.hoveredArea.name} */}\r\n                {this.getTooltip(this.state.hoveredArea.name)}\r\n            </span>\r\n        )}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default noobControlHoc(ImageMap);\r\n\r\n// Properties Panel Portion\r\nconst configBtnOnClick = () => {\r\n\r\n    console.log('configBtnOnClick');\r\n}\r\nexport const imageMapProps = [\r\n    {\r\n      name: 'imageProps', \r\n      propType: 'popupConfig',\r\n      buttonName: 'Configure Image...',\r\n      btnOnclick: configBtnOnClick\r\n    },\r\n    {\r\n        name: 'dataProps', \r\n        propType: 'section',\r\n    },\r\n    {\r\n        name: 'datasetId', \r\n        propType: 'number',\r\n        toolTip: 'Put the same datasetId for all controls that are linked. When a filter is applied in one control, other linked controls will also be filtered.'\r\n    },\r\n    {\r\n        name: 'requestType', \r\n        propType: 'metadata',\r\n        metadataField: 'requestTypes',\r\n        metadataPropType: 'dropdown'\r\n    },\r\n    {\r\n        name: 'groupings', \r\n        propType: 'metadata',\r\n        metadataField: 'dimensions',\r\n        metadataPropType: 'treeDropdown',\r\n        multiple: true,\r\n      },\r\n  \r\n];\r\n","import React, {useState} from 'react';\r\nimport './datepicker.css';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst DateSelector = (props) => {\r\n    //return <div>Hello</div>\r\n    // const [startDate, setStartDate] = useState(new Date());\r\n    // return (<DatePicker selected={startDate} onChange={date => setStartDate(date)} />);    \r\n\r\n    let classNames = props.selected === true ? 'ctrl-selected' : '';\r\n\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    return <div className={classNames}>\r\n        <div className=\"controlLabel\">{props.data.label}</div>\r\n        <div className=\"datepickerGrid\">\r\n        <div className className=\"dateLabel\">Start:</div>\r\n        <div className=\"datepickerWrapper\">\r\n            <DatePicker\r\n            selected={startDate}\r\n            onChange={date => setStartDate(date)}\r\n            selectsStart\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n            />\r\n        </div>\r\n\r\n        <div className=\"dateLabel\">End:</div>\r\n        <div className=\"datepickerWrapper datepickerWrapperEnd\">\r\n            <DatePicker\r\n            selected={endDate}\r\n            onChange={date => setEndDate(date)}\r\n            selectsEnd\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n            minDate={startDate}\r\n            />        \r\n        </div>\r\n        </div>\r\n    </div>\r\n}\r\nexport default noobControlHoc(DateSelector);\r\n","import React from 'react';\r\nimport noobControlHoc from '../hoc/noobControlsHoc';\r\nimport './externalContainer.css';\r\n\r\n// Make this a prop, if need to create another external page\r\nconst externalPageDefault = \"http://localhost:3000/IsaeExecSummary/ExecutiveSummary_r1.html\";\r\n\r\nexport const ExternalContainerBase = (props) => {\r\n\r\n    const getContent = () => {\r\n        return <iframe className=\"externalContainerContent\"\r\n            src={props && props.data && props.data.url ? props.data.url : externalPageDefault}\r\n        />;\r\n    }\r\n\r\n    let classNames = 'externalContainer';\r\n    if (props.selected === true) {\r\n        classNames += ' ctrl-selected'\r\n    }\r\n      \r\n    return <div className={classNames}>\r\n        {getContent()}\r\n        </div>\r\n}\r\n\r\nexport default noobControlHoc(ExternalContainerBase);","import React from 'react';\r\nimport './noobForm.css'\r\n// controls\r\nimport Section from '../controls/section';\r\nimport RichText from '../controls/richtext';\r\nimport Combobox from '../controls/combo';\r\nimport Textbox from '../controls/textbox';\r\nimport Table, {TableBase} from '../controls/table';\r\nimport ReportTable from '../controls/reportTable';\r\nimport Label from '../controls/label';\r\nimport ShowMessage, {NotifType} from '../helper/notification';\r\nimport { Popup } from 'semantic-ui-react'\r\nimport DcBar from '../charts/dcjsBarChart';\r\n\r\n\r\nimport { useDrag } from 'react-dnd'\r\nimport PieChart, {PieForReport, PieWithData, PieResponsiveData, PieResponsiveDataBase} from '../charts/pieChart';\r\nimport BarChart, {BarChartForReport, BarResponsiveData} from '../charts/barChart';\r\nimport LineChart from '../charts/lineChart';\r\nimport Gauge from '../charts/gauge';\r\nimport GaugeReChart from '../charts/gauge_rechart';\r\nimport GaugeJs from '../charts/gaugejs_react';\r\nimport PageBreak from '../controls/pagebreak';\r\nimport ImageMap from '../controls/imageMap';\r\nimport Datepicker from '../controls/datepicker';\r\nimport ExternalContainer, {ExternalContainerBase} from '../containers/externalContainer';\r\n\r\n// Separate the content-part into a standalone component from the control wrapper\r\n// Reason: this will be the only part that will be resized or moved while dragging (moving or resizing)\r\n// We don't want to include the resizer or landing pads in the drag image\r\n\r\nexport const ControlDragTypes = {\r\n    CONTROL: 'Control'\r\n}\r\n\r\n// mode: either \"dashboard\" or \"designMode\"\r\nexport const getContentDiv = (controlData, mode) => {\r\n    // Wrap the contents so that when resizing or moving, they will be together\r\n    // Also this should be floated. We don't want to resize or move the parent\r\n    let content = null;\r\n    let isReporting = document.URL.toLowerCase().includes(\"reporting\");\r\n    let designMode = mode !== 'dashboard';\r\n    switch(controlData.ctrlType) {\r\n        case 'section':\r\n            content = <Section {...controlData}></Section>\r\n            break;\r\n        case 'richtext':\r\n            content = <RichText {...controlData}></RichText>\r\n            break;\r\n        case 'combo':\r\n            content = <Combobox {...controlData}></Combobox>\r\n            break;\r\n        case 'textbox':\r\n            content = <Textbox {...controlData}/>\r\n            break;\r\n        case 'table':\r\n            if (isReporting) {\r\n                // content = <ReportTable {...controlData}/> \r\n                content = <TableBase {...controlData} showFilters={false} showPaginator={false} showFooter={false}/> \r\n            }\r\n            else if (designMode){                \r\n                content = <Table {...controlData} designMode={designMode}/> \r\n            }\r\n            else {\r\n                content = <TableBase {...controlData} designMode={designMode}/> \r\n            }\r\n            \r\n            break;\r\n        case 'label':\r\n            content = <Label {...controlData}/> \r\n            break;\r\n        case 'pie':\r\n            if (isReporting) {\r\n                //content = <PieForReport {...controlData}/>\r\n                content = <PieForReport {...controlData}/>\r\n            }\r\n            else if (mode === 'dashboard') {\r\n                // Forgot why we need to use the Base. I think there were conflicts with the mouseDown.\r\n                content = <PieResponsiveDataBase {...controlData}/>\r\n            }\r\n            else {\r\n                content = <PieResponsiveData {...controlData} designMode/>\r\n            }                \r\n            break;\r\n        case 'barchart':\r\n            if (isReporting) {\r\n                content = <BarChartForReport {...controlData}/>                \r\n            }\r\n            else {                \r\n                content = <BarResponsiveData {...controlData} designMode={designMode}/>\r\n            }            \r\n            break;\r\n        case 'gauge':\r\n            //content = <Gauge {...controlData}/>\r\n            content = <GaugeReChart {...controlData} designMode={designMode} reportMode={isReporting}/>\r\n            //content=<GaugeJs {...controlData}/>\r\n            break;\r\n        case 'pagebreak':\r\n            // Should not come here if Reporting mode!\r\n            // Parent form must insert page-break-before style into the next control instead\r\n            content = <PageBreak {...controlData}/>\r\n            break;\r\n        case undefined:    \r\n            if (isReporting || mode === 'dashboard') {\r\n                content = <div className=\"emptyReportControl\"></div>\r\n            }\r\n            else {\r\n                content = <div className=\"emptyControl\"></div>\r\n            }\r\n            break;\r\n        case 'dcbar':\r\n            content = <DcBar {...controlData}/>\r\n            break;\r\n        case 'imageMap':\r\n            content = <ImageMap {...controlData} designMode={designMode}/>\r\n            break;\r\n        case 'date':\r\n            content = <Datepicker {...controlData}/>\r\n            break;\r\n        case 'line':\r\n            //content = <LineChart {...controlData} designMode={designMode}/>\r\n            content = <LineChart {...controlData} designMode={designMode} reportMode={isReporting}/> // debug!!\r\n            break;\r\n        case 'frame':\r\n            if (designMode) {\r\n                content = <ExternalContainer {...controlData} designMode={designMode}/>\r\n            }\r\n            else {\r\n                content = <ExternalContainerBase {...controlData} designMode={designMode}/>\r\n            }\r\n            break;\r\n        default:\r\n            content = <div>{controlData.i}</div>\r\n            break;\r\n    }\r\n\r\n    return content;\r\n}\r\n\r\nconst handleEndDrag = (item, monitor) => {\r\n    if (monitor.didDrop()) {\r\n        return;\r\n    }\r\n\r\n    ShowMessage('Control was not moved', \r\n    NotifType.info, \r\n    'Please drop the control into an empty cell, or make sure there is sufficient space for larger controls.')\r\n}\r\n\r\n\r\n// TODO: Need to inform upper level classes that this control is being moved, so that landing pads will only be rendered on the control being moved\r\nconst NoobControlContent = (controlData) => {\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { \r\n            ...controlData,\r\n            type: ControlDragTypes.CONTROL,            \r\n        },\r\n        canDrag: !!controlData.ctrlType, // Do not allow empty controls to be dragged\r\n        end: (item, monitor) => handleEndDrag(item, monitor),\r\n        collect: monitor => ({\r\n          isDragging: !!monitor.isDragging(),\r\n        }),\r\n      });\r\n\r\n    const styles = {\r\n        opacity: isDragging? 0 : 1,\r\n    };\r\n    // return <Popup\r\n    //     trigger={<div className=\"contentWrapper\" ref={drag} style={styles}>\r\n    //             {getContentDiv(controlData)}\r\n    //             </div>}\r\n    //     content='Hide the popup on any scroll event'\r\n    //     on='click'\r\n    //     hideOnScroll\r\n    // />\r\n    return <div className=\"contentWrapper\" ref={drag} style={styles}>\r\n        {getContentDiv(controlData, 'designMode')}  \r\n    </div>        \r\n}\r\n\r\nexport default NoobControlContent;","import React, { Component, useState, useEffect } from 'react';\r\nimport {getContentDiv} from './noobControlContent';\r\nimport { Dimmer, Loader, Segment } from 'semantic-ui-react';\r\nimport {fetchData} from './chartApiManager';\r\nimport axios from 'axios';\r\nimport './reportForm.css'\r\n\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\nimport {clickChartSlice, selectChartGroup, clickPageLink} from '../actions/index';\r\n\r\n\r\nconst ROW_HEIGHT = 40;\r\nconst CONTROL_PADDING = 20;\r\nconst GRID_GAP = 5;\r\n\r\n// a. sliceInfo: the category(ies) of pie chart/bar chart (e.g. vendor=\"Yokogawa\"+model=\"EJA\")\r\n// b.seriesInfo: only applicable to bar chart, e.g. PRM device status = Normal\r\n// c. groupingStackStr: e.g. \"[vendor,model]\"\r\n// For sending request to API, we only need a and b\r\n// For calculating the active index, we need a, b and c\r\nconst handleChartClick = (sliceInfo, seriesInfo, groupingStackStr, controlData, clickChartSlice) => {\r\n    // Fire a redux action\r\n    clickChartSlice(sliceInfo, seriesInfo, groupingStackStr, controlData.data.dataProps.datasetId, controlData.i);\r\n}\r\n\r\nconst handleGroupSelect = (groupingValue, controlData, selectChartGroup) => {\r\n    selectChartGroup(groupingValue, controlData);\r\n}\r\n\r\nconst handleLinkClick = (controlData, clickPageLink) => {\r\n    console.log(\"handleLinkClick\", controlData.i, controlData.data.linkedPage);\r\n    clickPageLink(controlData);\r\n}\r\n\r\nconst ReportControl = ({layoutName, controlData, containerWidth, \r\n                    clickChartSlice, selectChartGroup, clickPageLink,\r\n                    datasetFilters, currControlGrouping, metadata, pageFilters,\r\n                    pageApiData}) => {\r\n    // [a] Data Preparations\r\n    const [apiData, setApiData] = useState();\r\n    const [isLoading, setIsLoading] = useState(!!controlData.dataProps);\r\n\r\n    useEffect(() => {     \r\n        if (controlData.data && controlData.data.dataProps) {                        \r\n            fetchData(controlData, setIsLoading, setApiData, datasetFilters, currControlGrouping, metadata, pageFilters);\r\n        }\r\n    }, [datasetFilters, currControlGrouping, layoutName, pageFilters]); \r\n\r\n\r\n    // [b] UI Preparations    \r\n    // TODO: not sure if this would affect the global object (permanently stored to the global object)\r\n    // If yes, just clone this object\r\n    let controlDataClone = {...controlData};\r\n    if (controlDataClone.data && controlDataClone.data.dataProps && !isLoading) {\r\n        controlDataClone.apiData = apiData;\r\n        controlDataClone.datasetFilters = datasetFilters; // don't put this inside dataProps to avoid sending it over the network\r\n        controlDataClone.currControlGrouping = currControlGrouping;\r\n        controlDataClone.handleChartClick = (sliceInfo, seriesInfo, groupingStackStr) => handleChartClick(sliceInfo, seriesInfo, groupingStackStr, controlData, clickChartSlice);\r\n        controlDataClone.handleGroupSelect = (groupValue) => handleGroupSelect(groupValue, controlData, selectChartGroup);\r\n        controlDataClone.metadata = metadata;        \r\n    }\r\n\r\n    controlDataClone.layoutName = layoutName;\r\n\r\n    if (pageApiData) {\r\n        controlDataClone.pageApiData = pageApiData;\r\n    }\r\n\r\n    if (!!controlDataClone.data && !!controlData.data.linkedPage) {\r\n        controlDataClone.data.handleLinkClick = controlData => handleLinkClick(controlData, clickPageLink);\r\n    }\r\n\r\n    let classNames = 'reportControl';\r\n    if (!!controlDataClone.ctrlType) {\r\n        classNames += \" reportControl-withBorder\";\r\n    }\r\n    let usableWidth = containerWidth; // 20 for the noobform left and right padding of 10 each\r\n    let widthOfCtrl = usableWidth * controlData.w / 12.0; // 12 is the number of columns; minus 5 for the grid gap\r\n    if (controlDataClone.w < 12) {\r\n        widthOfCtrl -= 5;\r\n    }\r\n    \r\n    let ctrlStyle = {\r\n        // set the minHeight instead of height. Height will make the height fixed regardless of the content.\r\n        // minHeight allows the parent container to grow depending on content\r\n        //'minHeight': (ROW_HEIGHT * controlData.h) + (CONTROL_PADDING * (controlData.h - 1)) + (GRID_GAP * (controlData.h - 1)), \r\n        // Maybe no need to include padding and grid gap\r\n        'minHeight': (ROW_HEIGHT * controlData.h), \r\n    }\r\n    // [b1] - Normal desktop size layout\r\n    ctrlStyle.gridRowEnd = 'span ' + controlData.h;\r\n    ctrlStyle.gridColumnEnd = 'span ' + controlData.w;\r\n    ctrlStyle.maxWidth = `${widthOfCtrl}px`; \r\n    \r\n    controlDataClone.selected = false; // Override...so that it won't show up as selected\r\n    controlDataClone.maxWidth = `${widthOfCtrl}px`; \r\n    //console.log('render ReportControl', controlData.i, widthOfCtrl, containerWidth);\r\n    // [c] Render:\r\n    // [c.1] return the landing pad first, which is only shown when the control is being resized\r\n    // [c.2] followed by the content\r\n    // [c.3] followed by the placeholder which will only be visible during resizing. Purpose is maintain the original size of the container while resizing.\r\n    // [c.4] followed by the small resizer.\r\n    // [c.5] followed by the settings button\r\n    //       This order must be followed to avoid the need for z-index\r\n    return <div \r\n                className={classNames} \r\n                style={ctrlStyle}\r\n            >\r\n                {isLoading && <Dimmer active inverted>\r\n                    <Loader>{`Fetching ${controlDataClone.ctrlType} data`}</Loader>\r\n                    </Dimmer>\r\n                }\r\n                {getContentDiv(controlDataClone, \"dashboard\")}\r\n        </div>\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    let controlData = ownProps.controlData;\r\n    if (!controlData || !controlData.data || !controlData.data.dataProps) {\r\n        return {};    // to avoid re-rendering controls that do not have dataProps\r\n    }\r\n\r\n    // We are only concerned about changes in the datasetId this control belongs to\r\n    return {\r\n        // Contains the slices/bars clicked by the user\r\n        datasetFilters: state.dashboard.chartClickFilters[controlData.data.dataProps.datasetId],\r\n        currControlGrouping: state.dashboard.chartTempGroupings[controlData.i]\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators({ clickChartSlice, selectChartGroup, clickPageLink }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReportControl);","import axios from 'axios';\r\n\r\nexport const fetchPageData = async (url, setIsLoading, setApiData) => {\r\n    setIsLoading(true);\r\n    const result = await axios.get(url)\r\n    .catch(error =>{\r\n        console.error(\"Error fetching page data from url\", url);\r\n    });\r\n    setIsLoading(false);\r\n    setApiData(result);\r\n}\r\n\r\nexport const fetchPageDataSync = async (url) => {\r\n    const result = await axios.get(url)\r\n    .catch(error =>{\r\n        console.error(\"Error fetching page data from url:\", url);\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\nexport const fetchPageDataAsync = async (url) => {\r\n    return axios.get(url)\r\n}","// This file contains the logic needed for filtering and slicing the data from rest api\r\n// Ideally, no need to implement such logic. This logic must be implemented @ the server side (API server)\r\n// -> In the future, should enforce this!\r\n// But because this logic was not implemented @ server side, we implement it here.\r\nimport {createMonthDate} from '../helper/util';\r\n\r\nconst bogusDataUuids = ['136a5d53-e9a8-4d29-a575-b90489df9f74']\r\n\r\n// cleanApiDataList is already sorted in ascending order\r\nconst findClosestStartDate = (refDate, cleanApiDataList) => {\r\n    for (let i = 0; i < cleanApiDataList.length; i++) {\r\n        let currApiData = cleanApiDataList[i];\r\n        let currApiStart = createMonthDate(currApiData.aprStart);\r\n        if (!!currApiStart && currApiStart >= refDate) {\r\n            return currApiData;\r\n        }\r\n    }\r\n}\r\n\r\nexport const findExecSummaryRecords = (apiData, downloadParams) => {\r\n    \r\n    if (!apiData || !apiData.data || !downloadParams) {\r\n        return null;\r\n    }\r\n    \r\n    let analysisPeriodFilter = downloadParams.analysisPeriod;\r\n    if (!analysisPeriodFilter) {\r\n        return null;\r\n    }\r\n\r\n    // temp: remove bogus data from apiData\r\n    let cleanApiDataList = apiData.data.filter(a => !bogusDataUuids.includes(a.uuid));\r\n    cleanApiDataList.sort((a, b) => {\r\n        let dateA = new Date(a.aprStart);\r\n        let dateB = new Date(a.aprEnd);\r\n\r\n        return dateA > dateB;\r\n    })\r\n\r\n    debugger\r\n    let retList = [];\r\n    let currAnalysisDate = createMonthDate(analysisPeriodFilter.start);\r\n    let analysisEndDate = createMonthDate(analysisPeriodFilter.end);\r\n    if (!currAnalysisDate || !analysisEndDate) {\r\n        return null;\r\n    }\r\n\r\n    while(true) {\r\n        debugger\r\n        // Find the closest start date from API \r\n        // If cannot find, end this loop\r\n        let closestApiDataStart = findClosestStartDate(currAnalysisDate, cleanApiDataList);\r\n        if (!closestApiDataStart) {\r\n            break;\r\n        }\r\n\r\n        let closestApiDataEndDate = createMonthDate(closestApiDataStart.aprEnd);\r\n        if (closestApiDataEndDate > analysisEndDate) {\r\n            // Remove the current closest from the array and search again.\r\n            let index = cleanApiDataList.findIndex(a=>a.uuid === closestApiDataStart.uuid);\r\n            cleanApiDataList.splice(index, 1);\r\n            continue;\r\n        }\r\n\r\n        retList.push(closestApiDataStart);\r\n        currAnalysisDate = closestApiDataEndDate;\r\n\r\n        // Remove used records too\r\n        let index = cleanApiDataList.findIndex(a=>a.uuid === closestApiDataStart.uuid);\r\n        cleanApiDataList.splice(index, 1);\r\n    }\r\n\r\n    return retList;\r\n}\r\n\r\nconst findRecordWithLatestEndDate = (data) => {\r\n    if (!Array.isArray(data)) {\r\n        return null;\r\n    }\r\n\r\n    let latestRecord = null;\r\n    let currLatestDate = null;\r\n    data.forEach(currRecord => {        \r\n        if (!latestRecord) {\r\n            latestRecord = currRecord;\r\n            currLatestDate = new Date(currRecord.aprEnd);\r\n            return;\r\n        }\r\n\r\n        let currEndDate = new Date(currRecord.aprEnd);\r\n        if (currEndDate > currLatestDate) {\r\n            latestRecord = currRecord;\r\n            currLatestDate = new Date(currRecord.aprEnd);\r\n        }\r\n    })\r\n\r\n    return latestRecord;\r\n}\r\n\r\nexport const filterExecSummaryByUuid = (apiData, pageFilters) => {\r\n    if (!apiData || !Array.isArray(apiData.data)) {\r\n        return null;\r\n    }\r\n    let uuidParam = Array.isArray(pageFilters) && pageFilters.find(p => p.name === 'uuid');\r\n    if (!uuidParam) {\r\n        // just find the apidata with latest APR end date\r\n        return findRecordWithLatestEndDate(apiData.data);\r\n    }\r\n\r\n    return apiData.data.find(a => a.uuid === uuidParam.value);\r\n}","import React, { useState, useEffect } from 'react';\r\nimport './reportForm.css';\r\nimport ReportControl from './reportControl';\r\nimport {fetchPageData} from '../api/pageApiManager';\r\nimport { Dimmer, Loader, Segment } from 'semantic-ui-react';\r\nimport {filterExecSummaryByUuid} from '../api/ExecutiveSummaryLogic';\r\n\r\n// CSS Grid based layout editor, but for reporting purposes only\r\n// This does not contain all the drag and drop functionality\r\nconst ReportForm = (props) => {\r\n\r\n\r\n    const findControlPojo = (controlId) => {\r\n        if (props.controls) {\r\n            console.log(\"findControlPojo: props is empty\");\r\n            return null;\r\n        }\r\n\r\n        let findControl = props.controls.find(control => control.i === controlId);\r\n        if (!findControl) {\r\n            console.log(\"findControlPojo: did not find the control with ID\", controlId); // just log it\r\n        }\r\n\r\n        return findControl;\r\n    }\r\n\r\n    const createEmptyControl = (inX, inY, id) => {\r\n        // Return a 1x1 control\r\n        return {\r\n            w: 1,\r\n            h: 1,\r\n            i: id,\r\n            x: inX,\r\n            y: inY\r\n        }        \r\n    }\r\n\r\n    const renderControl = (control, containerWidth, numCols) => {\r\n        return <ReportControl \r\n                key={'ctrl'+control.i} \r\n                controlData={control}\r\n                containerWidth={containerWidth}\r\n                numCols={numCols}\r\n                metadata={props.metadata}\r\n                layoutName={props.layoutName}\r\n                pageFilters={props.pageFilters}\r\n                pageApiData={filteredApiData}\r\n                />\r\n    }\r\n\r\n    // Returns an array containing the flat coordinates of the specified control\r\n    // E.g. Control is x:0, y:0, w:3, h:2, layoutWidth:10\r\n    // return: [0,   1,  2,         --> first row\r\n    //          10, 11, 12]         --> second row\r\n    const getFills = (control, layoutWidth) => {\r\n        let retList = [];\r\n        for (var iRow = 0; iRow < control.h; iRow++) {\r\n            for (var iCol = 0; iCol < control.w; iCol++) {\r\n                \r\n                let adjustedX = iCol + control.x; \r\n                let adjustedY = iRow + control.y;\r\n                retList.push(adjustedY * layoutWidth + adjustedX);\r\n            }\r\n        }\r\n\r\n        return retList;\r\n    }\r\n\r\n    const findLastNonEmptyRow = (controls, layoutData) => {\r\n        for (var iRow = layoutData.rows - 1; iRow >= 0; iRow--) {\r\n            let findControl = controls.find(ctrl => ctrl.y === iRow);\r\n            if(!!findControl && findControl.ctrlType !== 'pagebreak') {\r\n                return iRow;\r\n            }\r\n        }\r\n\r\n        return 0; // means there is no control; form is empty\r\n    }\r\n\r\n    // Returns true if the control is the only control in the rows where the control is placed\r\n    const isControlSolo = (control, layoutData) => {\r\n        let findOverlap = layoutData.find(layoutCtrl => \r\n            {\r\n                if (layoutCtrl.i === control.i) {\r\n                    return false;\r\n                }\r\n\r\n                // if one rect is on top of the other, there is no overlap\r\n                // if (rect2.bottom < rect1.top || rect2.top > rect1.bottom) {\r\n                if ((layoutCtrl.y + layoutCtrl.h - 1) < control.y || layoutCtrl.y > (control.y + control.h - 1)) {\r\n                    return false\r\n                }\r\n                \r\n                return true;\r\n            });\r\n        return !findOverlap;\r\n    }\r\n\r\n    // Return: array of arrays(1 array = group of controls that will be put together in 1 CSS grid or independent layout)\r\n    // For printing there are limitations with the PDF Renderer:\r\n    // [a] tables cannot be inside CSS grid, otherwise there will be overlaps if more than 1 page.\r\n    // [b] CSS grid does not support page break\r\n    // For the limitations above, we set the following workarounds (basically rearrange/override the layout to make it printer friendly):\r\n    // [a1] If table is the \"solo\" control of row(s), insert a page break and create a new group just for the table\r\n    // [a2] If table is not \"solo\", means the user is expecting the table to be very small.\r\n    //      Table will be rendered as-is. Risk of overlap would be there, but it's user's fault.\r\n\r\n\r\n\r\n    // [a1] while rendering row, if we find a table IN THE MIDDLE, skip rendering it first.\r\n    //      after processing all rows, if there are \"leftover\" tables, create a new group just for each leftover table.\r\n    // [a2] while rendering row, if we find tables FIRST, create a new group just for it already. \r\n    //      Render rest of controls of current row following [a1] or [a2] rule\r\n    // [b] Put a CSS page break for the succeeding section. User is expected to put the page breaks in the layout manually in order to make sure pagination is handled properly while printing.\r\n    //     If user puts 2 consecutive page breaks, will end up with 1 page break only.\r\n    // Should also skip the blank rows at the end (like trim-end, but retain blank rows in between or at the beginning)\r\n    const renderControls = (layoutData, controls, containerWidth) => {\r\n        let retList = [];  \r\n        if (!layoutData || !layoutData) {\r\n            return retList;            \r\n        }        \r\n        let fillMap = []; // way for us to monitor which cells are already filled up\r\n        let maxRow = findLastNonEmptyRow(controls, layoutData);\r\n        let currGroup = []; // List of controls that will be put together in 1 CSS-Grid layout\r\n        let currGroupPagination = false;\r\n        let bSetPagination = false; // Put a page-break-before in the next control to be rendered. \r\n\r\n        for (var iRow = 0; iRow <= maxRow; iRow++) {\r\n            let tableControls = []; // table controls to be rendered after we're done processing the entire row\r\n            for (var iCol = 0; iCol < layoutData.columns; iCol++) {\r\n                let flatCoord = iRow * layoutData.columns + iCol;\r\n                // if coordinate already filled, skip (to avoid misaligning controls)\r\n                // If user configured the XYWH coords properly, should not come here\r\n                if (fillMap.find(n => n === flatCoord)) {\r\n                    continue;\r\n                }\r\n\r\n                if (bSetPagination && iCol === 0) { // iCol should be 0 if there is pagination because pagebreak control will take up whole width\r\n                    // todo: add page break to the next empty/nonempty control\r\n                    // create a new group and push the previous group to retList\r\n                    if (currGroup.length > 0) {\r\n                        retList.push({groupType: 'section', pageBreak: currGroupPagination, items: currGroup});                        \r\n                    }\r\n                    currGroup = [];\r\n                    bSetPagination = false;\r\n                    currGroupPagination = true;\r\n                }\r\n\r\n                // try to find if there is a control associated\r\n                // otherwise just render an empty control\r\n                let findControl = controls.find(ctrl => ctrl.x == iCol && ctrl.y == iRow );\r\n                if (!findControl) {\r\n                    let emptyControlPojo = createEmptyControl(iCol, iRow, flatCoord); // plain old JS obj\r\n                    let emptyControlJsx = renderControl(emptyControlPojo, containerWidth, layoutData.columns);\r\n                    currGroup.push({\r\n                        id: emptyControlPojo.i,\r\n                        jsx: emptyControlJsx\r\n                    });\r\n                }\r\n                else if (findControl.ctrlType === 'pagebreak') {\r\n                    bSetPagination = true; // to be processed in the next iteration\r\n                    // Fill up the fillmap so that empty controls won't be rendered here\r\n                    let newFills = getFills(findControl, layoutData.columns)\r\n                    fillMap = fillMap.concat(newFills);\r\n                }\r\n                else if (findControl.ctrlType === 'table' && isControlSolo(findControl, controls)) {\r\n                                \r\n                    // finish up currGroup first\r\n                    if (currGroup.length > 0) {\r\n                        retList.push({groupType: 'section', pageBreak: currGroupPagination, items: currGroup});\r\n                        currGroupPagination = false;\r\n                    }\r\n                    currGroup = [];\r\n\r\n\r\n                    // render table now with full width...\r\n                    findControl.w = 12;\r\n                    let controlJsx = renderControl(findControl,  containerWidth, layoutData.columns);\r\n                    retList.push({groupType: 'table', pageBreak: currGroupPagination, \r\n                        items:[{\r\n                            id: findControl.i,\r\n                            jsx: controlJsx\r\n                        }\r\n                    ]});   \r\n                    currGroupPagination = false;                    \r\n\r\n                    // Update the fill map also\r\n                    let newFills = getFills(findControl, layoutData.columns)\r\n                    fillMap = fillMap.concat(newFills);\r\n                }\r\n\r\n                else {\r\n                    let controlJsx = renderControl(findControl, containerWidth, layoutData.columns);\r\n                    currGroup.push({\r\n                        id: findControl.i,\r\n                        jsx: controlJsx\r\n                    });\r\n                    let newFills = getFills(findControl, layoutData.columns)\r\n                    fillMap = fillMap.concat(newFills);\r\n                }\r\n            } // End of Column for-loop\r\n        } // End of Row for-loop\r\n        \r\n        if (currGroup.length > 0) {\r\n            retList.push({groupType: 'section', pageBreak: currGroupPagination, items: currGroup});\r\n        }\r\n\r\n        //debugger\r\n\r\n        return retList;\r\n    }\r\n\r\n    const renderGroups = (groups, divStyle) => {\r\n        return groups.map((group, index) => {\r\n            let formStyle = index > 0 && group.pageBreak ? {...divStyle, pageBreakBefore: \"always\"} : divStyle;\r\n            return <div className=\"reportForm\"\r\n                        style={formStyle}\r\n                        key={`reportForm-${group}-${index}`}\r\n                    >{group.items.map(control => {\r\n                return control.jsx\r\n            })}</div>\r\n        })\r\n    }\r\n\r\n    // Start of logic:\r\n    let {controls, layoutData, metadata,} = props;\r\n\r\n    // [A] Data preparation, in case there is page data\r\n    const [apiData, setApiData] = useState();\r\n    const [isLoading, setIsLoading] = useState(layoutData && layoutData.pageApiData);\r\n    useEffect(() => {     \r\n        if (layoutData && layoutData.pageApiData) {\r\n            fetchPageData(layoutData.pageApiData, setIsLoading, setApiData);\r\n        }\r\n    }, [layoutData && layoutData.pageApiData]); \r\n    let filteredApiData = filterExecSummaryByUuid(apiData, props.pageFilters);\r\n\r\n\r\n    // [B] Controls and layout preparation    \r\n    if (!layoutData || !controls || !metadata) {\r\n        console.log('render ReportForm...return null beacuse layout/controls/metadata is not yet fetched');\r\n        return null;\r\n    }\r\n    \r\n    console.log('render ReportForm...', layoutData);\r\n    debugger\r\n\r\n\r\n    // minus 50 for the left and right margin of PDF\r\n    let formWidth = document.URL.toLowerCase().includes('reporting') ? \r\n        window.innerWidth-50:\r\n        props.containerWidth;\r\n\r\n    //let groupsList = this.renderControls(layoutData, controls, window.innerWidth-50); // minus 50 for the left and right margin of PDF\r\n    let groupsList = renderControls(layoutData, controls, formWidth);\r\n\r\n    //let controlsJsx = controlsList.map(c => c.jsx);\r\n\r\n    var divStyle = {'gridTemplateColumns': `repeat(${layoutData.columns}, 1fr)`};\r\n\r\n    let reportTableData = {i: 'ctrl-table0', x: 0, y:1, w: 12, h: 2,ctrlType: 'table', data: {\r\n        label: 'Table:'\r\n    }};\r\n    let sectionData = {i: 'ctrl-section0', x: 0, y: 0, w: 12, h: 1, ctrlType: 'section', data: {\r\n        title: 'General Information',\r\n        //backgroundColor: 'lightsteelblue'\r\n        level: 1\r\n    }};\r\n\r\n    let tableData = {i: 'ctrl-table0', x: 0, y:6, w: 12, h: 2,ctrlType: 'table', data: {\r\n        label: 'Table:'\r\n    }};\r\n\r\n    return (\r\n    <div className=\"reportFormsContainer\" style={{maxWidth: `${formWidth}px`}}>\r\n        {/* {'[DEBUG] ContainerWidth: ' + window.innerWidth} */}\r\n        {renderGroups(groupsList, divStyle)}\r\n        {isLoading && <Dimmer active inverted>\r\n            <Loader>{`Fetching Page Data`}</Loader>\r\n            </Dimmer>\r\n        }\r\n    </div>\r\n    );    \r\n}\r\n\r\nexport default ReportForm;","import React from 'react';\r\nimport './designerToolbar.css';\r\nimport {Popup, Dropdown, Menu} from 'semantic-ui-react';\r\nimport {WIDTH_LARGE} from '../constants';\r\n\r\n// Generic toolbar Control that accepts the menu items and callbacks as props, e.g.\r\n/*\r\nconst menuItems = {\r\n    'left': [\r\n        {key:'designertb_save', icon: 'save', text: 'Save'},\r\n        {key:'designertb_saveas', icon: 'save outline', text: 'Save As...'},\r\n        {key:'designertb_open', icon: 'open folder outline', text: 'Open...'},\r\n    ],\r\n    'right': [\r\n        {key:'designertb_preview', icon: 'eye', text: 'Hold to Preview', disabled: true},\r\n    ]\r\n}\r\n*/\r\n\r\nconst renderToolbarBtn = (item) => {\r\n    let clsName = \"toolbarButton\";\r\n    if (item.disabled) {\r\n        clsName += \" toolbarButton-disabled\"\r\n    }\r\n    let btnType = item.type || null; // e.g. submit button, so that no need to specify callback\r\n    let callback = item.callback || null;    \r\n\r\n    return <button key={item.key} className={clsName} type={btnType} onClick={callback}>\r\n        <i className={'ui icon ' + item.icon}/>\r\n        {item.text}\r\n    </button>\r\n}\r\n\r\nconst renderFullMenu = (menuItems, title, titleTooltip) => {\r\n    return <div className=\"designerToolbar\">\r\n        <div className=\"left\">\r\n            {menuItems.left.map(item => renderToolbarBtn(item))}\r\n        </div>\r\n\r\n        <div className=\"center\">\r\n            {title && <div className=\"title\">{title}</div>}\r\n            {titleTooltip && <Popup \r\n                inverted\r\n                basic\r\n                size='tiny' style={{opacity: '0.8'}} \r\n                content={titleTooltip}\r\n                trigger={<div className=\"infoContainer\">\r\n                <i className=\"ui icon info circle\"/>\r\n            </div>} />}\r\n            \r\n            \r\n        </div>\r\n                \r\n        {menuItems.right && <div className=\"rightTb\">\r\n            {menuItems.right.map(item => renderToolbarBtn(item))}\r\n        </div>}\r\n        \r\n    </div>\r\n}\r\n\r\nconst renderCollapsedMenu = (menuItems, title, titleTooltip) => {\r\n    return <div className=\"designerToolbar\">\r\n        <div className=\"desginerDropdown\">\r\n            <i className=\"desginerDropbtn ui icon th\"/>\r\n            <div className=\"desginerDropdown-content\">\r\n                {menuItems.left.map(item => (<div key={item.key} className=\"desginerDropdown-item\">\r\n                    <i className={'ui icon ' + item.icon}/>\r\n                    <a>{item.text}</a>\r\n                </div>))}\r\n            </div>\r\n        </div>\r\n        &nbsp;\r\n        &nbsp;\r\n        {title && <div className=\"title\">{title}</div>}\r\n        {titleTooltip && <Popup \r\n            inverted\r\n            size='tiny' style={{opacity: '0.8'}} \r\n            content={titleTooltip} \r\n            trigger={<div className=\"infoContainer\">\r\n                <i className=\"ui icon info circle\"/>\r\n            </div>} \r\n        />}\r\n    </div>\r\n}\r\n\r\n\r\nconst Toolbar = ({containerWidth, menuItems, title, titleTooltip}) => {\r\n    if (containerWidth > WIDTH_LARGE || !containerWidth) {\r\n        return renderFullMenu(menuItems, title, titleTooltip);\r\n    }\r\n    else {\r\n        return renderCollapsedMenu(menuItems, title, titleTooltip);\r\n    }\r\n}\r\n\r\nexport default Toolbar;","import React, {useState} from 'react';\r\nimport Toolbar from '../components/toolbar';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\nimport {saveNodeConfig} from '../actions/index';\r\nimport './hierarchyConfigPanel.css';\r\nimport Form, {Text as FormText, FormCheckbox, Dropdown as FormDropDown} from '../form/Form';\r\nimport ShowMessage, {NotifType} from '../helper/notification';\r\n\r\n\r\n// This is the  Right hand panel of the Hierarchy Designer, containing the toolbar and hierarchy page settings\r\n\r\nconst onSave = () => {\r\n\r\n}\r\n\r\nconst defaultInherit = true;\r\nconst defaultDisplay = true;\r\nconst defaultSpecialView = false;\r\nconst defaultPage = null;\r\nconst defaultPdf = false;\r\n\r\nconst menuItems = {\r\n    'left': [\r\n        {key:'designertb_save', icon: 'check', text: 'Apply', type:'submit'},\r\n    ],\r\n}\r\n\r\n/*\r\nconst dummyPages = ['None - Do not show',\r\n    'Default Page',\r\n    'Plant Hierarchy Page',\r\n    'Area Summary Page',\r\n    'Target Default Page',\r\n    'Loops Summary Page',\r\n    'Valves Summary Page',\r\n    'Rotating Equipment Summary Page',\r\n    'Loop KPI Page',\r\n    'Loop Diagnostics Page',\r\n    'Valve KPI Page',\r\n    'Valve Diagnostics Page',\r\n];\r\n*/\r\n\r\nconst renderPageOptions = (name, savedLayouts, disabled=false) => {\r\n    // return <select>\r\n    //     {dummyPages.map((page) => <option key={'option_'+page} value={page}>{page}</option>)};\r\n    // </select>\r\n    let options = savedLayouts.map((layout) => {return {key: `option_${layout.name}`, text: layout.name, value: layout.name}});\r\n    return <FormDropDown\r\n        name={name}\r\n        label={null}\r\n        options={options}    \r\n        disabled={disabled}\r\n    />\r\n}\r\n\r\n// Called when component mounts\r\n// Purpose is to set the initial values\r\nconst setControlValues = (setValueFunc, inputObj) => {\r\n    if (!inputObj || !inputObj.selectedNode) {\r\n        return;\r\n    }\r\n\r\n    setValueFunc('key', inputObj.selectedNode.key); // invisible field\r\n\r\n    let findUserSettings = null || inputObj.userSettings && inputObj.userSettings.find(x => x.key === inputObj.selectedNode.key);\r\n    if (!findUserSettings) {\r\n        setValueFunc('name', inputObj.selectedNode.title);\r\n        setValueFunc('inherit', defaultInherit);\r\n        setValueFunc('pageAssoc', defaultPage);\r\n        setValueFunc('childDefaultPage', defaultPage);\r\n        setValueFunc('displayWeb', defaultDisplay);\r\n        setValueFunc('displayReport', defaultPdf);\r\n        setValueFunc('displayAsMapView', defaultSpecialView);\r\n        setValueFunc('displayAsAnalysisView', defaultSpecialView);\r\n    }\r\n    else {\r\n        setValueFunc('name', findUserSettings.dispName);\r\n        setValueFunc('inherit', findUserSettings.inherit);\r\n        setValueFunc('pageAssoc', findUserSettings.pageAssoc);\r\n        setValueFunc('childDefaultPage', findUserSettings.childDefaultPage);\r\n        setValueFunc('displayWeb', findUserSettings.displayWeb);\r\n        setValueFunc('displayReport', findUserSettings.displayReport);\r\n        setValueFunc('displayAsMapView', findUserSettings.displayAsMapView || defaultSpecialView);\r\n        setValueFunc('displayAsAnalysisView', findUserSettings.displayAsAnalysisView || defaultSpecialView);\r\n    }\r\n\r\n    if (!inputObj.selectedNode.parent) {\r\n        setValueFunc('inherit', false); // for first level children, always uncheck inherit\r\n    }\r\n\r\n}\r\n\r\nconst onSubmit = (formArgs, action) => {\r\n    console.log('hier config panel submit!', formArgs, action);\r\n    action({\r\n        key: formArgs.key,\r\n        dispName: formArgs.name,\r\n        inherit: formArgs.inherit,\r\n        pageAssoc: formArgs.pageAssoc,\r\n        childDefaultPage: formArgs.childDefaultPage,\r\n        displayWeb: formArgs.displayWeb,\r\n        displayReport: formArgs.displayReport,\r\n        displayAsMapView: formArgs.displayAsMapView,\r\n        displayAsAnalysisView: formArgs.displayAsAnalysisView\r\n    });\r\n\r\n    ShowMessage('Properties Applied!', NotifType.success, 'Please click Save to persist the settings to database')\r\n}\r\n\r\n// TODO: export this to a common module\r\nexport const findInheritedPage = (selectedNode, userSettings) => {\r\n    //console.log('findInheritedPage', selectedNode);\r\n    if (!selectedNode) {\r\n        return null;\r\n    }\r\n    let currNode = selectedNode;\r\n    while (currNode.parent) {\r\n        let findUserSetting = userSettings.find(s => s.key === currNode.parent.key);\r\n        if (!findUserSetting || !findUserSetting.childDefaultPage) {\r\n            currNode = currNode.parent;\r\n            continue;\r\n        }\r\n\r\n        return findUserSetting.childDefaultPage;\r\n    }\r\n\r\n    return 'Not set';\r\n}\r\n\r\nconst renderHierPanelContent = (selectedNode, userSettings, myState, savedLayouts) => {\r\n    console.log('renderHierPanelContent', selectedNode);\r\n    if (!selectedNode || !selectedNode.key) {\r\n        return <div className=\"ui message orange\">No node is selected</div>\r\n    }\r\n\r\n    const inheritedPageRowStyle = !selectedNode.parent ? {display: 'none'} : {};\r\n    const inheritedPageSpanStyle = !myState.inherit ? {display: 'none'} : {};\r\n\r\n    return <div className=\"hierconfigPanelContent\">\r\n        <div className=\"ui message\">Showing properties for: <b>{selectedNode.key}</b></div>        \r\n        <table className=\"formTable\">\r\n            <tbody>\r\n                <tr style={{display: 'none'}}>\r\n                    <th>Key</th>\r\n                    <td>\r\n                        {/* <input defaultValue={selectedNode.title}></input> */}\r\n                        <FormText\r\n                            key={selectedNode.key+'_key'}\r\n                            name={'key'}\r\n                            label={null}\r\n                        />\r\n                    </td>\r\n                </tr>                \r\n                <tr>\r\n                    <th>Display Name</th>\r\n                    <td>\r\n                        {/* <input defaultValue={selectedNode.title}></input> */}\r\n                        <FormText\r\n                            key={selectedNode.key+'_name'}\r\n                            name={'name'}\r\n                            label={null}\r\n                        />\r\n                    </td>\r\n                </tr>\r\n                <tr style={inheritedPageRowStyle}>\r\n                    <th>Inherit Default Page from Parent</th>\r\n                    <td>\r\n                        <FormCheckbox\r\n                            name='inherit'\r\n                        />\r\n                        {myState.inherit && <span>Inherited Page: </span>}\r\n                        {myState.inherit && <span>{findInheritedPage(selectedNode, userSettings)}</span>}\r\n                    </td>\r\n                </tr>                \r\n                <tr>\r\n                    <th>Page Associated</th>\r\n                    <td>\r\n                        {renderPageOptions('pageAssoc', savedLayouts, myState.inherit)}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Children Default Page</th>\r\n                    <td>\r\n                        {renderPageOptions('childDefaultPage', savedLayouts)}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Display in Web Browser</th>\r\n                    <td>\r\n                        <FormCheckbox\r\n                            name='displayWeb'\r\n                            disabled\r\n                        />\r\n                    </td>\r\n                </tr>                    \r\n                <tr>\r\n                    <th>Display in PDF Report</th>\r\n                    <td>\r\n                        <FormCheckbox\r\n                            name='displayReport'\r\n                        />\r\n                    </td>\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>Display as Map View tab</th>\r\n                    <td>\r\n                        <FormCheckbox\r\n                            name='displayAsMapView'\r\n                        />\r\n                    </td>\r\n                </tr>                                    \r\n\r\n                <tr>\r\n                    <th>Display as Analysis View tab</th>\r\n                    <td>\r\n                        <FormCheckbox\r\n                            name='displayAsAnalysisView'\r\n                        />\r\n                    </td>\r\n                </tr>                                    \r\n            </tbody>\r\n        </table>\r\n        {/* <div className=\"ui message olive\">TODO: Implement this panel as Tree List View to allow bulk edit</div> */}\r\n    </div>\r\n}\r\n\r\n// saveNodeConfig: redux action to save the node settings\r\n// selectedNode: from redux store\r\n// userSettings: from redux store\r\nconst HierConfigPanel = ({containerWidth, selectedNode, userSettings, saveNodeConfig, savedLayouts}) => {\r\n    console.log('render HierConfigPanel', userSettings);\r\n\r\n    const [myState, setMyState] = useState({\r\n        inherit: defaultInherit});\r\n\r\n    return <Form \r\n        className=\"hierConfigPanelContainer\" \r\n        // key='form' \r\n        onSubmit={(args) => onSubmit(args, saveNodeConfig)} \r\n        inputObj={{selectedNode, userSettings}}\r\n        inputObjId={selectedNode && selectedNode.key}\r\n        //inputObj={selectedNode} \r\n        setControlValues={setControlValues}\r\n        watchedField={'inherit'}\r\n        setStateCb={setMyState}\r\n        >        \r\n        <Toolbar \r\n            containerWidth={containerWidth}\r\n            menuItems={menuItems}\r\n        />\r\n        {renderHierPanelContent(selectedNode, userSettings, myState, savedLayouts)}\r\n        </Form>\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        hierarchyTree: state.hierarchyDesigner.hierarchyTree,\r\n        selectedNode: state.hierarchyDesigner.selectedNode,\r\n        userSettings: state.hierarchyDesigner.userSettings,\r\n        savedLayouts: state.mainApp.masterLayouts\r\n    }\r\n}\r\n  \r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({ saveNodeConfig }, dispatch);\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HierConfigPanel);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\nimport NoobSplitter from '../components/noobSplitter';\r\nimport DesignerContentbase from './designerContentBase';\r\nimport HierarchyTree from './hierearchyTree';\r\nimport ReportForm from '../components/reportForm';\r\nimport {selectDashboardTree} from '../actions';\r\nimport {findInheritedPage} from '../containers/hierarchyConfigPanel';\r\nimport {reconstructHierarchyStack, findNodeByKey} from '../helper/treefilter';\r\nimport './dashboardContent.css';\r\nimport { Button } from 'semantic-ui-react';\r\n//import ShowMessage, { NotifType } from '../helper/notification';\r\nimport Form, {FormDateRange, FormFilterInput} from '../form/Form';\r\nimport {dateRangeDropdownOptions} from '../form/FormDateRange';\r\n\r\nconst DEFAULT_SPLIT_SIZES = [15, 85];\r\n\r\n\r\n// Main Dashboard containing the Treeview (designed using Hierarchy Designer)\r\n// and Dashboard contents (layout designed using Forms Designer)\r\nclass DashboardContent extends DesignerContentbase { \r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ...this.state,\r\n            pageFilters: []\r\n        };\r\n    }\r\n\r\n    onSelect = (selectedKeys, info) => {\r\n        console.log(\"dashboard tree onSelect...\", selectedKeys, info);\r\n        if (selectedKeys.length > 0) {\r\n            this.props.selectDashboardTree(\r\n              selectedKeys[0]\r\n            );\r\n        }\r\n        else {\r\n            this.props.selectDashboardTree(null);\r\n        }\r\n\r\n        // Reset the page filter\r\n        this.setState({pageFilters: []});\r\n    }\r\n\r\n    getLayoutName = (userSettings, treeData) => {\r\n        let selectedNodeKey = this.props.selectedNodeKey;\r\n        if (!selectedNodeKey || !userSettings) {\r\n            return null;\r\n        }\r\n\r\n        // if there is an associated page, use that directly.\r\n        let findUserSetting = userSettings.find(setting => setting.key === selectedNodeKey);        \r\n        if (findUserSetting && findUserSetting.inherit === false) {\r\n            return findUserSetting.pageAssoc;\r\n        }\r\n        else {\r\n            // otherwise, use the inherited page\r\n            let findNode = findNodeByKey(treeData, selectedNodeKey);\r\n            if (!!findNode && findNode.item) {\r\n                return findInheritedPage(findNode.item, userSettings);\r\n            }            \r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getLayoutObj = (layoutName) => {\r\n        let findLayout = this.props.masterLayouts && this.props.masterLayouts.find(layout => layout.name === layoutName);\r\n        return {\r\n            controls: findLayout && JSON.parse(findLayout.layoutJson),\r\n            layoutData: findLayout && {\r\n                rows: findLayout.numRows,\r\n                columns: findLayout.numCols,\r\n                pageFilterFields: findLayout.pageFilterFields && JSON.parse(findLayout.pageFilterFields),\r\n                pageApiData: findLayout.pageApiData && JSON.parse(findLayout.pageApiData)\r\n            }\r\n        }\r\n    }\r\n\r\n    // This is for debugging only!\r\n    renderDatasetFilters = () => {\r\n        if (!this.props.chartClickFilters || Object.keys(this.props.chartClickFilters).length <= 0) {\r\n            return null;\r\n        }\r\n\r\n        return (<table id=\"dashboardFiltersTable\">\r\n            <thead>\r\n                <tr style={{border: \"1px solid gray\"}}>\r\n                    <td>Dataset ID</td>\r\n                    <td>Control ID</td>\r\n                    <td>Stack ID</td>\r\n                    <td>Own Filter</td>\r\n                    <td>Own Series</td>\r\n                    {/* <td>Carryover Filter</td> */}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                Object.keys(this.props.chartClickFilters).map((datasetId, iDataset) => {\r\n                    let currDatasetFilters = this.props.chartClickFilters[datasetId];\r\n                    return Object.keys(currDatasetFilters).map((currCtrlId, iCtrl) => {\r\n                        let currControlFilter = currDatasetFilters[currCtrlId];   \r\n                        return Object.keys(currControlFilter).map((currStackStr, iStack) => {\r\n                            let currStackFilter = currControlFilter[currStackStr];\r\n                            let sliceInfo = currStackFilter.sliceInfo;\r\n                            let seriesInfo = currStackFilter.seriesInfo;\r\n                            return <tr key={`filterTable-${iStack}`} style={{border: \"1px solid gray\"}}>\r\n                                <td>Dataset: {datasetId}, </td>\r\n                                <td>ControlId: {currCtrlId}, </td>\r\n                                <td>Group: {currStackStr}, </td>\r\n                                <td>{JSON.stringify(sliceInfo.origObj)}</td>\r\n                                <td>{JSON.stringify(seriesInfo)}</td>\r\n                                {/* <td>{JSON.stringify(currStackFilter.carryOverFilters)}</td> */}\r\n                            </tr>\r\n                        })\r\n                        \r\n                    })\r\n                })\r\n            }\r\n            </tbody>\r\n        </table>)\r\n    }\r\n\r\n    // For now, just hard code \"analysis period\". No time to implement proper checking!\r\n    onSubmitFilter = (filterData, layoutObj) => {\r\n        console.log('[dashboard filter submit]', filterData);\r\n        if (!Array.isArray(layoutObj.layoutData.pageFilterFields)) {\r\n            return;\r\n        }\r\n        let pageFiltersFormatted = [];\r\n        layoutObj.layoutData.pageFilterFields.forEach(layoutFilter => {\r\n            if (layoutFilter.toLocaleLowerCase() === 'analysisperiod') {\r\n                pageFiltersFormatted.push({\r\n                    name: \"AnalysisPeriod\",\r\n                    value: filterData.AnalysisPeriod.value,\r\n                    startDate: filterData.AnalysisPeriod.start,\r\n                    endDate: filterData.AnalysisPeriod.end\r\n                });\r\n            }\r\n            else if (!!filterData[layoutFilter] && filterData[layoutFilter].length > 0){\r\n                pageFiltersFormatted.push({\r\n                    name: layoutFilter,\r\n                    value: filterData[layoutFilter]\r\n                });\r\n            }\r\n    \r\n        });\r\n\r\n        this.setState({\r\n            pageFilters: pageFiltersFormatted\r\n        })\r\n    }\r\n\r\n    // Renders 1 filter\r\n    renderPageFilter = (filterName, metadata) => {\r\n        // Find the metadata first, then get the datatype, then render the filter based on the datatype\r\n        // TODO: check the metadata\r\n        if (filterName.toLocaleLowerCase() === 'analysisperiod') {\r\n            return <FormDateRange key={'pageFilter_'+filterName} name={filterName} label=\"Analysis Period:\"\r\n            />\r\n        }\r\n        else {\r\n            return <FormFilterInput key={'pageFilter_'+filterName} name={filterName}/>\r\n        }\r\n    }\r\n\r\n    setPageFilterControlValues = (setValueFunc, pageFilterFields) => {\r\n        if (!Array.isArray(pageFilterFields)) {\r\n            return;\r\n        }\r\n\r\n        pageFilterFields.forEach(filterName => {\r\n            if (filterName.toLocaleLowerCase() === 'analysisperiod') {\r\n                setValueFunc(\"AnalysisPeriodValue\", dateRangeDropdownOptions[0].value)\r\n            }\r\n        });\r\n    }\r\n\r\n    renderPageToolbar = (layoutObj, metadata, layoutName) => {\r\n        if (!layoutObj || !layoutObj.layoutData || !Array.isArray(layoutObj.layoutData.pageFilterFields) || layoutObj.layoutData.pageFilterFields.length <= 0) {\r\n            return null;\r\n        }\r\n\r\n        return <Form className=\"pageToolbar\" \r\n            key='formDataDesigner' \r\n            onSubmit={(formData) => {this.onSubmitFilter(formData, layoutObj)}} \r\n            // onSubmit={data => {debugger}}\r\n            setControlValues={this.setPageFilterControlValues}\r\n            // watchedField={[]}\r\n            // // inputObj: set it to the loaded data source when saving is implemented\r\n            inputObj={layoutObj.layoutData.pageFilterFields} \r\n            inputObjId={layoutName}\r\n            // setStateCb={setStateCb}\r\n            >\r\n            <div className=\"pageToolbarFieldContainer\">\r\n            {layoutObj.layoutData.pageFilterFields.map(pageFilter => {\r\n                return (this.renderPageFilter(pageFilter, metadata));\r\n            })}\r\n            </div>    \r\n            <div className=\"toolbarButtonContainer\">\r\n            <Button primary fluid={false} size='small'>Apply Filter</Button>\r\n            </div>  \r\n            </Form>\r\n    }\r\n\r\n    renderForm = (layoutName, layoutObj, metadata) => {\r\n        if (!this.props.selectedNodeKey) {\r\n            return <div className=\"ui message orange\">Please select a node from the treeview on the left!</div>\r\n        }\r\n        return <div>\r\n            {this.renderPageToolbar(layoutObj, metadata, layoutName)}\r\n            {/* {this.renderDatasetFilters()} */}\r\n            <ReportForm\r\n                containerWidth={this.state.rightPixels}\r\n                layoutData={layoutObj.layoutData}\r\n                controls={layoutObj.controls}\r\n                metadata={metadata}\r\n                layoutName={layoutName}\r\n                pageFilters={this.state.pageFilters}\r\n            />\r\n        </div>\r\n    }\r\n    \r\n    render() {\r\n        console.log('render dashboard...', this.props.selectedNodeKey);\r\n        let treeData = this.props.hierarchyView && reconstructHierarchyStack(JSON.parse(this.props.hierarchyView.hierarchyJson));\r\n        let userSettings = this.props.hierarchyView && JSON.parse(this.props.hierarchyView.nodeSettingsJson)\r\n        let layoutName = this.getLayoutName(userSettings, treeData);\r\n        let layoutObj = this.getLayoutObj(layoutName);\r\n        // TODO: Put a minsize first. Should make the toolbar buttons responsive.\r\n        // Given the selectedNode, render the appropriate layout\r\n        return <NoobSplitter id=\"hierarchyDesigner\" onDragEnd={this.onSplitDragEnd} defaultSize={DEFAULT_SPLIT_SIZES} minSize={230}>\r\n            {this.props.hierarchyView && <HierarchyTree \r\n                    onSelectCb={this.onSelect} \r\n                    selectedNodeKey={this.props.selectedNodeKey}\r\n                    // onHierarchyChanged={this.onHierarchyChanged}\r\n                    treeData={treeData}\r\n                    userSettings={userSettings}\r\n                    controlledExpansion\r\n                    hiddenNodesSettings={['displayAsMapView', 'displayAsAnalysisView']}\r\n                    defaultExpandAll={true}\r\n            />\r\n            }\r\n            {this.renderForm(layoutName, layoutObj, this.props.metadata)}            \r\n        </NoobSplitter>\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    // Select the appropriate hierarchy tree to be included into the props\r\n    let masterHierarchyViews = state.mainApp.masterHierarchyViews;\r\n    let defaultView = masterHierarchyViews && masterHierarchyViews[0];\r\n    \r\n    return {\r\n        hierarchyView: defaultView,\r\n        masterLayouts: state.mainApp.masterLayouts,\r\n        selectedNodeKey: state.dashboard.selectedNodeKey,\r\n        chartClickFilters: state.dashboard.chartClickFilters,\r\n        metadata: state.mainApp.masterMetadata\r\n    }\r\n}\r\n  \r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({selectDashboardTree }, dispatch);\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardContent);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\nimport PropTypes from 'prop-types';\r\nimport ReactDOM from 'react-dom';\r\nimport Tree, { TreeNode } from 'rc-tree';\r\nimport 'rc-tree/assets/index.css';\r\nimport './treeview.css';\r\n//import './basic.less';\r\nimport { selectToolPanelTree } from '../actions/index';\r\n\r\nconst treeDataSample = [\r\n  { key: '0-0', title: 'Plant', children:\r\n    [\r\n      { key: '0-0-0', title: 'Area1', isCollapsed: true, children:\r\n        [\r\n          { key: '0-0-0-0', title: 'Apple' },\r\n        ],\r\n      },\r\n      { key: '0-0-1', title: 'Area2', children:\r\n          [\r\n            { key: '0-0-1-0', title: 'Banana',},\r\n            { key: '0-0-1-1', title: 'Carrot' },\r\n            { key: '0-0-1-2', title: 'Dolphin' },\r\n            { key: '0-0-1-3', title: 'Elephant' },\r\n            { key: '0-0-1-4', title: 'Father' },\r\n            { key: '0-0-1-5', title: 'Germany' },\r\n            { key: '0-0-1-6', title: 'Holland' },\r\n            { key: '0-0-1-7', title: 'India' },\r\n            { key: '0-0-1-8', title: 'Japan' },\r\n            { key: '0-0-1-9', title: 'Kristaps' },\r\n            { key: '0-0-1-10', title: 'Lion' },\r\n            { key: '0-0-1-11', title: 'Mexico' },\r\n            { key: '0-0-1-12', title: 'Nigeria' },\r\n            { key: '0-0-1-13', title: 'Carrot Apple' },\r\n            { key: '0-0-1-14', title: 'Strawberry Banana' },\r\n            { key: '0-0-1-15', title: 'Godfather' },\r\n            { key: '0-0-1-16', title: 'Indian Mango' },\r\n            { key: '0-0-1-17', title: 'Dandelion' },\r\n            { key: '0-0-1-18', title: 'Lionel' },\r\n            { key: '0-0-1-19', title: 'Millionaire' },\r\n            { key: '0-0-1-20', title: 'The quick brown fox jumps over the lazy dog' },\r\n            { key: '0-0-1-21', title: 'abcdefghijklmnopqrstuvwxyz123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' },\r\n            { key: '0-0-1-22', title: '床前明月光,疑是地上霜,举头望明月,低头思故乡' },\r\n          ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nclass DemoTree extends React.Component {\r\n  static propTypes = {\r\n    keys: PropTypes.array,\r\n  };\r\n  static defaultProps = {\r\n    keys: ['0-0', '0-0-1', '//Plant'],\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    const keys = props.keys;\r\n    this.state = {\r\n      defaultExpandedKeys: keys,\r\n      //defaultSelectedKeys: keys,\r\n      defaultSelectedKeys: [],\r\n      defaultCheckedKeys: keys,\r\n    };\r\n  }\r\n  onExpand = (...args) => {\r\n    console.log('onExpand', ...args);\r\n  };\r\n  onSelect = (selectedKeys, info) => {\r\n    console.log('selected', selectedKeys, info);\r\n    this.selKey = info.node.props.eventKey;\r\n    // Fire an action to save the selected node to Redux\r\n    //this.props.selectToolPanelTree(this.selKey);\r\n    if (selectedKeys.length > 0) {\r\n        this.props.selectToolPanelTree({\r\n          key: selectedKeys[0], \r\n          ...info.selectedNodes[0].props\r\n        });\r\n    }\r\n    else {\r\n        this.props.selectToolPanelTree(null);\r\n    }\r\n\r\n    if (this.tree) {\r\n      console.log(\r\n        'Selected DOM node:',\r\n        selectedKeys.map(key => ReactDOM.findDOMNode(this.tree.domTreeNodes[key])),\r\n      );      \r\n    }\r\n  };\r\n  onCheck = (checkedKeys, info) => {\r\n    console.log('onCheck', checkedKeys, info);\r\n  };\r\n  onEdit = () => {\r\n    setTimeout(() => {\r\n      console.log('current key: ', this.selKey);\r\n    }, 0);\r\n  };\r\n  onDel = (e) => {\r\n    if (!window.confirm('sure to delete?')) {\r\n      return;\r\n    }\r\n    e.stopPropagation();\r\n  };\r\n  setTreeRef = (tree) => {\r\n    this.tree = tree;\r\n  };\r\n\r\n  Icon = (props) => {\r\n      //console.log('icon', props)\r\n      if (props.nodeType === 'Plant' || props.nodeType === 'Folder' || props.children.length > 0) {\r\n        return <i className='ui icon folder outline'></i>\r\n      }\r\n      else {\r\n        \r\n        return <i className='ui icon genderless'></i>\r\n      }\r\n      \r\n  }\r\n\r\n  // Sample filter...\r\n  // It only highlights the node, instead of hiding everything else.\r\n  // TODO: change this behaviour\r\n  Filterer = (node) => {\r\n      //console.log('Filterer', node);\r\n    //   if (node.props.title === 'Apple') {\r\n    //       return true\r\n    //   }\r\n      return false;\r\n  }\r\n\r\n  getSwitcherIcon = (node) => {\r\n    if (node.isLeaf) {\r\n      return null;\r\n    }\r\n\r\n    if (node.expanded) {\r\n      return <i className=\"ui icon angle down\"></i>  \r\n    }\r\n    return <i className=\"ui icon angle right\"></i>\r\n  }\r\n\r\n  render() {\r\n    let treeDataArr = convertMasterDataToKeys(this.props.masterHierarchy);\r\n    if(!treeDataArr) {\r\n      return <div>Loading...</div>\r\n    }\r\n\r\n    console.log('render demo tree...', this.props.masterHierarchy);\r\n    return (    \r\n    <div>\r\n        <div className=\"ui icon input small\" style={{margin: \"5px\", width: \"calc(100% - 10px)\"}}>\r\n            <input type=\"text\" placeholder=\"Search tree...\"/>\r\n            <i className=\"inverted circular filter icon\"></i>\r\n        </div>\r\n        <Tree style={{overflow: \"auto\", height: \"100%\", width: \"calc(100%)\", padding: \"0 0 20 0\"}}\r\n            className=\"myCls\"\r\n            showLine\r\n            selectable\r\n            checkable={false}\r\n            //defaultExpandAll\r\n            onExpand={this.onExpand}\r\n            defaultExpandedKeys={this.state.defaultExpandedKeys}\r\n            defaultSelectedKeys={this.state.defaultSelectedKeys}\r\n            defaultCheckedKeys={this.state.defaultCheckedKeys}\r\n            onSelect={this.onSelect}\r\n            onCheck={this.onCheck}\r\n            //treeData={treeData}\r\n            treeData={[treeDataArr]}\r\n            icon={this.Icon}\r\n            filterTreeNode={this.Filterer}\r\n            switcherIcon={this.getSwitcherIcon}\r\n        />\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst convertMasterDataToKeys = (apiNode) => {\r\n  if (!apiNode) {\r\n    return null;\r\n  }\r\n\r\n  let childNodes = [];\r\n  let treeData = {\r\n    key: apiNode.fullPath,\r\n    title: apiNode.name,\r\n    nodeType: apiNode.nodeType,\r\n    category: apiNode.category\r\n  };\r\n\r\n  if (apiNode.children) {\r\n    apiNode.children.forEach(node => {\r\n      childNodes.push(convertMasterDataToKeys(node));\r\n    })\r\n\r\n    treeData.children = childNodes;\r\n  }\r\n\r\n  return treeData;\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    masterHierarchy: state.mainApp.masterHierarchy\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({ selectToolPanelTree }, dispatch);\r\n}\r\n\r\n//export default DemoTree;\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DemoTree)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './toolAvailableData.css';\r\n\r\nconst renderAvailableData = (items) => {\r\n    if (!items) {\r\n        return null;\r\n    }\r\n     \r\n    return items.map( (item) => {\r\n        //debugger\r\n        return <div key={item.name} className=\"ui grey horizontal label large availableData\" draggable=\"true\">{item.name}</div>\r\n    })\r\n}\r\n\r\nconst GetAvailableItems = (node, masterAvailableData) => {\r\n    let retList = [];\r\n    if (!masterAvailableData || !node) {\r\n        return retList;\r\n    }\r\n   \r\n    // [1] Check if there is any hierarchy that matches\r\n    let findMatchHierarchy = masterAvailableData.find(m => m.selectionType === 'HierarchyName' && m.hierarchy === node.key);\r\n    if (!!findMatchHierarchy) {\r\n        retList = retList.concat(findMatchHierarchy.kpiNameList);    \r\n    }\r\n    \r\n\r\n    // [2] Check Categories that match\r\n    if (!!node.category) {\r\n        let findMatchCategory = masterAvailableData.find(m => m.selectionType === 'Category' && m.category === node.category);\r\n        if (!!findMatchCategory) {\r\n            retList = retList.concat(findMatchCategory.kpiNameList);    \r\n        }\r\n    }\r\n\r\n    // [3] Check Node Types that match\r\n    if (!!node.nodeType) {\r\n        let findMatchNodeType = masterAvailableData.find(m => m.selectionType === 'NodeType' && m.nodeType === node.nodeType);\r\n        if (!!findMatchNodeType) {\r\n            retList = retList.concat(findMatchNodeType.kpiNameList);  \r\n        }\r\n    }\r\n\r\n    console.log('GetAvailableItems', retList);\r\n    return retList.map(kpi => {return {name: kpi}});\r\n}\r\n\r\nconst ToolAvailableData = (props) => {\r\n\r\n    let {selectedNode} = props;\r\n    if (!selectedNode) {\r\n        return <div className=\"ui warning message\">\r\n            <i className=\"ui icon exclamation circle large\"></i>\r\n            Please select a target or folder from the Hierarchy tree above\r\n        </div>\r\n    }\r\n\r\n    let availableItems = GetAvailableItems(selectedNode, props.masterAvailableData);\r\n    return <div className=\"dataContainer\">\r\n        Showing Available Data for key: {selectedNode.key}\r\n        {renderAvailableData(availableItems)}\r\n    </div>\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { \r\n        selectedNode: state.designer.toolPanelTreeSelected ,\r\n        masterAvailableData: state.mainApp.masterAvailableData,\r\n    };\r\n}\r\n\r\n//export default ToolAvailableData;\r\nexport default connect(mapStateToProps)(ToolAvailableData)","// Testing the scrollspy library\r\nimport React from 'react';\r\nimport Scrollspy from 'react-scrollspy';\r\nimport '../styles/Scrollspy.css';\r\n\r\nclass scrollTracker extends React.Component {\r\n    // return <div>\r\n    render() {\r\n        return <Scrollspy \r\n            items={ ['section-title', 'section-1', 'section-2', 'section-3', 'section-4']} \r\n            rootEl=\"#homeRight\"\r\n            currentClassName=\"current\">\r\n            <li><a href=\"#section-title\">Title</a></li>\r\n            <li><a href=\"#section-1\">Sunflower</a></li>\r\n            <li><a href=\"#section-2\">Happier</a></li>\r\n            <li><a href=\"#section-3\">I Took a Pill in Ibiza</a></li>\r\n            <li><a href=\"#section-4\">Animals</a></li>\r\n            {/* </div> */}\r\n        </Scrollspy>;\r\n    }\r\n  \r\n}\r\n\r\nexport default scrollTracker;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Form as SemanticForm, Segment, Button} from \"semantic-ui-react\";\r\nimport Form, {Dropdown as FormDropDown} from '../form/Form';\r\nimport './settingsContent.css';\r\nimport ShowMessage, {NotifType} from '../helper/notification';\r\nimport {deleteImage, fetchImages} from '../actions';\r\n\r\n\r\n\r\nexport const convertToDropdownOptions = (imagesStrArr) => {\r\n    if (!Array.isArray(imagesStrArr)) {\r\n        return [];\r\n    }\r\n\r\n    return imagesStrArr.map(image => {\r\n        return {\r\n            key: image,\r\n            text: image,\r\n            value: image\r\n        };\r\n    })\r\n}\r\n\r\n\r\nconst SettingsContent = () => {\r\n    const reduxStoreImages = useSelector(state => state.mainApp.masterImages);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleFormSubmit = (args) => {\r\n        // Actually, this function is called prior to successful submission (todo: fix the timing)\r\n        ShowMessage(\"Image uploaded!\", NotifType.success, \"Please refresh the browser to see it in the image lists!\");\r\n        // dispatch(fetchImages()); // does not work because this function is called prior to \r\n    }\r\n\r\n    const onSubmitDelete = (formData) => {\r\n        if (!formData || !formData.settingsImageDropdown) {\r\n            return;\r\n        }\r\n    \r\n        let fileName = formData.settingsImageDropdown;\r\n        dispatch(deleteImage(fileName)).then( () => {            \r\n            console.log('deleted image!');\r\n            ShowMessage(\"Deleted Image!\");\r\n            dispatch(fetchImages());\r\n        });\r\n    }\r\n    \r\n\r\n    return <div className=\"settingsContentContainer\">\r\n        <iframe name=\"hiddenFrame\" className=\"hiddenFrame\"></iframe>\r\n        <Segment>\r\n            <div className=\"segmentTitle\">Upload Image</div>\r\n            <form method=\"post\" \r\n                className=\"uploadImageForm\"\r\n                encType=\"multipart/form-data\" \r\n                action=\"http://localhost:5000/fileupload\" \r\n                target=\"hiddenFrame\"\r\n                onSubmit={handleFormSubmit}>\r\n                <input className=\"ui button fileInputImageUpload\" type=\"file\" name=\"uploadedFile\" accept=\"image/*\"/>\r\n                <br/>\r\n                <br/>\r\n                <input className=\"ui button primary submitBtnImageUpload\" type=\"submit\" name=\"upload\"/>\r\n            </form>\r\n        </Segment>\r\n\r\n        <Segment>\r\n            <div className=\"segmentTitle\">Delete Image</div>\r\n            <Form className=\"deleteImageForm\" onSubmit={onSubmitDelete}>\r\n                <FormDropDown\r\n                    name=\"settingsImageDropdown\"\r\n                    options={convertToDropdownOptions(reduxStoreImages)}\r\n                    fluid={false}\r\n                />\r\n                <Button color=\"red\">Delete</Button>\r\n            </Form>\r\n        </Segment>\r\n    </div>\r\n}\r\n\r\nexport default SettingsContent;","import React, {useState, useEffect} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {Modal, Header, Button, Icon, Image} from 'semantic-ui-react';\r\nimport Form, {Text as FormText, Dropdown as FormDropdown, FormImageCoord} from '../form/Form';\r\nimport './imageMapConfigDialog.css';\r\nimport ImageMapper from '../controls/imageMapperLib';\r\nimport {convertToDropdownOptions} from '../containers/settingsContent';\r\nimport {getAprBaseUrl} from '../api/masterData';\r\nimport {applyImageMapProps} from '../actions';\r\n\r\nconst KEY_NAME = \"dropdownImage\";\r\n\r\nconst DEFAULTMAP = {\r\n\tname: \"imageConfigMap\",\r\n    areas: [],\r\n}\r\n\r\nconst DEFAULT_COORDS = {x: -1, y: -1};\r\nconst DEFAULT_NAME = 'SPOT X';\r\n\r\nconst ImageMapConfigDialog = ({showOpenForm, onCloseOpenConfigDialog, selectedControl}) => {\r\n    let initialImage, initialMap;\r\n    if (selectedControl && selectedControl.data && selectedControl.data.imageProps) {\r\n        initialImage = selectedControl.data.imageProps.image;\r\n        initialMap = selectedControl.data.imageProps.map;\r\n    }\r\n\r\n    // Watch the state, to disable the Save button if it's empty\r\n    const [myState, setMyState] = useState({dropdownImage: initialImage}); // bound to the dropdown watch field\r\n    // TODO: Remove all existing hostpots if user changed the image?\r\n    //const [imageName, setImageName] = useState(null); // our own tracking\r\n\r\n    const [addingHotspot, setAddingHotspot] = useState(false);\r\n    const [coords, setCoords] = useState(DEFAULT_COORDS); // Current mouse move coordinates\r\n    const [map, setMap] = useState(initialMap || DEFAULTMAP); // For the image mapper\r\n    const reduxStoreImages = useSelector(state => state.mainApp.masterImages);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        console.log(\"imagemap config useEffect\", initialMap);\r\n        if (initialImage) {\r\n            setMyState({dropdownImage: initialImage});\r\n        }\r\n        if (initialMap) {\r\n            setMap(initialMap);\r\n        }\r\n    }, [initialImage, initialMap]);\r\n\r\n    const handleHostpotBtnClick = () => {\r\n        setAddingHotspot(!addingHotspot);\r\n    }\r\n\r\n    // This will be the \"permanent name\" of the spot.\r\n    // Purpose is just for unique identifier.\r\n    // The user can still change the \"display name\" though\r\n    const generateSpotName = () => {\r\n        if (!map || !Array.isArray(map.areas)) {\r\n            return \"SPOT 0\";\r\n        }\r\n        let candidateVal = 0;\r\n        while(true) {\r\n            let candidateName = `SPOT ${candidateVal}`;\r\n            if (!map.areas.find(a => a.name === candidateName)) {\r\n                return candidateName;\r\n            }\r\n            candidateVal++;\r\n        }\r\n    }\r\n\r\n    const handleMouseMove = (evt) => {\r\n        if (!addingHotspot) {\r\n            return;\r\n        }     \r\n        const coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\r\n        //console.log('handleMouseMove', coords);\r\n        //setCoords(coords);\r\n    }\r\n\r\n    const handleMouseClick = (evt) => {\r\n        const currCoords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\r\n        console.log('handleMouseClick', currCoords);\r\n        setAddingHotspot(false);\r\n        if (!addingHotspot) {\r\n            return;\r\n        }\r\n        if (currCoords.x  < 0 || currCoords.y < 0) {\r\n            return;\r\n        }\r\n        \r\n        let mapClone = {...map};\r\n        setMap(mapClone);\r\n        mapClone.areas = [...map.areas];\r\n        mapClone.areas.push({\r\n            name: generateSpotName(), shape: \"circle\", coords: [currCoords.x, currCoords.y, 15 ], preFillColor: \"red\"\r\n        });\r\n\r\n        //setCoords(DEFAULT_COORDS);\r\n    }\r\n\r\n    const renderCoordsForm = () => {\r\n        console.log('renderCoordsForm', map.areas)\r\n        return <div className=\"coordContainer\">\r\n        {map.areas.map(area => {\r\n            return <FormImageCoord key={\"formImageArea-\" + area.name} name={area.name}\r\n                x={area.coords[0]}\r\n                y={area.coords[1]}\r\n                color={area.preFillColor}\r\n                />\r\n            })\r\n        }\r\n        </div>\r\n    }\r\n\r\n    const handleChangeImage = (evt, data) => {\r\n        // Does not work. Anticipate changes using watchFields\r\n    }\r\n\r\n    const handleClose = () => {\r\n        if (!onCloseOpenConfigDialog) {\r\n            return;\r\n        }\r\n        onCloseOpenConfigDialog(false);\r\n    }\r\n\r\n    const handleSubmit = (formData) => {\r\n        console.log('handleSubmit, formData:', formData);\r\n        let image = null;\r\n        let areas = [];\r\n\r\n        for (let prop in formData) {\r\n            if (prop === \"dropdownImage\") {\r\n                image = formData[prop];\r\n            }\r\n            else {\r\n                let areaData = formData[prop];\r\n                areas.push({\r\n                    name: areaData.name,\r\n                    shape: \"circle\", \r\n                    coords: [areaData.x, areaData.y, 15 ], \r\n                    preFillColor: areaData.color\r\n                })\r\n            }\r\n        }\r\n        \r\n        let newMap = {\r\n            name: `${selectedControl.i}-imageConfigMap`,\r\n            areas: areas\r\n        };\r\n\r\n        console.log('handleSubmit, newMap:', newMap);\r\n        setMap(newMap);\r\n        \r\n        //console.log('handleSubmit, map', map);\r\n        // Fire a redux action\r\n        dispatch(applyImageMapProps(image, newMap, selectedControl));        \r\n    }\r\n\r\n    // This function is called every render to initialize the values\r\n    const setHotspotValues = (setValueFunc, mapParam) => {\r\n        if (!map || !Array.isArray(map.areas)) {\r\n            return;\r\n        }\r\n\r\n        // if (!Array.isArray(mapParam)) {\r\n        //     return;\r\n        // }\r\n\r\n        console.log(\"setHotspotValues\", );\r\n        setValueFunc('dropdownImage', myState.dropdownImage);\r\n\r\n        map.areas.forEach(area => {\r\n            setValueFunc(area.name+'.name', area.name); // this is just the display name\r\n            setValueFunc(area.name+'.x', area.coords[0]);\r\n            setValueFunc(area.name+'.y', area.coords[1]);\r\n            setValueFunc(area.name+'.color', area.preFillColor);\r\n        });\r\n    }\r\n\r\n    console.log('ImageMapConfigDialog render', selectedControl.i, map);\r\n    // We just need a unique identifier for the form to rerender itself\r\n    let inputObjId = JSON.stringify({\r\n        controlId: selectedControl.i,\r\n        map: map\r\n    });\r\n\r\n    return <Modal open={showOpenForm}  \r\n        closeOnDimmerClick={true}\r\n        className=\"imageMapConfigDialog\"\r\n        size=\"fullscreen\"\r\n    >\r\n    <Modal.Content className=\"imageMapContent\">\r\n        <div className=\"imageMapContentContainer\">\r\n            <Form className=\"imageMapForm\" onSubmit={handleSubmit} \r\n                watchedField={'dropdownImage'}\r\n                setStateCb={setMyState}\r\n                setControlValues={setHotspotValues}\r\n                inputObj={map}\r\n                inputObjId={inputObjId}>\r\n                <div className=\"formBodyImgMapConfig\">\r\n                    <h4>Configure ImageMap Control</h4>\r\n\r\n                    <FormDropdown key={'dropdownImage'}\r\n                        name={'dropdownImage'}\r\n                        label=\"Select Image:\"\r\n                        options={convertToDropdownOptions(reduxStoreImages)}\r\n                        size=\"small\"\r\n                        // onChange={handleChangeImage}\r\n                    />\r\n                    <Button toggle type=\"button\" active={addingHotspot} onClick={handleHostpotBtnClick} disabled={addingHotspot || !myState || !myState.dropdownImage}>\r\n                        <Icon name=\"plus\"/>\r\n                        {addingHotspot ? \"Click on a spot in image\" : \"Add Hotspot\"}\r\n                    </Button>\r\n                    {addingHotspot && <div>{`Image coords: ${coords.x}, ${coords.y}`}</div>}\r\n                    {renderCoordsForm()}\r\n                </div>\r\n\r\n                <div className=\"footerToolbarImgMapConfig\">\r\n                <Modal.Actions>\r\n                    <Button floated={'left'}\r\n                            color='green'\r\n                            type=\"submit\"\r\n                    >\r\n                        Apply\r\n                    </Button>\r\n                    <Button floated={'left'} onClick={() => handleClose()}>\r\n                        Close            \r\n                    </Button>\r\n                </Modal.Actions>\r\n                </div>\r\n            </Form>\r\n            <div className=\"imageContainer\">\r\n                {!!myState && !!myState.dropdownImage &&\r\n                <ImageMapper src={`${getAprBaseUrl()}/files/${myState.dropdownImage}`}\r\n                            onImageMouseMove={handleMouseMove}\r\n                            onImageClick={handleMouseClick}\r\n                            map={map}\r\n                />}          \r\n            </div>\r\n        </div>\r\n    </Modal.Content>\r\n    </Modal>;\r\n}\r\n\r\nexport default ImageMapConfigDialog;","import React, {useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\nimport {updateControlProps, deleteControl, updateLayoutProps} from '../actions';\r\n\r\nimport './propertiesPanel.css';\r\nimport {getToolItemByName} from '../components/toolbox';\r\nimport splitWord from '../helper/wordSplitter';\r\nimport {reconstructHierarchyStack, applyUserTreeSettings} from '../helper/treefilter';\r\n\r\nimport {sectionProps} from '../controls/section';\r\nimport {labelProps} from '../controls/label';\r\nimport {pieProps} from '../charts/pieChart';\r\nimport {barProps} from '../charts/barChart';\r\nimport {lineProps} from '../charts/lineChart';\r\nimport {tableProps} from '../controls/table';\r\nimport {imageMapProps} from '../controls/imageMap';\r\nimport {richTextProps} from '../controls/richtext';\r\nimport {gaugeProps} from '../charts/gauge_rechart';\r\nimport * as constants from '../constants';\r\nimport Form, {Text as FormText, IconSelector, ColorSelector, FormTreeDropDown, FormCheckbox, FormRichText, FormFilterDyanamicInput} from '../form/Form';\r\nimport FormDropDown from '../form/FormDropDown';\r\nimport ShowMessage, {NotifType} from '../helper/notification';\r\nimport {Divider, Header, Icon, Message, Button} from 'semantic-ui-react';\r\nimport {getMetadataOptions, getMetadataTreeDropdownOptions} from '../helper/metadataManager';\r\nimport ImageMapConfigDialog from '../components/imageMapConfigDialog';\r\n\r\nconst PREFIX_DATAPROPS = 'dataProps.'; // Purpose: React hook form, during form submit, will nest the controls with this prefix inside dataProps field.\r\n\r\nconst renderDivider = (name, icon) => {\r\n    return <Divider horizontal>\r\n        <Header as='h5'>\r\n        <Icon name={icon} />\r\n        {name}\r\n        </Header>\r\n    </Divider>\r\n}\r\n\r\n// This is the function that will be called when the form component mounts\r\n// Use this function to set the initial values\r\nconst setControlValues = (setValueFunc, selectedControl) => {\r\n    if (!selectedControl) {\r\n        return;\r\n    }\r\n\r\n    // Common props\r\n    let toolItemType = getToolItemByName(selectedControl.ctrlType);\r\n\r\n    setValueFunc(constants.NAME_CONTROL_ID, selectedControl.i);\r\n    setValueFunc(constants.NAME_CONTROL_TYPE, toolItemType.displayName);\r\n    \r\n    Object.keys(selectedControl.data).forEach((key, index) => {\r\n        // skip the dataProps\r\n        if (key === 'dataProps') {\r\n            return;\r\n        }\r\n        setValueFunc(key, selectedControl.data[key]);\r\n    });\r\n\r\n    //console.log('setControlValues', selectedControl);\r\n\r\n    if (selectedControl.data.dataProps) {\r\n        Object.keys(selectedControl.data.dataProps).forEach((key, index) => {\r\n            if (key === \"filtersList\") {\r\n                let filterSettingsObj = selectedControl.data.dataProps[key];\r\n                if (Object.keys(filterSettingsObj).length === 0) {\r\n                    setValueFunc(`${PREFIX_DATAPROPS}${key}`, {}); // set it to an empty object\r\n                }\r\n                else {\r\n                    for (let prop in filterSettingsObj) {\r\n                        setValueFunc(`${PREFIX_DATAPROPS}${key}.${prop}.filterName`, filterSettingsObj[prop].filterName);\r\n                        setValueFunc(`${PREFIX_DATAPROPS}${key}.${prop}.filterValue`, filterSettingsObj[prop].filterValue);\r\n                    }    \r\n                }\r\n            }\r\n            else {\r\n                setValueFunc(PREFIX_DATAPROPS+key, selectedControl.data.dataProps[key]);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// This is the function that will be called when the form component mounts\r\n// Use this function to set the initial values\r\nconst setLayoutValues = (setValueFunc, layoutData) => {\r\n    if (!layoutData || !setValueFunc) {\r\n        return;\r\n    }\r\n\r\n    for (var prop in layoutData) {\r\n        setValueFunc(prop, layoutData[prop]);\r\n    }\r\n}\r\n\r\n// TODO: Refactor this class\r\n// Nest all functions inside this big function so that they have access to the props and state, and no need to pass each time\r\nconst PropertiesPanel = ({selectedControl, metadata, updateControlProps, deleteControl, selectedPage, layoutData, updateLayoutProps, hierarchyTree}) => {\r\n    const onCloseOpenConfigDialog = (bShow) => {\r\n        setShowConfigDialog(bShow);\r\n    }\r\n\r\n    // Declare this function inline so that it has access to updateControlProps\r\n    const onSubmit = (submittedData, evt) => {\r\n        console.log('submit control props', submittedData);\r\n        let formattedData = {\r\n            i: submittedData.controlId,\r\n            data: submittedData\r\n        }\r\n    \r\n        delete formattedData.data.controlId;\r\n        delete formattedData.data.controlType;\r\n        if (selectedControl.data.imageProps) {\r\n            // manually bring back the imageProps because the data is not found inside this form\r\n            formattedData.data.imageProps = {...selectedControl.data.imageProps};\r\n        }\r\n    \r\n        // Fire redux action to update store\r\n        updateControlProps(formattedData);\r\n        ShowMessage('Control Properties Applied!', NotifType.success, '');\r\n    }\r\n\r\n    const onSubmitLayoutForm = (submittedData) => {\r\n        console.log('submit layout props', submittedData);   \r\n        // Fire redux action to update store\r\n        updateLayoutProps(submittedData);\r\n        ShowMessage('Layout Properties Applied!', NotifType.success, '');        \r\n    }\r\n\r\n    const onDelete = () => {\r\n        deleteControl(selectedControl)\r\n        ShowMessage('Control Deleted!', NotifType.success, '');\r\n    };\r\n\r\n    const getSpecialProps = () => {\r\n        let specialProps = [];\r\n        switch(selectedControl.ctrlType) {\r\n            case 'section':\r\n                //return RenderSectionProps(selectedControl, onSubmit);\r\n                specialProps = sectionProps;\r\n                break;\r\n            case 'label':\r\n                specialProps = labelProps;\r\n                break;\r\n            case 'pie':\r\n                specialProps = pieProps;\r\n                break;\r\n            case 'barchart':\r\n                specialProps = barProps;\r\n                break;\r\n            case 'line':\r\n                specialProps = lineProps;\r\n                break;\r\n            case 'table':\r\n                specialProps = tableProps;\r\n                break;\r\n            case 'imageMap':\r\n                specialProps = imageMapProps;\r\n                break;\r\n            case 'richtext':\r\n                specialProps = richTextProps;\r\n                break;\r\n            case 'gauge':\r\n                specialProps = gaugeProps;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return specialProps;\r\n    }\r\n\r\n    const renderControlProps = (watchableFieldName)  => {\r\n        let specialProps = getSpecialProps();        \r\n    \r\n        return <>\r\n                <Form className=\"propsFormContainer ui small form\" \r\n                key='formControlProps' \r\n                onSubmit={onSubmit} \r\n                inputObj={selectedControl} \r\n                inputObjId={selectedControl.i}\r\n                setControlValues={setControlValues}\r\n                watchedField={watchableFieldName}\r\n                setStateHook={setWatchedFieldValue}\r\n                >\r\n                <div className=\"propsForm\">\r\n                {renderCommonProps(selectedControl)}\r\n                {renderProps(specialProps, selectedControl.data, '')}\r\n                {selectedControl.data.dataProps && renderDivider(\"Data Config\", \"database\")}\r\n                {selectedControl.data.dataProps && renderProps(specialProps, selectedControl.data.dataProps, PREFIX_DATAPROPS)}\r\n                </div>\r\n                <div className=\"footerToolbar\">\r\n                    <button key='deleteBtn' type=\"button\" className=\"ui negative button mini\" onClick={onDelete}>Delete</button>\r\n                    <button key='submitBtn' type=\"submit\" className=\"ui button secondary mini\">Apply</button>\r\n                </div>\r\n            </Form>\r\n            {selectedControl.ctrlType === 'imageMap' && <ImageMapConfigDialog \r\n            //onClose={}\r\n            showOpenForm={showConfigDialog}\r\n            onCloseOpenConfigDialog={onCloseOpenConfigDialog}\r\n            selectedControl={selectedControl}\r\n            />}\r\n            </>\r\n        \r\n    }\r\n    \r\n    const renderCommonProps = () => {\r\n        let toolItemType = getToolItemByName(selectedControl.ctrlType);\r\n        let retList = [];\r\n        retList.push(<FormText key={constants.NAME_CONTROL_TYPE}\r\n                                 name={constants.NAME_CONTROL_TYPE}\r\n                                label=\"Control Type:\"\r\n                                readOnly                                                                             \r\n        />);\r\n    \r\n        retList.push(<FormText key={constants.NAME_CONTROL_ID}\r\n            name={constants.NAME_CONTROL_ID}\r\n            label=\"Control Id:\"\r\n            readOnly\r\n        />);\r\n    \r\n        return retList;    \r\n    }\r\n\r\n    const shouldDisableProp = (foundSpecialProp) => {\r\n        if (!watchableFieldName || !foundSpecialProp || !foundSpecialProp.watchedField || foundSpecialProp.watchedField !== watchableFieldName) {\r\n            //console.log('[propertiesPanel] shouldDisableProp: no need to watch', foundSpecialProp.name);\r\n            return false;\r\n        }\r\n\r\n        let retVal = watchedFieldValue !== foundSpecialProp.watchedValue;\r\n        //console.log('[propertiesPanel] shouldDisableProp', foundSpecialProp.name, retVal);\r\n\r\n        return retVal;\r\n    }\r\n    \r\n    // namePrefix: set to 'dataProps.' for dataProps. Purpose is to nest the value.\r\n    const renderProps = (specialProps, controlProps, namePrefix) => {\r\n        if (!controlProps) {\r\n            return;\r\n        }\r\n    \r\n        let retList = [];\r\n    \r\n        Object.keys(controlProps).forEach((key, index) => {            \r\n            let foundSpecialProp = specialProps.find(x => x.name === key);\r\n            if (foundSpecialProp) {\r\n                let propDisabled = shouldDisableProp(foundSpecialProp); // Check against current watched field value\r\n\r\n                switch(foundSpecialProp.propType) {\r\n                    case 'combo':\r\n                        retList.push(<FormDropDown\r\n                            key={selectedControl.i+'_'+key}\r\n                            name={namePrefix+key}\r\n                            label={splitWord(key)+\":\"}\r\n                            options={foundSpecialProp.options}\r\n                        />);\r\n                        break;\r\n                    case 'icon':\r\n                        retList.push(<IconSelector\r\n                            key={selectedControl.i+'_'+key}\r\n                            name={namePrefix+key}\r\n                            label={splitWord(key)+\":\"}\r\n                            intialicon={controlProps.icon}\r\n                        />);\r\n                        break;\r\n                    case 'color':\r\n                        retList.push(<ColorSelector\r\n                            key={selectedControl.i+'_'+key}\r\n                            name={namePrefix+key}\r\n                            label={splitWord(key)+\":\"}\r\n                            intialcolor={controlProps[foundSpecialProp.name]} // can be color or backgroundColor\r\n                        />);\r\n                        break;\r\n                    case 'number':                        \r\n                        retList.push(<FormText key={selectedControl.i+'_'+key}\r\n                            numeric\r\n                            name={namePrefix+key}\r\n                            label={splitWord(key)+':'}\r\n                            toolTip={foundSpecialProp.toolTip}\r\n                        />);\r\n                        break;\r\n                    case 'bool':\r\n                        retList.push(<FormCheckbox key={selectedControl.i+'_'+key}\r\n                            name={namePrefix+key}\r\n                            label={splitWord(key)+':'}\r\n                            toolTip={foundSpecialProp.toolTip}\r\n                        />);\r\n                        break;\r\n                    case 'section':\r\n                        // Just skip this. (not to be confused with section control)\r\n                        // There should be another call to this function to render the contents of that section\r\n                        break;\r\n                    case 'metadata':\r\n                        retList.push(renderMetadataField(key, foundSpecialProp, namePrefix, propDisabled));\r\n                        break;\r\n                    case 'popupConfig':\r\n                        retList.push(<Button \r\n                            type=\"button\" \r\n                            key={`${foundSpecialProp.name}Btn`} \r\n                            primary\r\n                            onClick={() => onCloseOpenConfigDialog(true)}                            \r\n                            >\r\n                                {foundSpecialProp.buttonName}\r\n                                &nbsp;&nbsp;\r\n                                <Icon name='external square alternate' />\r\n                            </Button>);\r\n                        break;\r\n                    case 'richText':\r\n                        retList.push(<FormRichText \r\n                            label={splitWord(key)+':'}\r\n                            name={namePrefix+key}\r\n                            key={`${foundSpecialProp.name}Btn`}\r\n                            toolTip={foundSpecialProp.toolTip}\r\n                            initialData={controlProps.richTextData}\r\n                            controlId={selectedControl.i}\r\n                        />);\r\n                        break;\r\n                    case 'pageLinks':\r\n                        retList.push(<FormTreeDropDown \r\n                            key='linkedPage'\r\n                            name='linkedPage'\r\n                            treeData={hierarchyTree} \r\n                            isRequired={false}\r\n                            label={splitWord(key)+':'}\r\n                            dropdownStyle={{ height: 300, overflow: 'auto' }}\r\n                            />);\r\n                        break;\r\n                    case 'dynamicFilter':\r\n                        retList.push(<FormFilterDyanamicInput\r\n                            label={splitWord(key)+':'}\r\n                            name={namePrefix+key}\r\n                            key={`${foundSpecialProp.name}Btn`}\r\n                            toolTip={foundSpecialProp.toolTip}\r\n                            filterFieldOptions={getMetadataTreeDropdownOptions(metadata, [foundSpecialProp.metadataField])}\r\n                            initialFilters={controlProps.filtersList}\r\n                            parentId={selectedControl.i}\r\n                        /> \r\n                        );\r\n                        break;\r\n                    case 'alignment':                        \r\n                        retList.push(<FormText key={selectedControl.i+'_'+key}\r\n                            name={namePrefix+key}\r\n                            label={splitWord(key)+':'}\r\n                            toolTip={foundSpecialProp.toolTip}\r\n                        />);\r\n                        break;                        \r\n                    default:\r\n                        break;            \r\n                }\r\n            }\r\n            else {\r\n                retList.push(<FormText key={selectedControl.i+'_'+key}\r\n                    name={namePrefix+key}\r\n                    label={splitWord(key)+':'}\r\n                />);\r\n            }\r\n        });\r\n    \r\n        return retList;\r\n    }\r\n    \r\n    const renderMetadataField = (metaFieldName, metaSpecialProps, namePrefix, propDisabled) => {\r\n        switch(metaSpecialProps.metadataPropType) {\r\n            case 'dropdown':\r\n                return <FormDropDown\r\n                        key={selectedControl.i+'_'+metaFieldName}\r\n                        name={namePrefix+metaFieldName}\r\n                        label={splitWord(metaFieldName)+\":\"}\r\n                        options={getMetadataOptions(metadata, metaSpecialProps.metadataField)}                    \r\n                    />\r\n            case 'treeDropdown':\r\n                return <FormTreeDropDown\r\n                    key={selectedControl.i+'_'+metaFieldName}\r\n                    name={namePrefix+metaFieldName}\r\n                    treeData={getMetadataTreeDropdownOptions(metadata, [metaSpecialProps.metadataField])} \r\n                    isRequired={false}\r\n                    label={splitWord(metaFieldName)+\":\"}\r\n                    dropdownStyle={{ height: 300, overflow: 'auto' }}\r\n                    multiple={metaSpecialProps.multiple}\r\n                    disabled={propDisabled}\r\n                    />\r\n            case 'textbox':\r\n                return <FormText\r\n                    key={selectedControl.i+'_'+metaFieldName}\r\n                    name={namePrefix+metaFieldName}\r\n                    label={splitWord(metaFieldName)+\":\"}\r\n                    toolTip={metaSpecialProps.toolTip}\r\n                    readOnly={metaSpecialProps.readOnly}\r\n                    />\r\n            default:\r\n                break;\r\n        }\r\n    \r\n        return null;\r\n    }\r\n    \r\n    const renderLayoutPropsForm = () => {\r\n        return <Form className=\"propsFormContainer ui small form\" key='formLayoutProps' onSubmit={onSubmitLayoutForm} inputObj={layoutData} setControlValues={setLayoutValues}>\r\n                <div className=\"propsForm\">\r\n                {renderLayoutProps(layoutData)}\r\n                </div>\r\n                <div className=\"footerToolbar\">\r\n                    <button key='submitBtn' type=\"submit\" className=\"ui button secondary mini\">Apply</button>\r\n                </div>\r\n        </Form>\r\n    }\r\n    \r\n    const renderLayoutProps = () => {\r\n        let retList = [];\r\n        for (var prop in layoutData) {\r\n            switch(prop) {\r\n                case 'name':\r\n                    retList.push(<FormText key={`layout_${prop}_prop`}\r\n                    name={prop}\r\n                    label={splitWord(prop)+':'}\r\n                    readOnly\r\n                    />);\r\n                    break;\r\n                case 'columns':\r\n                    retList.push(<FormText key={`layout_${prop}_prop`}\r\n                    numeric\r\n                    name={prop}\r\n                    label={splitWord(prop)+':'}\r\n                    readOnly\r\n                    toolTip={\"For this version, column size cannot be changed\"}\r\n                    />);\r\n                    break;\r\n                case 'rows':\r\n                    retList.push(<FormText key={`layout_${prop}_prop`}\r\n                    numeric\r\n                    name={prop}\r\n                    label={splitWord(prop)+':'}\r\n                    toolTip={\"For now, there is no validation. Make sure the value provided is sufficient. Otherwise some existing controls might be deleted.\"}\r\n                    />);\r\n                    break;\r\n                case 'pageFilterFields':\r\n                    // get the items from the metadata\r\n                    retList.push(<FormTreeDropDown \r\n                        key='pageFilterFields'\r\n                        name='pageFilterFields'\r\n                        treeData={getMetadataTreeDropdownOptions(metadata, ['requestParams', 'dimensions',])} \r\n                        isRequired={false}\r\n                        label={\"Page Filter Fields:\"}\r\n                        dropdownStyle={{ height: 300, overflow: 'auto' }}\r\n                        multiple\r\n                        />);\r\n                    break;\r\n                default:\r\n                    retList.push(<FormText key={prop}\r\n                        name={prop}\r\n                        label={splitWord(prop)+':'}\r\n                    />);\r\n                    break;\r\n            }\r\n        }\r\n    \r\n        return retList;\r\n    }\r\n\r\n    const getWatchableFieldName = () => {\r\n        // For now, assume the watchableField is inside data.dataProps\r\n        if (!selectedControl || !selectedControl.data || !selectedControl.data.dataProps) {\r\n            return null;\r\n        }\r\n\r\n        const specialProps = getSpecialProps();\r\n        if (!specialProps) {\r\n            return null;\r\n        }\r\n\r\n        let findWatchableField = specialProps.find(s => s.watchableField === true);\r\n        if (!findWatchableField) {\r\n            return null;\r\n        }\r\n\r\n        return findWatchableField.name;\r\n    }\r\n\r\n    // const getWatchedFieldInitialValue = () => {\r\n    //     if (!selectedControl || !selectedControl.data || !selectedControl.data.dataProps) {\r\n    //         return null;\r\n    //     }\r\n\r\n    //     const specialProps = getSpecialProps();\r\n    //     if (!specialProps) {\r\n    //         return null;\r\n    //     }\r\n\r\n    //     let findWatchableField = specialProps.find(s => s.watchableField === true);\r\n    //     if (!findWatchableField) {\r\n    //         return null;\r\n    //     }\r\n\r\n    //     let name = findWatchableField.name;\r\n\r\n    //     // For now, assume the watchableField is inside data.dataProps\r\n    //     let controlWatchedFieldValue = selectedControl.data.dataProps[name];\r\n    //     debugger\r\n    //     return controlWatchedFieldValue;\r\n    // }\r\n\r\n    /* START: actual function implementation */\r\n    let watchableFieldInitialValue = null;\r\n    const watchableFieldName = getWatchableFieldName();\r\n    if (!!watchableFieldName) {\r\n        // For now, assume the watchableField is inside data.dataProps\r\n        watchableFieldInitialValue = selectedControl.data.dataProps[watchableFieldName];\r\n    }\r\n\r\n    const [showConfigDialog, setShowConfigDialog] = useState(false);\r\n    const [watchedFieldValue, setWatchedFieldValue] = useState(watchableFieldInitialValue); // For now just allow one watchedField for the entire form\r\n\r\n    console.log('[PropertiesPanel] render', watchedFieldValue);\r\n\r\n    if (!selectedControl && !selectedPage) {\r\n        // return <div className=\"ui message warning\">No object selected in the Designer. Please select any control or click [Configure Page Settings] button to see the layout settings</div>\r\n        return <Message header='No object selected in the Designer' \r\n                        content='Please select either any control or click [Configure Page Settings] button to configure the layout'/>\r\n    }\r\n\r\n    if (selectedPage) {\r\n        return renderLayoutPropsForm();\r\n    }\r\n\r\n    return renderControlProps(PREFIX_DATAPROPS+watchableFieldName);\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let masterHierarchyViews = state.mainApp.masterHierarchyViews;\r\n    let defaultView = masterHierarchyViews && masterHierarchyViews[0];\r\n    let treeDataNoUserSettings = defaultView && reconstructHierarchyStack(JSON.parse(defaultView.hierarchyJson));\r\n    let userSettings = defaultView && JSON.parse(defaultView.nodeSettingsJson);\r\n    let treeData = applyUserTreeSettings(treeDataNoUserSettings, userSettings);\r\n\r\n    return {\r\n        selectedControl: state.designer.layout.find(c => c.selected === true),\r\n        selectedPage: state.designer.pageSelected,\r\n        layoutData: state.designer.layoutData, // This just contains the number of rows, cols and filterFields selected by the user\r\n        metadata: state.mainApp.masterMetadata,\r\n        hierarchyTree: treeData,\r\n    }\r\n  }\r\n\r\n//We just let the individual controls take care of everything\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({ updateControlProps, deleteControl, updateLayoutProps }, dispatch);\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PropertiesPanel);","import React from 'react';\r\nimport Split from 'react-split';\r\nimport Toolbox from './toolbox';\r\nimport DemoTree from './treeView';\r\nimport ToolAvailableData from './toolAvailableData';\r\n\r\nimport '../styles/Accordion.css';\r\nimport \"../styles/Split.css\";\r\n\r\nimport ScrollTracker from '../components/scrollTracker';\r\nimport PropertiesPanel from '../containers/propertiesPanel';\r\n\r\nconst DEFAULT_SIZES = [25, 75];\r\nconst CLASS_ACCORDION = \"accordionPanel\";\r\n\r\n// Basically this class contains the left hand panel that contains the toolbox and properties box\r\n\r\n// TODOS:\r\n// [1] Do not allow all panels to be collapsed\r\n// [2] Implement preferred ratio\r\n\r\nconst AccordionPanel = ({title, onClickCollapseExpand, id, isCollapsed, panelContent}) => {\r\n    //console.log('[render] AccordionPanel, id: ', id);\r\n    let iconName = isCollapsed ? \"down\" : \"up\";\r\n\r\n    return <div className={CLASS_ACCORDION}>        \r\n        <div className=\"titleBar\">\r\n            <div className=\"titleBarText\">{title}</div>\r\n            <div className=\"collExpBtn\" onClick={() => onClickCollapseExpand(id)}>\r\n                <i className={`icon angle ${iconName}`}></i>\r\n            </div>            \r\n        </div>\r\n        <div className=\"panelBody\">\r\n            {panelContent}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nconst defaultPanelItems = [\r\n    {\r\n        title: 'Toolbox',\r\n        id: 'toolbox',\r\n        isCollapsed: false,\r\n        size: 0,\r\n        helpText: 'Drag an item to the Designer Area'\r\n    },\r\n    {\r\n        // Show the Hierarchy tree view\r\n        // Underneath, add the available data (dfferent icon from folders and targets)\r\n        // When the user drags it to the designer, should popup the control appropriate control type\r\n        // Except for the size, there must be some preconfigurations already in the control\r\n        title: 'Hierarchy',\r\n        id: 'toolHierarchy',\r\n        isCollapsed: false,\r\n        size: 0,\r\n        helpText: 'Select an item in the hierarchy to show the available data below'\r\n    },\r\n    {\r\n        title: 'Available Data',\r\n        id: 'availableData',\r\n        isCollapsed: false,\r\n        size: 0,\r\n        helpText: 'Drag an item to the Designer Area'\r\n    },\r\n];\r\n\r\nclass ToolPanel extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let panelItems = props.panelItems ? props.panelItems : defaultPanelItems;\r\n        let initializedPanelData = this.recalculatePanelSizes(panelItems);\r\n\r\n        this.onSplitDragEnd = this.onSplitDragEnd.bind(this);\r\n        this.onSplitDragStart = this.onSplitDragStart.bind(this);\r\n\r\n        this.state = {\r\n            panelsData: initializedPanelData,\r\n            sizes: initializedPanelData.map(panel => panel.size)\r\n        };\r\n    }\r\n\r\n    recalculatePanelSizes = (panelsData) => {\r\n        let expandedPanels = panelsData.filter(panel => panel.isCollapsed === false);\r\n        let oneSize = 100.0 / expandedPanels.length;\r\n        // If there is no panel collapsed, use the suggested DEFAULT_SIZE\r\n        // Sanity: if DEFAULT_SIZES length is not the same as the actual number of panels, we don't use DEFAULT_SIZES \r\n        if (panelsData.find(p => p.isCollapsed) || DEFAULT_SIZES.length !== panelsData.length) {\r\n            panelsData.forEach(panel => {\r\n                if (panel.isCollapsed) {\r\n                    panel.size = 0;\r\n                }\r\n                else {\r\n                    panel.size = oneSize;\r\n                }\r\n            })    \r\n        }\r\n        else {\r\n            for (let i=0; i < panelsData.length; i++) {\r\n                let currPanel = panelsData[i];\r\n                currPanel.size = DEFAULT_SIZES[i]\r\n            }\r\n        }\r\n\r\n        return panelsData;\r\n    }\r\n\r\n    getPanelSizes = () => {\r\n        return this.state.panelsData.map(panel => panel.size);\r\n    };\r\n\r\n    \r\n    onSplitDragEnd(args) {\r\n        console.log('[toolPanel] onSplitDrageEnd', args, this);\r\n        // If any of the panel becomes too small, just collapse it all the way\r\n        let clonePanelsData = [...this.state.panelsData];\r\n        for (let i = 0; i < args.length; i++) {\r\n            let currPanelData = clonePanelsData[i];\r\n            if (args[i] > 8) {\r\n                if (currPanelData.isCollapsed) {\r\n                    currPanelData.isCollapsed = false;\r\n                }\r\n            }\r\n            else if (!currPanelData.isCollapsed) {\r\n                currPanelData.isCollapsed = true;\r\n            }            \r\n        }\r\n        // let newPanelsData = this.recalculatePanelSizes(clonePanelsData);\r\n        // console.log(newPanelsData);\r\n        this.setState({\r\n            panelsData: clonePanelsData,\r\n            sizes: args\r\n        });\r\n\r\n        this.addRemovePanelTransition(false);\r\n    }\r\n\r\n    onSplitDragStart(args) {\r\n        console.log('[toolPanel] onSplitDrageStart', args);\r\n        this.addRemovePanelTransition(false);\r\n    }\r\n\r\n    addRemovePanelTransition = (bAdd) => {\r\n        //debugger\r\n        let panelEls = document.getElementsByClassName(CLASS_ACCORDION); \r\n        for (let i = 0; i < panelEls.length; i++) {\r\n            let panelEl = panelEls[i];\r\n            if (bAdd) {\r\n                panelEl.style.transition = \"0.5s\";\r\n            }\r\n            else {\r\n                panelEl.style.transition = \"0s\";\r\n            }    \r\n        }\r\n    }\r\n\r\n    onClickCollapseExpand = (id) => {\r\n        //console.log('onClickCollapseExpand', id);\r\n        this.addRemovePanelTransition(true);\r\n        let panelDataClone = [...this.state.panelsData];\r\n        let selectedPanelData = panelDataClone.find(panel => panel.id === id);\r\n        if (!selectedPanelData) {\r\n            console.error('Cannot find the panel expanded or collapsed!');\r\n            return;\r\n        }\r\n\r\n        //console.log('onClickCollapseExpand, selectedPanelData: ', selectedPanelData);\r\n        selectedPanelData.isCollapsed = !selectedPanelData.isCollapsed;\r\n\r\n        let newPanelsData = this.recalculatePanelSizes(panelDataClone);\r\n        this.setState({\r\n            panelsData: newPanelsData,\r\n            sizes: newPanelsData.map(p => p.size)\r\n        })\r\n    }\r\n\r\n    // TODO: can dynamically create the react component given the class name?\r\n    // Where to find the 'import' of that react component?\r\n    getPanelContent = (panelId, containerWidth) => {\r\n        switch(panelId) {\r\n            case 'toolbox':\r\n                return <Toolbox containerWidth={containerWidth}/>;\r\n            case 'toolHierarchy':\r\n                return <DemoTree/>\r\n            case 'availableData':\r\n                return <ToolAvailableData/>\r\n            case 'properties':\r\n                return <PropertiesPanel/>\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    createPanels = (containerWidth) => {\r\n        return this.state.panelsData.map(panel => {\r\n            let panelContent = this.getPanelContent(panel.id, containerWidth);            \r\n            return <AccordionPanel \r\n                        key={panel.id}\r\n                        id={panel.id}\r\n                        title={panel.title}\r\n                        isCollapsed={panel.isCollapsed}\r\n                        onClickCollapseExpand={this.onClickCollapseExpand}\r\n                        panelContent={panelContent}\r\n                    >\r\n                    </AccordionPanel>\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('[toolPanel] render', this.props.containerWidth);\r\n        return <Split className=\"split\"\r\n        direction=\"vertical\"\r\n        sizes={this.state.sizes}\r\n        minSize={33}\r\n        gutterSize={5}\r\n        snapOffset={0}\r\n        onDragEnd={this.onSplitDragEnd}\r\n        onDragStart={this.onSplitDragStart}\r\n        cursor=\"row-resize\"\r\n        >\r\n            {this.createPanels(this.props.containerWidth)}            \r\n        </Split>\r\n    }\r\n}\r\n\r\nexport default ToolPanel;","import React, {useEffect, useState} from \"react\";\r\nimport _ from \"lodash\";\r\nimport { Responsive, WidthProvider } from \"react-grid-layout\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport \"./designerForm.css\";\r\nimport BarChart from '../charts/barChart';\r\nimport Example from '../charts/pieChart';\r\nimport Combobox from '../controls/combo';\r\nimport EditDialog from './editDialog';\r\nimport {selectedControl} from '../actions/index';\r\nimport { useDrop } from 'react-dnd';\r\n\r\n// controls import\r\nimport Section from '../controls/section';\r\nimport RichText from '../controls/richtext';\r\nimport Combo from '../controls/combo';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\n// TODO: Delete this whole file...this is just for playing with RGL library\r\n// But we ended up implementing our own designer\r\n\r\n//const ResponsiveReactGridLayout = WidthProvider(Responsive);\r\nconst ResponsiveReactGridLayout = Responsive;\r\n\r\nconst defaultProps = {\r\n  className: \"layout\",\r\n  rowHeight: 30,\r\n  onLayoutChange: function(layout, layouts) {\r\n      console.log('layout changed');\r\n      // TODO: handle the layout changes to the other breakpoints here\r\n      // e.g. if curr display is big, fix the layout for xs\r\n  },\r\n  cols: { lg: 12, md: 12, sm: 2, xs: 1, xxs: 1 },\r\n  //initialLayout: generateLayout(),\r\n  initialLayout: [],\r\n  compactType: 'vertical', // It's better to have a vertical compaction, because the drag behaviour is weird without it\r\n\r\n  // temporarily set layout to fixed, to avoid conflict while experimenting with rich text editor's cursor/focus\r\n  // isDraggable: false,\r\n  // isResizable: false,\r\n};\r\n\r\n/*\r\nconst getRechartSample = (i) => {\r\n  if (i === 1)\r\n  {\r\n    let barInfo = {i: 'ctrl-pie0', x: 6, y: 1, w: 3, h: 4, ctrlType: 'pie',       \r\n      data: {\r\n          label: 'Pie:',\r\n      }\r\n    };           \r\n\r\n    return <div style={{width: \"100%\", height: \"100%\"}}>\r\n        <BarChart {...barInfo}/>\r\n    </div>\r\n  }\r\n  else if (i === 2) {    \r\n    let ctrlInfo = {i: 'ctrl-pie0', x: 6, y: 1, w: 3, h: 4, ctrlType: 'pie',       \r\n      data: {\r\n          label: 'Pie:',\r\n      }\r\n    };    \r\n    return <Example sample={1} {...ctrlInfo}/>\r\n  }\r\n  else if (i === 0) {\r\n    return <div className=\"Aligner\">\r\n        <div className=\"Aligner-item\" style={{fontSize: \"30px\"}}>Plant Overall Status</div>\r\n    </div>\r\n  }\r\n  else if (i === 3) {\r\n    return <Combo data={{\r\n      label: 'Courses',\r\n      options: [\r\n      { key: 'angular', text: 'Angular', value: 'angular' },\r\n      { key: 'css', text: 'CSS', value: 'css' },\r\n      { key: 'design', text: 'Graphic Design', value: 'design' },\r\n      { key: 'ember', text: 'Ember', value: 'ember' },\r\n      { key: 'html', text: 'HTML', value: 'html' },\r\n      { key: 'ia', text: 'Information Architecture', value: 'ia' },\r\n      { key: 'javascript', text: 'Javascript', value: 'javascript' },\r\n      { key: 'mech', text: 'Mechanical Engineering', value: 'mech' },\r\n      { key: 'meteor', text: 'Meteor', value: 'meteor' },\r\n      { key: 'node', text: 'NodeJS', value: 'node' },\r\n      { key: 'plumbing', text: 'Plumbing', value: 'plumbing' },\r\n      { key: 'python', text: 'Python', value: 'python' },\r\n      { key: 'rails', text: 'Rails', value: 'rails' },\r\n      { key: 'react', text: 'React', value: 'react' },\r\n      { key: 'repair', text: 'Kitchen Repair', value: 'repair' },\r\n      { key: 'ruby', text: 'Ruby', value: 'ruby' },\r\n      { key: 'ui', text: 'UI Design', value: 'ui' },\r\n      { key: 'ux', text: 'User Experience', value: 'ux' },\r\n    ]}}/>\r\n  }\r\n\r\n  return null;\r\n}\r\n*/\r\n\r\nconst dropdownOptions = [\r\n  { key: 'angular', text: 'Angular', value: 'angular' },\r\n  { key: 'css', text: 'CSS', value: 'css' },\r\n  { key: 'design', text: 'Graphic Design', value: 'design' },\r\n  { key: 'ember', text: 'Ember', value: 'ember' },\r\n  { key: 'html', text: 'HTML', value: 'html' },\r\n  { key: 'ia', text: 'Information Architecture', value: 'ia' },\r\n  { key: 'javascript', text: 'Javascript', value: 'javascript' },\r\n  { key: 'mech', text: 'Mechanical Engineering', value: 'mech' },\r\n  { key: 'meteor', text: 'Meteor', value: 'meteor' },\r\n  { key: 'node', text: 'NodeJS', value: 'node' },\r\n  { key: 'plumbing', text: 'Plumbing', value: 'plumbing' },\r\n  { key: 'python', text: 'Python', value: 'python' },\r\n  { key: 'rails', text: 'Rails', value: 'rails' },\r\n  { key: 'react', text: 'React', value: 'react' },\r\n  { key: 'repair', text: 'Kitchen Repair', value: 'repair' },\r\n  { key: 'ruby', text: 'Ruby', value: 'ruby' },\r\n  { key: 'ui', text: 'UI Design', value: 'ui' },\r\n  { key: 'ux', text: 'User Experience', value: 'ux' },\r\n  { key: 'test1', text: 'A quick brown fox jumps over the lazy dog', value: 'test1' },\r\n  { key: 'test2', text: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+', value: 'test2' },\r\n  { key: 'test3', text: '春眠不觉晓，处处闻啼鸟。夜来风雨声，花落知多少。', value: 'test3' },\r\n];\r\n\r\nconst onClickEditBtn= (id) => {\r\nconsole.log('onClickEditBtn', id);\r\n}\r\n\r\nconst renderContent = (control) => {\r\n  switch(control.ctrlType) {\r\n    case 'barchart':\r\n      let barInfo = {i: 'ctrl-bar0', x: 6, y: 1, w: 3, h: 4, ctrlType: 'barchart',       \r\n        data: {\r\n            label: 'Bar:',\r\n        }\r\n      };           \r\n\r\n    return <BarChart {...barInfo}/>\r\n    case 'pie':\r\n      let ctrlInfo = {i: 'ctrl-pie0', x: 6, y: 1, w: 3, h: 4, ctrlType: 'pie',       \r\n        data: {\r\n            label: 'Pie:',\r\n        }\r\n      };\r\n      return <Example {...ctrlInfo}/>\r\n    case 'section':\r\n      return <div className=\"Aligner\">\r\n      <div className=\"Aligner-item\" style={{fontSize: \"30px\"}}>Plant Overall Status</div>\r\n      </div>\r\n    case 'combo':\r\n      let comboInfo = {\r\n        i: 'ctrl-pie0', x: 6, y: 1, w: 3, h: 4, ctrlType: 'dummy',      \r\n        data: {\r\n          placeholder: 'Please select...',\r\n          options: dropdownOptions,\r\n          label: 'Combobox:'\r\n        }\r\n      };\r\n      return <Combobox {...comboInfo}></Combobox>\r\n  }\r\n}\r\n\r\nconst generateDOM = (layouts) => {  \r\n  console.log('[designerForm] generateDOM()...', layouts);\r\n  return _.map(layouts.lg, function(l, i) {\r\n    return (\r\n      <div key={l.i} className={l.static ? \"static\" : \"\"} style={{border: \"1px dashed lightgray\", borderRadius: \"3px\"}}>\r\n          {/* <span className=\"text\">{i} - {l.i}</span> */}\r\n          {/* <i className=\"editBtn icon cog large\" onClick={me.onClickEditBtn.bind(me, l)}/>             */}\r\n          <EditDialog controlInfo={l}/>\r\n          {/* {getRechartSample(i)} */}\r\n          {renderContent(l)}\r\n          {/* {me.renderControl(l)} */}\r\n      </div>\r\n    );\r\n  });\r\n}\r\n\r\nconst onBreakpointChange = breakpoint => {\r\n  console.log('onBreakpointChange', breakpoint);\r\n  this.setState({\r\n      currentBreakpoint: breakpoint\r\n  });\r\n};\r\n\r\nconst onCompactTypeChange = () => {\r\n  const { compactType: oldCompactType } = this.state;\r\n  const compactType =\r\n    oldCompactType === \"horizontal\"\r\n      ? \"vertical\"\r\n      : oldCompactType === \"vertical\" ? null : \"horizontal\";\r\n  this.setState({ compactType });\r\n};\r\n\r\nconst onLayoutChange = (layout, layouts) => {\r\n  this.props.onLayoutChange(layout, layouts);\r\n};\r\n\r\nconst onDragStart = (item) => {\r\n  this.props.onDragStart(item);\r\n}\r\n\r\nconst onDragStop = (item, item2) => {\r\n  this.props.onDragStop(item);\r\n}\r\n\r\nconst onNewLayout = () => {\r\n  this.setState({\r\n    layouts: { lg: generateLayout() }\r\n  });\r\n};\r\n\r\nconst onControlClicked = (control) => {\r\n  console.log('[designerForm] controlClicked fired by HOC', control);\r\n  this.props.selectedControl(control.i);\r\n}\r\n\r\nconst onDrop = (elemParams, arg2) => {\r\n  let internalLayout = null;\r\n  if (!arg2) {\r\n      // I manually modified the params of OnDrop from the STRML library\r\n      // The second arg is the temp layout\r\n      console.log('[onDrop] arg2 is null. Please modify the STRML library to pass the layout as 2nd argument');\r\n      return;\r\n  }\r\n  internalLayout = arg2;\r\n\r\n  if (!this.props.draggingToolItem) {\r\n    console.log('[onDrop] Did not detect any dragging item from toolbox');\r\n    return;\r\n  }\r\n\r\n  let newLayout = internalLayout.filter(x => x.i !== '__dropping-elem__').map(item => {\r\n      return {\r\n          x: item.x,\r\n          y: item.y,\r\n          w: item.w,\r\n          h: item.h,\r\n          i: item.i,\r\n          static: item.static\r\n      }\r\n  }) \r\n\r\n  this.setState({\r\n      layouts: {\r\n        lg: [...newLayout, {\r\n            x: elemParams.x,\r\n            y: elemParams.y,\r\n            w: elemParams.w,\r\n            h: elemParams.h,\r\n            i: this.props.draggingToolItem.name + this.state.layouts.lg.length,\r\n            static: false\r\n        }, ]\r\n      }\r\n    });\r\n};\r\n\r\n// try playing around recharts\r\nconst DesignerForm = (props) => {\r\n\r\n  // Note: this will cause a rerender\r\n  useEffect(() => {\r\n    // Set the initial values\r\n    console.log('RGL useEffect start');\r\n    // If this line of code was removed, it will become \"choppy\" while dragging elements\r\n    setMyState({ ...myState, mounted: true });\r\n  }, [props.controls]); // Means if controls value does not change, don't run useEffect again.\r\n\r\n  const [myState, setMyState] = useState({\r\n    mounted: false,\r\n    layouts: {\r\n      lg: props.controls\r\n    }\r\n  });\r\n\r\n\r\n  console.log('render RGL');\r\n  return (\r\n    // <div>HelloWorld</div>\r\n    <div style={{border: \"1px dashed dimgray\", position: 'relative', top: '30px'}}>\r\n      <ResponsiveReactGridLayout \r\n        width={props.containerWidth}\r\n        {...props}\r\n        initialLayout={props.controls}\r\n        layouts={myState.layouts}\r\n        // onBreakpointChange={this.onBreakpointChange}\r\n        // onLayoutChange={this.onLayoutChange}\r\n        // onDrop={this.onDrop}\r\n        // WidthProvider option\r\n        measureBeforeMount={false}\r\n        // I like to have it animate on mount. If you don't, delete `useCSSTransforms` (it's default `true`)\r\n        // and set `measureBeforeMount={true}`.\r\n        // Ray note: set this to false to avoid interfering with dropdown menu\r\n        // Actually, if not in design mode, this should be off\r\n        useCSSTransforms={myState.mounted}\r\n        //useCSSTransforms={false}\r\n      //   compactType={this.state.compactType}\r\n      //   preventCollision={!this.state.compactType}\r\n        isDroppable={true}\r\n      >\r\n        {generateDOM(myState.layouts)}\r\n      </ResponsiveReactGridLayout>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction generateLayout() {\r\n    // I think @design mode, do not allow small display size\r\n    // If want to design @small display size, when enlarged, everything is fully stretched out, width-wise\r\n      return [\r\n        {i: 'a', x: 0, y: 2, w: 4, h: 10},\r\n        {i: 'b', x: 4, y: 2, w: 4, h: 10},\r\n        {i: 'c', x: 0, y: 0, w: 12, h: 2},\r\n        {i: 'd', x: 8, y: 2, w: 4, h: 2},\r\n        {i: 'e', x: 8, y: 4, w: 4, h: 2},\r\n        {i: 'f', x: 8, y: 6, w: 4, h: 2},\r\n        {i: 'g', x: 8, y: 8, w: 4, h: 2},\r\n      ];\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators({ selectedControl }, dispatch);\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  return { \r\n    //draggingToolItem: state.mainApp.draggingToolItem,\r\n    // Problem if you monitor this store variable:\r\n    // If user makes a selection, this entire grid and all its child items re-renders\r\n    // TODO: try this to potentially avoid rerender:\r\n    // - state design: controls dictionary <controlId, controlData>\r\n    // - control mapStateToProps: monitor control[id] only (get the id from ownProps)\r\n    // => Basically this will lead to a prop change, that's why whole component rerenders\r\n    //selectedControlId: state.designer.selectedControlId\r\n    // layout: state.designer.dashLayout\r\n  };\r\n}\r\n\r\nDesignerForm.defaultProps = defaultProps;\r\n\r\n//export default designerForm;\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DesignerForm);\r\n","// TODO: Obsolete this class \r\n// Replaced by Toolbar.js where the buttons are defined by calling class\r\n\r\nimport React from 'react';\r\nimport './designerToolbar.css';\r\nimport {Popup, Dropdown, Menu} from 'semantic-ui-react';\r\nimport {WIDTH_LARGE} from '../constants';\r\n\r\nconst menuItems = {\r\n    'left': [\r\n        {key:'designertb_save', icon: 'save', text: 'Save'},\r\n        {key:'designertb_saveas', icon: 'save outline', text: 'Save As...'},\r\n        {key:'designertb_open', icon: 'open folder outline', text: 'Open...'},\r\n    ],\r\n    'right': [\r\n        {key:'designertb_preview', icon: 'eye', text: 'Hold to Preview', disabled: true},\r\n    ]\r\n}\r\n\r\nconst renderToolbarBtn = (item) => {\r\n    let clsName = \"toolbarButton\";\r\n    if (item.disabled) {\r\n        clsName += \" toolbarButton-disabled\"\r\n    }\r\n    return <div key={item.key} className={clsName}>\r\n        <i className={'ui icon ' + item.icon}/>\r\n        {item.text}\r\n    </div>\r\n}\r\n\r\nconst renderFullMenu = () => {\r\n    return <div className=\"designerToolbar\">\r\n        <div className=\"left\">\r\n            {menuItems.left.map(item => renderToolbarBtn(item))}\r\n        </div>\r\n\r\n        <div className=\"center\">\r\n            <div className=\"title\">Untitled</div>\r\n            <Popup \r\n                inverted\r\n                basic\r\n                size='tiny' style={{opacity: '0.8'}} \r\n                content='Form is not yet saved' \r\n                trigger={<div className=\"infoContainer\">\r\n                <i className=\"ui icon info circle\"/>\r\n            </div>} />\r\n            \r\n            \r\n        </div>\r\n\r\n        <div className=\"rightTb\">\r\n            {menuItems.right.map(item => renderToolbarBtn(item))}\r\n        </div>\r\n        \r\n    </div>\r\n}\r\n\r\nconst renderCollapsedMenu = () => {\r\n    return <div className=\"designerToolbar\">\r\n        <div className=\"desginerDropdown\">\r\n            <i className=\"desginerDropbtn ui icon th\"/>\r\n            <div className=\"desginerDropdown-content\">\r\n                {menuItems.left.map(item => (<div key={item.key} className=\"desginerDropdown-item\">\r\n                    <i className={'ui icon ' + item.icon}/>\r\n                    <a>{item.text}</a>\r\n                </div>))}\r\n            </div>\r\n        </div>\r\n        &nbsp;\r\n        &nbsp;\r\n        <div className=\"title\">Untitled</div>\r\n        <Popup \r\n            inverted\r\n            size='tiny' style={{opacity: '0.8'}} \r\n            content='Form is not yet saved' \r\n            trigger={<div className=\"infoContainer\">\r\n                <i className=\"ui icon info circle\"/>\r\n            </div>} \r\n        />\r\n    </div>\r\n}\r\n\r\n\r\n// TODO: Make it responsive\r\nconst DesignerToolbar = (props) => {\r\n    if (props.containerWidth > WIDTH_LARGE) {\r\n        return renderFullMenu();\r\n    }\r\n    else {\r\n        return renderCollapsedMenu();\r\n    }\r\n}\r\n\r\nexport default DesignerToolbar;","import React from 'react';\r\nimport NoobSplitter from '../components/noobSplitter';\r\nimport ToolPanel from '../components/toolPanel';\r\nimport DesignerForm from '../components/designerForm';\r\nimport DesignerContentbase from './designerContentBase';\r\nimport DesignerToolbar from '../components/designerToolbar';\r\nimport {connect} from 'react-redux';\r\n\r\nconst DEFAULT_SPLIT_SIZES = [15, 85];\r\n\r\n// Uses RGL for the layouting\r\nclass DashboardDesignerContent extends DesignerContentbase {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.defaultSizes = DEFAULT_SPLIT_SIZES;\r\n    }\r\n\r\n    render() {\r\n        console.log('render dashboard designerContent');\r\n        return <NoobSplitter id=\"designerPanel\" onDragEnd={this.onSplitDragEnd} defaultSize={DEFAULT_SPLIT_SIZES}>\r\n            <ToolPanel containerWidth={this.state.leftPixels}/>\r\n            <div>\r\n                <DesignerToolbar containerWidth={this.state.rightPixels}/>                    \r\n                <DesignerForm containerWidth={this.state.rightPixels} controls={this.props.layout}/>\r\n            </div>\r\n        </NoobSplitter>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        layout: state.designer.dashLayout,\r\n        layoutData: state.designer.dashLayoutData,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(DashboardDesignerContent);","import React, {useState} from 'react';\r\nimport {Modal, Header, Button, Icon} from 'semantic-ui-react';\r\nimport Form, {Text as FormText, IconSelector, ColorSelector} from '../form/Form';\r\n\r\nconst KEY_NAME = \"Name\";\r\n\r\nconst SaveAsDialog = ({showSaveForm, title, formLabel, onSave, onClose}) => {\r\n    // Watch the state, to disable the Save button if it's empty\r\n    const [myState, setMyState] = useState({\r\n        [KEY_NAME]: null});\r\n\r\n    // console.log('SaveAsDialog render', myState[KEY_NAME]);\r\n\r\n    return <Modal open={showSaveForm}    \r\n    size='mini'\r\n    closeOnDimmerClick={true}\r\n    className=\"saveAsModal\"\r\n    >\r\n    <Header icon='save' content={title} />\r\n    <Modal.Content scrolling>\r\n    <Form onSubmit={(args) => onSave(args[KEY_NAME])} \r\n        watchedField={KEY_NAME}\r\n        setStateCb={setMyState}>\r\n        <FormText key={'SaveAs-' + KEY_NAME}\r\n            name={KEY_NAME}\r\n            label={formLabel}\r\n        />\r\n    <Modal.Actions>\r\n        <Button floated={'right'} \r\n                color='green' \r\n                type=\"submit\"\r\n                disabled={!myState[KEY_NAME] || myState[KEY_NAME].length === 0}\r\n        >\r\n            Save\r\n        </Button>\r\n        <Button floated={'right'} onClick={onClose}>\r\n            Cancel            \r\n        </Button>\r\n    </Modal.Actions>    \r\n\r\n    </Form>                 \r\n    </Modal.Content>\r\n    </Modal>;\r\n}\r\n\r\nexport default SaveAsDialog;","import React, {useState} from 'react';\r\nimport {Modal, Header, Button, Icon} from 'semantic-ui-react';\r\nimport Form, {Text as FormText, Dropdown as FormDropdown} from '../form/Form';\r\n\r\nconst KEY_NAME = \"Name\";\r\n\r\nconst OpenDialog = ({showOpenForm, title, formLabel, onOpen, onClose, options}) => {\r\n    // Watch the state, to disable the Save button if it's empty\r\n    const [myState, setMyState] = useState({\r\n        [KEY_NAME]: null});\r\n\r\n    // console.log('SaveAsDialog render', myState[KEY_NAME]);\r\n\r\n    return <Modal open={showOpenForm}    \r\n    size='mini'\r\n    closeOnDimmerClick={true}\r\n    className=\"openModal\"\r\n    >\r\n    <Header icon='folder' content={title} />\r\n    <Modal.Content scrolling>\r\n    <Form onSubmit={(args) => onOpen(args[KEY_NAME])} \r\n        watchedField={KEY_NAME}\r\n        setStateCb={setMyState}>\r\n        <FormDropdown key={'Open-' + KEY_NAME}\r\n            name={KEY_NAME}\r\n            label={formLabel}\r\n            options={options}\r\n        />\r\n    <Modal.Actions>\r\n        <Button floated={'right'} \r\n                color='green' \r\n                type=\"submit\"      \r\n                disabled={!myState[KEY_NAME] || myState[KEY_NAME].length === 0}          \r\n        >\r\n            Open\r\n        </Button>\r\n        <Button floated={'right'} onClick={onClose}>\r\n            Cancel            \r\n        </Button>\r\n    </Modal.Actions>    \r\n\r\n    </Form>                 \r\n    </Modal.Content>\r\n    </Modal>;\r\n}\r\n\r\nexport default OpenDialog;","import React from 'react';\r\nimport { bindActionCreators } from \"redux\";\r\nimport NoobSplitter from '../components/noobSplitter';\r\nimport ToolPanel from '../components/toolPanel';\r\nimport DesignerForm from '../components/designerForm';\r\nimport DesignerContentbase from './designerContentBase';\r\n//import DesignerToolbar from '../components/designerToolbar';\r\nimport Toolbar from '../components/toolbar';\r\nimport NoobForm from '../components/noobForm';\r\nimport './designerCommon.css';\r\nimport {saveLayout, openLayout, selectedPage} from '../actions';\r\nimport ShowMessage, {NotifType} from '../helper/notification';\r\n\r\nimport {connect} from 'react-redux';\r\nimport SaveAsDialog from '../components/saveAs';\r\nimport OpenDialog from '../components/openDialog';\r\n\r\nconst DEFAULT_SPLIT_SIZES = [25, 75];\r\n\r\nconst panelItems = [\r\n    {\r\n        title: 'Toolbox',\r\n        id: 'toolbox',\r\n        isCollapsed: false,\r\n        size: 0,\r\n        helpText: 'Drag an item to the Designer Area'\r\n    },\r\n    {\r\n        title: 'Properties',\r\n        id: 'properties',\r\n        isCollapsed: false,\r\n        size: 0,\r\n        helpText: 'Please select an item from the Designer Area to view the properties'\r\n    },\r\n]\r\n\r\n\r\nclass formsDesignerContent extends DesignerContentbase {\r\n    constructor(props) {\r\n        super(props);\r\n        //this.defaultSizes = DEFAULT_SPLIT_SIZES;\r\n        this.menuItems = {\r\n            'left': [\r\n                {key:'designertb_save', icon: 'save', text: 'Save', callback: this.saveCallback},\r\n                {key:'designertb_saveas', icon: 'save outline', text: 'Save As...', callback: this.saveAsCallback},\r\n                {key:'designertb_open', icon: 'open folder outline', text: 'Open...', callback: this.openCallback},\r\n                \r\n            ],\r\n            'right': [\r\n                //{key:'designertb_preview', icon: 'eye', text: 'Hold to Preview', disabled: true},\r\n                {key:'designertb_configPage', icon: 'window maximize outline', text: 'Configure Page Settings', callback: this.configPageSettings},\r\n            ]\r\n        }\r\n\r\n        this.state = {\r\n            ...this.state,\r\n            showSaveForm: false,\r\n            showOpenForm: false,\r\n            openedLayoutName: null,            \r\n        }\r\n    }\r\n\r\n    configPageSettings = () => {\r\n        // Fire a redux action to select the page, and unselect any selected control\r\n        this.props.selectedPage();\r\n    }\r\n\r\n    saveCallback = () => {\r\n        console.log('Save callback', this.props.layoutData);\r\n        // If untitled, call Save As callback\r\n        if (!this.props.layoutData.name) {\r\n            this.saveAsCallback();\r\n        }\r\n        else {\r\n            this.handleSave(this.props.layoutData.name);\r\n        }\r\n    }\r\n    \r\n    saveAsCallback = () => {\r\n        console.log('Save As callback');\r\n        // Popup the dialog to ask user to input name\r\n        this.setState({\r\n            showSaveForm: true\r\n        })        \r\n    }\r\n\r\n    handleSave = async (layoutName) => {\r\n        console.log('Save the layout...', layoutName);\r\n        let result = await this.props.saveLayout(this.props.layout, layoutName, this.props.layoutData); // dispatch redux action\r\n        if (result === true) {\r\n            ShowMessage(\"Layout Saved!\");\r\n            // Also \"open\" this now\r\n            this.setState({\r\n                openedLayoutName: layoutName\r\n            })\r\n        }\r\n        else {\r\n            ShowMessage(\"Failed to Save Layout!\", NotifType.danger, result.message);\r\n        }\r\n        this.handleCloseSave();\r\n\r\n        // Also fire a redux action to \"open\" the newly saved form\r\n        let layoutToUse = this.getLayoutToUse(layoutName);\r\n        this.props.openLayout(layoutToUse.controls, layoutToUse.layoutData)\r\n    }\r\n\r\n    handleCloseSave = () => {\r\n        console.log('handleCloseSave');\r\n        if (this.state.showSaveForm) {\r\n            this.setState({\r\n                showSaveForm: false\r\n            })\r\n        }\r\n    }\r\n    \r\n    openCallback = () => {\r\n        console.log('Open callback');\r\n        this.setState({\r\n            showOpenForm: true\r\n        });\r\n    }\r\n\r\n    // For closing the Open-Layout Dialog\r\n    handleCloseOpenDlg = () => {\r\n        console.log('handleCloseSave');\r\n        if (this.state.showOpenForm) {\r\n            this.setState({\r\n                showOpenForm: false\r\n            })\r\n        }\r\n    }\r\n\r\n    // After the user has selected a layout, then clicked open\r\n    handleOpenLayout = (layoutName) => {\r\n        // \r\n        if (this.state.showOpenForm) {\r\n            this.setState({\r\n                openedLayoutName: layoutName,\r\n                showOpenForm: false\r\n            })\r\n        }\r\n\r\n        // Also fire a redux action to update\r\n        let layoutToUse = this.getLayoutToUse(layoutName);\r\n        this.props.openLayout(layoutToUse.controls, layoutToUse.layoutData)\r\n    }\r\n\r\n    getLayoutToUse = (openedLayoutName) => {\r\n        // If the user did not open, just use the default layout from the reducer\r\n        let defaultReturn = {\r\n            controls: this.props.layout,\r\n            layoutData: this.props.layoutData, \r\n            title: \"Untitled\",\r\n            titleTooltip: \"Form is not yet saved\"\r\n        };\r\n\r\n        if (!openedLayoutName) {\r\n            return defaultReturn;\r\n        }\r\n\r\n        // Find \r\n        let layoutFromApi = this.props.savedLayouts.find(x => x.name === openedLayoutName);\r\n        if (!layoutFromApi) {\r\n            return defaultReturn;\r\n        }\r\n        return {\r\n            controls: JSON.parse(layoutFromApi.layoutJson),\r\n            layoutData: {\r\n                name: layoutFromApi.name,\r\n                columns: layoutFromApi.numCols,\r\n                rows: layoutFromApi.numRows,\r\n                pageFilterFields: layoutFromApi.pageFilterFields && JSON.parse(layoutFromApi.pageFilterFields),\r\n                pageApiData: layoutFromApi.pageApiData && JSON.parse(layoutFromApi.pageApiData),\r\n            },\r\n            title: layoutFromApi.name,\r\n            titleTooltip: \"Last saved on \" + layoutFromApi.lastUpdateDate\r\n        };\r\n    }\r\n    \r\n    render() {\r\n        console.log('render designerContent', this.props.savedLayouts);\r\n        let options = Array.isArray(this.props.savedLayouts) &&\r\n                    this.props.savedLayouts.map((layout) => {return {key: `option_${layout.name}`, text: layout.name, value: layout.name}});\r\n        let layoutToUse = this.getLayoutToUse(this.state.openedLayoutName);\r\n\r\n        return <NoobSplitter id=\"designerPanel\" onDragEnd={this.onSplitDragEnd} defaultSize={DEFAULT_SPLIT_SIZES}>\r\n            <ToolPanel panelItems={panelItems} containerWidth={this.state.leftPixels}/>\r\n            <div id=\"rightContainer\" className=\"designerContainer\">\r\n                {/* <DesignerToolbar containerWidth={this.state.rightPixels}/> */}\r\n                <Toolbar \r\n                    containerWidth={this.state.rightPixels}\r\n                    menuItems={this.menuItems}\r\n                    title={layoutToUse.title}\r\n                    titleTooltip={layoutToUse.titleTooltip}\r\n                />\r\n                <div className=\"layoutEditorContainer\">\r\n                    <NoobForm \r\n                        containerWidth={this.state.rightPixels}\r\n                        // layoutData={layoutToUse.layoutData}\r\n                        // controls={layoutToUse.controls}\r\n                        layoutData={this.props.layoutData}\r\n                        controls={this.props.layout}\r\n                        />\r\n                </div>\r\n                <SaveAsDialog showSaveForm={this.state.showSaveForm}\r\n                            title={\"Save Layout\"}\r\n                            formLabel={\"Layout name:\"}\r\n                            onSave={this.handleSave}\r\n                            onClose={this.handleCloseSave}\r\n                />\r\n                <OpenDialog showOpenForm={this.state.showOpenForm}\r\n                            title={\"Open Layout\"}\r\n                            formLabel={\"Layout name:\"}\r\n                            onOpen={this.handleOpenLayout}\r\n                            onClose={this.handleCloseOpenDlg}\r\n                            options={options}\r\n                />\r\n            </div>\r\n        </NoobSplitter>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        layout: state.designer.layout,\r\n        layoutData: state.designer.layoutData,\r\n        metadata: state.designer.metadata,\r\n        savedLayouts: state.mainApp.masterLayouts\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({ saveLayout, openLayout, selectedPage }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(formsDesignerContent);","import React from 'react';\r\nimport './hierDesignerToolbar.css';\r\n\r\n// Toolbar for the Hierachy Designer.\r\n// It is permanently placed on top.\r\n// Houses the search bar and other buttons\r\nconst HierarchyToolbar = ({onDelete, onInsert, onSave, onSearchText, bEnableDelete}) => {\r\n    let clsNamesDeleteBtn = 'hierDesignerToolbarButton';\r\n    if (!bEnableDelete) {\r\n        clsNamesDeleteBtn += ' hierDesignerToolbarButton-disabled';\r\n    }\r\n    return <div className=\"hierDesignToolbar\">\r\n        <div className=\"ui icon input small fluid\" style={{margin: \"5px\", width: \"100%\"}}>\r\n            <input type=\"text\" placeholder=\"Search tree...\" onChange={onSearchText} disabled/>\r\n            <i className=\"inverted circular filter icon\"></i>\r\n        </div>\r\n        <div className=\"toolBarBtnContainer\">\r\n            <div className=\"hierDesignerToolbarButton\" onClick={onSave}>\r\n            <i className=\"ui icon save\"/>\r\n            Save\r\n            </div>\r\n            <div className=\"hierDesignerToolbarButton\" onClick={onInsert}>\r\n            <i className=\"ui icon plus insert\"/>\r\n            Insert\r\n            </div>\r\n            <div className={clsNamesDeleteBtn} onClick={onDelete}>\r\n            <i className=\"ui icon trash alternate\"/>\r\n            Delete\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default HierarchyToolbar;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\nimport NoobSplitter from '../components/noobSplitter';\r\nimport DesignerContentbase from './designerContentBase';\r\nimport HierarchyDesignerTree from './hierearchyTree';\r\nimport HierarchyToolbar from '../components/hierDesignerToolbar';\r\nimport HierConfigPanel from './hierarchyConfigPanel';\r\nimport { selectHierDesignerTree, \r\n        updateHierDesignerTree, \r\n        insertNewNode, \r\n        filterHierDesignerTree,\r\n        fetchHierarchyViews,\r\n        saveHierarchyView } from '../actions/index';\r\nimport {findNodeByKey, filterTree, filterTreeEx} from '../helper/treefilter';\r\n\r\n\r\nimport './hierarchyTree.css'; //temp only\r\nimport './hierarchyDesigner.css';\r\nimport ShowMessage, { NotifType } from '../helper/notification';\r\n\r\nconst DEFAULT_SPLIT_SIZES = [25, 75];\r\n\r\nconst ToolbarPanel = ({children, onDelete, onInsert, onSave, onSearchText, bEnableDelete}) => {\r\n    //console.log('[render] AccordionPanel, id: ', id);\r\n    return <div className=\"toolbarPanel\">        \r\n        <div className=\"toolbarContainer\">\r\n            <HierarchyToolbar \r\n                onDelete={onDelete} \r\n                onInsert={onInsert} \r\n                onSave={onSave} \r\n                onSearchText={onSearchText}\r\n                bEnableDelete={bEnableDelete}/>\r\n        </div>\r\n        <div className=\"toolbarPanelBody\">\r\n            {children}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nconst HierarchyPropsPanel = (containerWidth) => {\r\n    return <HierConfigPanel containerWidth={containerWidth}/>\r\n}\r\n\r\n// This will be the intelligent class that will hold\r\n// the state of the hierarchy tree, to handle deletion and insertion of new nodes\r\nclass HierarchyDesigner extends DesignerContentbase { \r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchText: null,\r\n            treeData: null, // make a copy for filtering purposes\r\n            ...this.state\r\n        }\r\n    }\r\n\r\n    // When a tree node is selected\r\n    onSelect = (selectedKeys, info) => {\r\n        console.log('selected', selectedKeys, info);\r\n        this.selKey = info.node.props.eventKey;\r\n        // Fire an action to save the selected node to Redux\r\n        //this.props.selectToolPanelTree(this.selKey);\r\n        if (selectedKeys.length > 0) {\r\n            this.props.selectHierDesignerTree({\r\n              key: selectedKeys[0], \r\n              ...info.selectedNodes[0].props\r\n            });\r\n        }\r\n        else {\r\n            this.props.selectHierDesignerTree(null);\r\n        }\r\n      };\r\n\r\n    onHierarchyChanged = (data) => {\r\n        this.props.updateHierDesignerTree(data);\r\n    }\r\n\r\n    onSave = async () => {\r\n        console.log('onSave');\r\n        let result = await this.props.saveHierarchyView(this.props.hierarchyTree, this.props.userSettings)\r\n        if (result === true) {\r\n            ShowMessage(\"Saved Hierarchy View!\");\r\n        }\r\n        else {\r\n            ShowMessage(\"Failed to Save Hierarchy View!\", NotifType.danger, result.message);\r\n        }\r\n    }\r\n\r\n    onInsert = () => {\r\n        console.log('onInsert');\r\n        // popup a dialog to ask the user to specify the title?\r\n        // for now, just implement the edit page\r\n\r\n        // For the underlying structure: just implement the logic in the reducer\r\n        this.props.insertNewNode();\r\n    }\r\n\r\n    onDelete = () => {\r\n        console.log('onDelete');\r\n        // Actually the logic can also be implemented @reducer side. Anyways, we save one more redux action to create.\r\n        let deletedNode = this.props.selectedNode;\r\n        let data = [...this.props.hierarchyTree]; // make a new copy\r\n        let deletedNodeObj = findNodeByKey(data, deletedNode.key);\r\n        if (!deletedNodeObj) {\r\n            return; // sanity only\r\n        }\r\n\r\n        deletedNodeObj.parentArr.splice(deletedNodeObj.index, 1);\r\n        this.props.updateHierDesignerTree(data);\r\n    }\r\n\r\n    onSearchText = (e) => {        \r\n        this.setState({\r\n            searchText: e.currentTarget.value\r\n        });\r\n        // this.props.filterHierDesignerTree(e.currentTarget.value);        \r\n    }\r\n    \r\n    render() {\r\n        console.log('render hierarchyDesigner', this.state.rightPixels);\r\n        // TODO: Put a minsize first. Should make the toolbar buttons responsive.\r\n        return <NoobSplitter id=\"hierarchyDesigner\" onDragEnd={this.onSplitDragEnd} defaultSize={DEFAULT_SPLIT_SIZES} minSize={230}>\r\n            <ToolbarPanel \r\n                onDelete={this.onDelete}\r\n                onInsert={this.onInsert}\r\n                onSave={this.onSave}\r\n                onSearchText={this.onSearchText}\r\n                bEnableDelete={!!this.props.selectedNode && !!this.props.selectedNode.key}                \r\n            >\r\n                {this.props.hierarchyTree && <HierarchyDesignerTree \r\n                    onSelectCb={this.onSelect} \r\n                    onHierarchyChanged={this.onHierarchyChanged}\r\n                    treeData={this.props.hierarchyTree}\r\n                    selectedNodeKey={this.props.selectedNode ? this.props.selectedNode.key : null}\r\n                    searchText={this.state.searchText}\r\n                    userSettings={this.props.userSettings}\r\n                    draggable\r\n                    defaultExpandAll={true}\r\n                    />\r\n                }\r\n            </ToolbarPanel>\r\n            {HierarchyPropsPanel(this.state.rightPixels)}\r\n        </NoobSplitter>\r\n\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        hierarchyTree: state.hierarchyDesigner.hierarchyTree,\r\n        selectedNode: state.hierarchyDesigner.selectedNode,\r\n        userSettings: state.hierarchyDesigner.userSettings,        \r\n    }\r\n}\r\n  \r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({ selectHierDesignerTree, \r\n                                updateHierDesignerTree, \r\n                                insertNewNode, \r\n                                filterHierDesignerTree,\r\n                                fetchHierarchyViews,\r\n                                saveHierarchyView }, dispatch);\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(HierarchyDesigner);","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './specialTabContent.css';\r\nimport ReportForm from '../components/reportForm';\r\n\r\n//hierarchyPropName: In the Hierarchy Designer, there is a checkbox for \"displayAsMapView\" and \"displayAsAnalysisView\"\r\n// Expectation is that user will tick the checkbox for ONE hierarchy.\r\n// Basically this tab will display the first hierarchy with that tick (if there are more than one).\r\nconst SpecialTabContent = ({hierarchyPropName}) => {\r\n\r\n    // Nested functions - START\r\n    const findFirstNode = (userSettings) => {\r\n        if (!userSettings) {\r\n            return null;\r\n        }\r\n\r\n        return userSettings.find(u => u[hierarchyPropName] === true);\r\n    }\r\n\r\n    const getLayoutObj = (layoutName, masterLayouts) => {\r\n        let findLayout = masterLayouts && masterLayouts.find(layout => layout.name === layoutName);\r\n        return {\r\n            controls: findLayout && JSON.parse(findLayout.layoutJson),\r\n            layoutData: findLayout && {\r\n                rows: findLayout.numRows,\r\n                columns: findLayout.numCols,\r\n                pageFilterFields: findLayout.pageFilterFields && JSON.parse(findLayout.pageFilterFields),\r\n                pageApiData: findLayout.pageApiData && JSON.parse(findLayout.pageApiData)\r\n            }\r\n        }\r\n    }\r\n    // Nested functions - END\r\n\r\n    // Find from the redux store the first hierarchy with {hierarchyPropName} checked\r\n    const masterHierarchyViews = useSelector(state => state.mainApp.masterHierarchyViews);\r\n    const masterLayouts = useSelector(state => state.mainApp.masterLayouts);\r\n    const metadata = useSelector(state => state.mainApp.masterMetadata);\r\n    let defaultView = masterHierarchyViews && masterHierarchyViews[0];\r\n    let userSettings = defaultView && JSON.parse(defaultView.nodeSettingsJson);\r\n\r\n    let findSettingNode = findFirstNode(userSettings);\r\n    if (!findSettingNode) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    let layoutName = findSettingNode.pageAssoc;\r\n    // Note: For now, just assume that special tabs have a pageAssoc defined, instead of inherited page\r\n    // So that we don't need to go and find the inherited page from the hierarchy tree\r\n    let layoutObj = getLayoutObj(layoutName, masterLayouts);\r\n\r\n    return <div className=\"specialTabContainer\">\r\n        <ReportForm\r\n            containerWidth={window.innerWidth}\r\n            layoutData={layoutObj.layoutData}\r\n            controls={layoutObj.controls}\r\n            metadata={metadata}\r\n            layoutName={layoutName}\r\n            pageFilters={null}\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default SpecialTabContent;","import React, {useState} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Form, {FormDateRange} from '../form/Form';\r\nimport './downloadCenterContent.css'\r\nimport { Segment, Label, Button } from 'semantic-ui-react';\r\nimport FormDropDown from '../form/FormDropDown';\r\nimport {requestDownloadReport} from '../actions';\r\nimport {fetchPageDataSync, fetchPageDataAsync} from '../api/pageApiManager';\r\nimport {findExecSummaryRecords} from '../api/ExecutiveSummaryLogic';\r\nimport ShowMessage, {NotifType} from '../helper/notification';\r\nimport MyEditor from '../components/MyEditor';\r\n\r\n// Called to set the initial values\r\nconst setPdfFormValues = (setValueFunc, inputObj) => {\r\n    // Set the Analysis Period to Custom Range\r\n    setValueFunc(\"downloadCentreAnalysisPeriod\", \"CustomRange\");\r\n}\r\n\r\n// TODO: put this inside a settings config\r\nconst EXEC_SUMMARY_API = \"https://0kwuefbg37.execute-api.ap-south-1.amazonaws.com/Initial/execsummary\";\r\n\r\n// TODO: Create a Report Designer component.\r\n// The dropdown options will be the Report Hierarchy designed by the user\r\nconst downloadOptions = [\r\n    { key: 'ExecSummary', text: 'APR Executive Summary', value: 'ExecSummary'},\r\n    { key: 'Full APR Report', text: 'Full APR Report', value: 'Full APR Report',  disabled: true },\r\n];\r\n\r\nconst formatDate = (date) => {\r\n    return `${date.getFullYear()}-${date.getMonth()+1}`;\r\n}\r\n\r\nconst constructReportTitle = (execReport) => {\r\n    if (!execReport) {\r\n        return \"Report.pdf\";\r\n    }\r\n\r\n    let start = new Date(execReport.aprStart);\r\n    let end = new Date(execReport.aprEnd);\r\n\r\n    return `Report_${formatDate(start)}_${formatDate(end)}.pdf`;\r\n}\r\n\r\n\r\nconst DownloadCenterContent = () => {\r\n\r\n    const downloadExecReport = async (execReport) => {\r\n        let response = await dispatch(requestDownloadReport({\r\n            uuid: execReport.uuid,\r\n            start: execReport.aprStart,\r\n            end: execReport.aprEnd\r\n        }));\r\n        const url = window.URL.createObjectURL(new Blob([response.data], {type: \"application/octet-stream\"}));\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.setAttribute('download', `${constructReportTitle(execReport)}`); //or any other extension\r\n        document.body.appendChild(link);\r\n        link.click();\r\n    }\r\n\r\n    const onSubmitDownloadReport = (args) => {\r\n        console.log('onSubmitDownloadReport', args);\r\n        // Disable the download button while fetching the report\r\n        setDownloading(true);\r\n        setDownloadProgress(\"Fetching Exec Summaries\");\r\n\r\n        // Get the Exec Summary API Data from the server first\r\n        fetchPageDataAsync(EXEC_SUMMARY_API)\r\n        .catch(error => {\r\n            setDownloading(false);\r\n            setDownloadProgress(\"Download Report\");    \r\n        })\r\n        .then(async apiResponse => {\r\n            // Determine the Exec Reports to print\r\n            let execReports = findExecSummaryRecords(apiResponse, args);\r\n            if (execReports.length === 0) {\r\n                ShowMessage(\"Did not find matching Executive Summary Record\", NotifType.warning, \"Please try another Analysis Period\")\r\n            }\r\n            // testing only, multiple pages\r\n            //execReports = execReports.concat(execReports);\r\n            for (let i = 0; i < execReports.length; i++) {\r\n                setDownloadProgress(`Downloading Report ${i+1} of ${execReports.length}`);   \r\n                await downloadExecReport(execReports[i]);\r\n            }\r\n            debugger\r\n            setDownloading(false);\r\n            setDownloadProgress(\"Download Report\");\r\n        });\r\n\r\n        \r\n\r\n        // For each exec report, send the request to the pdf service\r\n        // dispatch(requestDownloadReport(args.analysisPeriod)).then(response => {\r\n        //     debugger\r\n        //     const url = window.URL.createObjectURL(new Blob([response.data], {type: \"application/octet-stream\"}));\r\n        //     const link = document.createElement('a');\r\n        //     link.href = url;\r\n        //     link.setAttribute('download', 'file.pdf'); //or any other extension\r\n        //     document.body.appendChild(link);\r\n        //     link.click();\r\n\r\n        //     setDownloading(false);\r\n        // });\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    const [downloading, setDownloading] = useState(false);\r\n    const [downloadProgress, setDownloadProgress] = useState(\"Download Report\");\r\n\r\n    //let buttonTitle = downloading ? \"Downloading Report. Please wait...\" : \"Download Report\";\r\n\r\n    return <div className=\"downloadCenterContent\">\r\n        <Segment>\r\n            <Form \r\n                setControlValues={setPdfFormValues}\r\n                onSubmit={onSubmitDownloadReport}\r\n                // action=\"http://localhost:5000/createpdf\"\r\n                // method=\"post\"\r\n            >\r\n                <div className=\"segmentTitle\">Request PDF Report</div>\r\n                <Label tag size=\"large\" color=\"brown\">Step 1:&nbsp;&nbsp;&nbsp;Enter the Analysis Period</Label>\r\n                <div className=\"downloadCenterFieldContainer\">                    \r\n                    <FormDateRange alwaysCustomRange key=\"downloadCentreAnalysisPeriod\" name=\"analysisPeriod\" label={null} showMonthYearPicker dateFormat=\"yyyy / MMM\"/>\r\n                </div>\r\n                \r\n                <Label tag size=\"large\" color=\"brown\">Step 2:&nbsp;&nbsp;&nbsp;Select the APR Download Type</Label>\r\n                <div className=\"downloadCenterFieldContainer\">\r\n                    <div></div>\r\n                    <FormDropDown key={'downloadCenterPdfOptions'}\r\n                        name={'downloadCenterPdfOptions'}\r\n                        label=\"\"\r\n                        options={downloadOptions}\r\n                        size=\"small\"\r\n                        //defaultValue={\"ExecSummary\"} // does not work...maybe need to bind to a state value, and call setState during componentWillXXX\r\n                    />\r\n                </div>\r\n\r\n                <Label tag size=\"large\" color=\"brown\">Step 3:&nbsp;&nbsp;&nbsp;Download Report</Label>\r\n                <div className=\"downloadCenterFieldContainer\">                    \r\n                    <div></div>\r\n                    <Button primary disabled={downloading}>{downloadProgress}</Button>\r\n                </div>\r\n\r\n            </Form>\r\n        </Segment>\r\n        {/* <MyEditor/> */}\r\n    </div>\r\n}\r\n\r\nexport default DownloadCenterContent;","import React, { useState } from \"react\";\r\nimport { EditorState } from \"draft-js\";\r\nimport \"draft-js/dist/Draft.css\";\r\nimport Editor from \"draft-js-plugins-editor\";\r\nimport createLinkifyPlugin from \"draft-js-linkify-plugin\";\r\n\r\nimport \"./MyEditor.css\";\r\n\r\nconst linkifyPlugin = createLinkifyPlugin({\r\n  target: \"_blank\",\r\n  component: props => {\r\n    const { contentState, ...rest } = props;\r\n    return <a {...rest} onClick={() => alert(\"link clickedxxx!!!\")} />;\r\n  }\r\n});\r\nconst plugins = [linkifyPlugin];\r\n\r\nconst MyEditor = () => {\r\n\r\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\r\n\r\n  const onChange = editorState => {\r\n    setEditorState(editorState);\r\n  };\r\n\r\n  const focus = () => {\r\n    //this.editor.focus();\r\n  };\r\n\r\n    return (\r\n      <div className=\"editor\">\r\n        <Editor\r\n          editorState={editorState}\r\n          onChange={onChange}\r\n          plugins={plugins}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default MyEditor;","import React, {useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\nimport NoobSplitter from '../components/noobSplitter';\r\nimport DesignerContentbase from './designerContentBase';\r\nimport Form, {Text as FormText, FormCheckbox, Dropdown as FormDropDown, FormTreeDropDown, FormRadio, FormDateRange} from '../form/Form';\r\nimport { Form as SemanticForm, Segment} from \"semantic-ui-react\";\r\nimport ShowMessage, { NotifType } from '../helper/notification';\r\nimport Toolbar from '../components/toolbar';\r\nimport 'rc-tree-select/assets/index.css';\r\nimport TreeSelect, { SHOW_PARENT } from 'rc-tree-select';\r\nimport {findNodeByKey} from '../helper/treefilter';\r\nimport _ from \"lodash\";\r\nimport {Button, Icon, Label} from 'semantic-ui-react';\r\n\r\nimport './dataDesignerContent.css';\r\n\r\nconst DEFAULT_SPLIT_SIZES = [15, 85];\r\nconst defaultScope = 'self';\r\nconst ID_PREVIEW_BTN = 'dataDsgnPreview';\r\n\r\nconst DataListPanel = () => {\r\n    return <div>\r\n        Data List Panel (Under Construction)\r\n    </div>\r\n}\r\n\r\nconst menuItems = {\r\n    'left': [\r\n        {key:'datadesignertb_save', icon: 'save', text: 'Save', type:'submit'},\r\n        {key:'datadesignertb_saveas', icon: 'save outline', text: 'Save As', type:'submit'},\r\n    ],\r\n};\r\n\r\n/*\r\nconst addUniqueToArray = (srcArray, destArray) => {\r\n    if (!srcArray || !destArray) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < srcArray.length; i++) {\r\n        if (destArray.includes(srcArray[i])) {\r\n            continue;\r\n        }\r\n        destArray.push(srcArray[i]);\r\n    }\r\n}\r\n\r\nconst addSelectedKpisToArray = (srcArray, destArray) => {\r\n    if (!srcArray || !destArray) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < srcArray.length; i++) {\r\n        let currKpiGrp = srcArray[i];\r\n        \r\n        let findGrpQry = destArray.find(x => x.kpiGrp === currKpiGrp.kpiGrp);\r\n        if (!findGrpQry) {\r\n            destArray.push(currKpiGrp);\r\n            continue;\r\n        }\r\n\r\n        // If we find the group, check if it contains all KPI's\r\n        // Note: Do not assume all groups with same name necessarily have same set of KPI's\r\n        for (let j = 0; j < currKpiGrp.kpis.length; j++) {\r\n            if (!findGrpQry.kpis.includes(currKpiGrp.kpis[j])) {\r\n                findGrpQry.kpis.push(currKpiGrp.kpis[j]);\r\n            }\r\n        }        \r\n    }\r\n}\r\n\r\nconst filterObj = (obj, fields) => {\r\n    return _.pick(obj, fields);\r\n}\r\n\r\n\r\nconst gatherKpiGroupOptions = (selectedNode, scope, hierarchyKpi, selectedKpiGroups) => {\r\n    // If hierarchy is a target, just render all the KPI groups\r\n    let retObj = {};\r\n    if (!hierarchyKpi || !selectedNode) {\r\n        return retObj;\r\n    }\r\n    console.log('renderKpiGroups', selectedNode, scope);\r\n    \r\n    if (scope === 'self') {\r\n        let kpiGrps = hierarchyKpi[selectedNode.item.key] || [];\r\n        let kpiGrpsFiltered = filterObj(kpiGrps, selectedKpiGroups); // We only add the KPI's that belong to the selected KPI Groups\r\n        retObj.kpiGrps = Object.keys(kpiGrps);\r\n\r\n        retObj.kpis = getKpiObjects(kpiGrpsFiltered);\r\n        //retObj.kpis = [].concat.apply([], Object.values(kpiGrpsFiltered).map(x => Object.values(x)));\r\n    }\r\n    else {\r\n        // Gather all the uniq items from all its children (recursive)\r\n        // Assume that the path is the basis for now\r\n        retObj.kpiGrps = []; // All KPI Groups belonging to the hierarchy\r\n        retObj.kpis = []; // All KPI's belonging to the selected KPI groups only\r\n        for (var key in hierarchyKpi) {\r\n            \r\n            if (key === selectedNode.item.key || !key.includes(selectedNode.item.key)) {\r\n                continue;\r\n            }\r\n            let kpiGrps = hierarchyKpi[key] || [];\r\n            let currKpiGrps = Object.keys(kpiGrps);\r\n            \r\n            addUniqueToArray(currKpiGrps, retObj.kpiGrps);\r\n            \r\n            let kpiGrpsFiltered = filterObj(kpiGrps, selectedKpiGroups);\r\n            let currKpis = getKpiObjects(kpiGrpsFiltered);\r\n            addSelectedKpisToArray(currKpis, retObj.kpis);\r\n\r\n            // let currKpis = [].concat.apply([], Object.values(kpiGrpsFiltered).map(x => Object.values(x)));\r\n            // addUniqueToArray(currKpis, retObj.kpis);\r\n        }\r\n    }\r\n\r\n    return retObj;\r\n}\r\n\r\n// KPI's belonging to different KPI groups may have the same name\r\n// e.g. \"Time in Control\" can be from \"Loop Controllability\" or \"Valve Controllability\"\r\n// To differentiate, we include the KPI Group also.\r\nconst getKpiObjects = (kpiGroups) => {\r\n    if (!kpiGroups) {\r\n        return null;\r\n    }\r\n\r\n    let retList = [];\r\n    for (let kpiGrp in kpiGroups) {\r\n        if (!kpiGroups.hasOwnProperty(kpiGrp)) {\r\n            continue;\r\n        }\r\n\r\n        retList.push({\r\n            kpiGrp: kpiGrp,\r\n            kpis: kpiGroups[kpiGrp]\r\n        });        \r\n    }\r\n\r\n    return retList;\r\n}\r\n*/\r\n\r\nconst renderDropdown = (name, listItems) => {\r\n    let dropdownOpts = listItems ? listItems.map(x => {\r\n        return {\r\n        key: 'dataDsgn_' + name + '_' + x,\r\n        text: x,\r\n        value: x\r\n    }}) : [];\r\n\r\n    return <FormDropDown name={name} options={dropdownOpts} multiple/>;\r\n}\r\n\r\nconst renderPreviewTable = () => {\r\n\r\n}\r\n\r\n// converts the dimensions from metadata into a format the tree-select component expects\r\nconst convertApiMetadataDims = (apiMetadataDims, parent=null) => {\r\n    if (!apiMetadataDims) {\r\n        return null;\r\n    }\r\n\r\n    return apiMetadataDims.map(x => {\r\n        let {name, items, ...rest} = x;\r\n        return {\r\n            name: parent ? `${parent.name}.${name}` : name,\r\n            value: parent ? `${parent.name}.${name}` : name,\r\n            title: name,\r\n            children: convertApiMetadataDims(items, x),\r\n            ...rest\r\n        }\r\n    });\r\n}\r\n\r\nconst convertApiMetadataFilters = (apiMetadata) => {\r\n    // Basically, add the Request Params to the front (e.g. )\r\n    let metadataDims = convertApiMetadataDims(apiMetadata.Dimensions);\r\n    // Assume request params is single level only\r\n    let requestItems = apiMetadata.RequestParams.map(r => {\r\n        let {name, ...rest} = r;\r\n        return {\r\n            name: name,\r\n            value: name,\r\n            title: name,\r\n            children: [],\r\n            ...rest\r\n        }\r\n    });\r\n    metadataDims.unshift(...requestItems);    \r\n    return metadataDims;\r\n}\r\n\r\nconst onTreeSelect = (value, node, extra) => {\r\n    // TODO:\r\n    // [1] If the parent node is selected, unselect all child nodes (implicitly, all child nodes are already included)\r\n}\r\n\r\nconst renderFilterFields = (state, props) => {\r\n    if (!state || !state.filterFields) {\r\n        return null;\r\n    }\r\n\r\n    let filterFields = state.filterFields.map((filter, i) => <div className=\"filterRow\" key={\"filterField\" + i}>\r\n        <SemanticForm.Field className=\"filterField\">\r\n            <FormTreeDropDown \r\n                name={\"filterField\" + i}\r\n                treeData={props.filtersMetadata} \r\n                isRequired={false}\r\n                label={\"Field Name\"}                     \r\n            />\r\n        </SemanticForm.Field>\r\n        <SemanticForm.Field className=\"filterField\">\r\n            <FormText\r\n                label={\"Filter Value\"}\r\n                small\r\n            />\r\n        </SemanticForm.Field>\r\n        <SemanticForm.Field className=\"filterFieldAligner\">\r\n            <Button type=\"button\" className=\"filterFieldBtn\">Delete</Button>\r\n        </SemanticForm.Field>\r\n    </div>);\r\n\r\n    return <div className=\"filterTable\">{filterFields}\r\n        </div>\r\n}\r\n\r\nconst renderFilterSegment = (state, props) => {\r\n    return <Segment><SemanticForm.Field>\r\n        <div className=\"segmentTitle\">Filters:</div>\r\n        {renderFilterFields(state, props)}\r\n        <Button type=\"button\">Add Filter</Button>\r\n    </SemanticForm.Field>\r\n    </Segment>\r\n}\r\n\r\nconst renderDataDesignerPanelContent = (props, state, errors) => {\r\n    let findSelNode = findNodeByKey(props.hierarchyConso, state.hierarchyTree);\r\n    //let selNodeIsFolder = !!findSelNode && findSelNode.item.unitType !== 'Target';    \r\n    //let kpiGroupOptions = gatherKpiGroupOptions(findSelNode, state.HierarchyScope, props.hierarchyKpi, state.hierDsgnKpiGroup);    \r\n\r\n    let previewIcon = \"eye\";\r\n    let previewText = \"Preview Data\";\r\n    if (state.fetchingPreview) {\r\n        previewText = \"Fetching Preview Data...\";\r\n        previewIcon = \"hourglass half\";\r\n    }\r\n\r\n    return <div className=\"dataDesignerPanelContainer\">\r\n        <Segment>\r\n        <div className=\"segmentTitle\">Analysis Period Test</div>\r\n        <FormDateRange  name=\"AnalysisPeriod\"\r\n        />\r\n        </Segment>   \r\n\r\n        <Segment>\r\n        <div className=\"segmentTitle\">Data Source</div>\r\n        <FormDropDown \r\n            // label=\"Select Dimensions:\"\r\n            name=\"dataSource\" \r\n            isRequired={false} \r\n            onSelect={onTreeSelect}\r\n            options={[]}            \r\n        />\r\n        </Segment>        \r\n\r\n        <Segment>\r\n        <div className=\"segmentTitle\">Metadata Name</div>\r\n        <FormDropDown \r\n            // label=\"Select Dimensions:\"\r\n            name=\"metadataName\" \r\n            isRequired={false} \r\n            onSelect={onTreeSelect}\r\n            options={[]}\r\n        />\r\n        </Segment>                \r\n\r\n        <Segment>\r\n        <div className=\"segmentTitle\">Dimensions</div>\r\n        <FormTreeDropDown \r\n            // label=\"Select Dimensions:\"\r\n            name=\"hierarchyTree\" \r\n            treeData={convertApiMetadataDims(props.metadata.Dimensions)} \r\n            isRequired={false} \r\n            multiple\r\n            onSelect={onTreeSelect}\r\n        />\r\n        </Segment>\r\n\r\n        {renderFilterSegment(state, props)}\r\n\r\n        <Segment>\r\n        <div className=\"segmentTitle\">Other Settings</div>\r\n        <FormTreeDropDown \r\n            label=\"Sort:\"\r\n            name=\"hierarchyTreeSort\" \r\n            treeData={convertApiMetadataDims(props.metadata.Dimensions)} \r\n            isRequired={false} \r\n            multiple\r\n            onSelect={onTreeSelect}\r\n        />\r\n        <FormText\r\n            label={\"Size\"}\r\n            name={\"datasetSize\"}\r\n            small\r\n        />\r\n        </Segment>\r\n\r\n        {state.formInvalid && \r\n            <div><Label basic color='red' pointing>\r\n            {state.formInvalid}\r\n            </Label></div>\r\n        }\r\n\r\n        {/* <button id={ID_PREVIEW_BTN} className={previewBtnClassName} icon=\"search\">{previewText}</button> */}\r\n        <Button id={ID_PREVIEW_BTN} primary disabled={state.fetchingPreview}>\r\n            <Icon name={previewIcon}/>\r\n            {previewText}</Button>\r\n        {renderPreviewTable()}\r\n    </div>\r\n}\r\n\r\nconst getValidationError = (formData) => {\r\n    if (!formData) {\r\n        return \"Form is empty!\"\r\n    }\r\n\r\n    // Either Dimension or Kpi must be present\r\n    // If both are not present, return error\r\n    if (!formData.dataDsgnDimensions && \r\n        !((formData.hierDsgnKpiGroup && formData.hierDsgnKpiGroup.length) || \r\n            (formData.hierDsgnKpi && formData.hierDsgnKpi.length)\r\n        )\r\n    ) {\r\n            return \"Either Dimension or Kpi must be selected\";\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst onSubmit = (formData, setStateCb) => {\r\n    //debugger\r\n    console.log('Data Designer Submit', formData);\r\n    // [1] Perform some validation first\r\n    let validationError = getValidationError(formData);\r\n    if (validationError) {\r\n        setStateCb({\r\n            formInvalid: validationError\r\n        });\r\n        return;\r\n    }\r\n\r\n    if (document.activeElement.id === ID_PREVIEW_BTN) {\r\n        // Assume that if preview button was clicked, that would be the activeElement\r\n        setStateCb({\r\n            fetchingPreview: true,\r\n            formInvalid: null,            \r\n        });\r\n    }\r\n    else {\r\n\r\n    }\r\n\r\n}\r\n\r\nconst DataDesignerForm = (props, containerWidth, state, setStateCb) => {\r\n    return <Form \r\n        className=\"hierConfigPanelContainer\" \r\n        key='formDataDesigner' \r\n        //onSubmit={(formData) => {onSubmit(formData, setStateCb)}} \r\n        onSubmit={data => {debugger}}\r\n        setControlValues={setControlValues}\r\n        watchedField={[]}\r\n        // inputObj: set it to the loaded data source when saving is implemented\r\n        inputObj={null} \r\n        setStateCb={setStateCb}\r\n        >        \r\n        <Toolbar \r\n            containerWidth={containerWidth}\r\n            menuItems={menuItems}\r\n        />\r\n        {renderDataDesignerPanelContent(props, state)}\r\n    </Form>\r\n}\r\n\r\n// Called when component mounts\r\n// Purpose is to set the initial values\r\nconst setControlValues = (setValueFunc, inputObj) => {\r\n    if (!inputObj) {\r\n        return;\r\n    }\r\n\r\n    //setValueFunc('HierarchyScope', 'children');\r\n    //setValueFunc('hierDsgnKpiGroup', []);\r\n\r\n    //setValueFunc('AnalysisPeriodStart', new Date());\r\n}\r\n\r\n// This is where the user configures the datasources that can be linked to the controls\r\nclass DataDesignerContainer extends DesignerContentbase { \r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hierarchyTree: null,\r\n            HierarchyScope: defaultScope,\r\n            hierDsgnKpiGroup: [],       // The currently selected KPI Group\r\n            fetchingPreview: false,\r\n            formInvalid: null,\r\n            filterFields: [{\r\n                name: '',\r\n                value: null\r\n            },\r\n            {\r\n                name: '',\r\n                value: null\r\n            },\r\n            {\r\n                name: '',\r\n                value: null\r\n            }],\r\n            ...this.state\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        console.log('render DataDesignerContainer', this.props.metadata);\r\n        // TODO: Put a minsize first. Should make the toolbar buttons responsive.\r\n        return <NoobSplitter id=\"hierarchyDesigner\" onDragEnd={this.onSplitDragEnd} defaultSize={DEFAULT_SPLIT_SIZES} minSize={230}>\r\n            {DataListPanel()}\r\n            {DataDesignerForm(this.props, this.state.rightPixels, this.state, this.setState.bind(this))}\r\n        </NoobSplitter>\r\n\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        hierarchyConso: state.dataDesigner.hierarchyConso,\r\n        dimensions: state.dataDesigner.dimensions,\r\n        hierarchyKpi: state.dataDesigner.hierarchyKpi,\r\n        metadata: state.designer.metadata,\r\n        dimensionsMetadata: convertApiMetadataDims(state.designer.metadata.Dimensions),\r\n        filtersMetadata: convertApiMetadataFilters(state.designer.metadata),\r\n    }\r\n}\r\n  \r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({ }, dispatch);\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(DataDesignerContainer);","import React from 'react';\r\nimport './trialPage.css';\r\nimport {PieWithData} from '../charts/pieChart';\r\nimport {BarChartWithData} from '../charts/barChart';\r\nimport { render } from 'react-dom';\r\nimport crossfilter from 'crossfilter2';\r\nimport Form, {Text as FormText, FormCheckbox, Dropdown as FormDropDown, FormTreeDropDown, FormRadio} from '../form/Form';\r\nimport { Button } from 'semantic-ui-react';\r\nimport {findNodeByKey} from '../helper/treefilter';\r\nimport TreeDropdown from '../controls/treeDropdown';\r\nimport ImageMap from '../controls/imageMap';\r\nimport _ from \"lodash\";\r\n\r\nconst dataPie = [\r\n    { name: 'Good', value: 400 },\r\n    { name: 'Bad', value: 300 },\r\n    { name: 'Fair', value: 300 },\r\n    { name: 'Uncertain', value: 200 },\r\n  ];\r\n\r\nconst dummyVendorModels = {\r\n    'Apple': ['iMac', 'iPhone', 'Macbook', 'iPad'],\r\n    'Samsung': ['Galaxy S', 'Galaxy Note', 'Galaxy Tab'],\r\n    'Huawei': ['P30', 'Mate30',]\r\n}\r\n\r\nconst dummyBarchartData = [\r\n    {'Brand new': 50, 'Used': 30, vendor: 'Apple'},\r\n    {'Brand new': 40, 'Used': 20, vendor: 'Samsung'},\r\n    {'Brand new': 20, 'Used': 10, vendor: 'Huawei'},\r\n]\r\n\r\nconst categoryLookup = {\r\n    'iMac': 'Computer',\r\n    'iPhone': 'Phone',\r\n    'Macbook': 'Computer',\r\n    'iPad': 'Tablet',\r\n    'Galaxy S':'Phone',\r\n    'Galaxy Note':'Phone',\r\n    'Galaxy Tab':'Tablet',\r\n    'P30': 'Phone',\r\n    'Mate30': 'Phone',\r\n}\r\n\r\nconst itemConds = ['Brand new', 'Used']\r\n\r\nconst generateApiData = () => {\r\n    let retlist = [];\r\n    for (let prop in dummyVendorModels) {\r\n        let currVendor = dummyVendorModels[prop];\r\n        for (let i = 0; i < currVendor.length; i++) {\r\n            let currModel = currVendor[i];\r\n            for (let n = 0; n < 10; n++) {\r\n                retlist.push({\r\n                    deviceId: `${prop}-${currModel}-${n}`,\r\n                    vendor: prop,\r\n                    model: currModel,\r\n                    itemCond: itemConds[n % itemConds.length],\r\n                    category: categoryLookup[currModel]\r\n                });        \r\n            }\r\n        }\r\n    }\r\n\r\n    return retlist;\r\n}\r\n\r\nconst filterObj = (obj, fields) => {\r\n    return _.pick(obj, fields);\r\n}\r\n\r\nconst getDimensionObj = (cfData, groupingsList) => {\r\n    return cfData.dimension( d => {\r\n        let pickedData = filterObj(d, groupingsList);\r\n        return JSON.stringify(pickedData);\r\n    });\r\n}\r\n\r\nconst getDimGroupCount = (dim) => {\r\n    let groupedDimCounts = dim.group().reduceCount().all();\r\n\r\n    return groupedDimCounts.map(x => {\r\n        return {\r\n            name: x.key,\r\n            value: x.value\r\n        }\r\n    })\r\n}\r\n\r\nconst groupData = (cfDataIn, groupingsList) => {\r\n    let cfData = cfDataIn;\r\n    let dimGrouping = cfData.dimension( d => {\r\n        let pickedData = filterObj(d, groupingsList);\r\n        return JSON.stringify(pickedData);\r\n    });\r\n\r\n    let dimFiltering = cfData.dimension( d => {\r\n        let pickedData = filterObj(d, groupingsList);\r\n        return JSON.stringify(pickedData);\r\n    });\r\n\r\n    let filterAppleIphone = {\r\n        vendor: \"Apple\",\r\n        //model: \"iPhone\"\r\n    };\r\n    //dimFiltering.filter(JSON.stringify(filterAppleIphone));\r\n    //let grpVendorModels = dimVendorModel.group().reduceCount().all();\r\n    let grpVendorModels = dimGrouping.group().reduceCount().all();\r\n    \r\n    return grpVendorModels.map(x => {\r\n        return {\r\n            name: x.key,\r\n            value: x.value\r\n        }\r\n    })\r\n}\r\n\r\n// Expected to be a user config\r\nconst metaDimHier4Pie = [\r\n    {\r\n        key: 'vendor',\r\n        value: 'vendor',\r\n        title: 'Vendor',\r\n        children: [{\r\n            key: 'model',\r\n            value: 'model',\r\n            title: 'Model',    \r\n        }],        \r\n    }\r\n]\r\n\r\n// Expected to be a user config\r\nconst metaDimHier4Bar = [\r\n    {\r\n        key: 'vendor',\r\n        value: 'vendor',\r\n        title: 'Vendor',\r\n        children: [{\r\n            key: 'category',\r\n            value: 'category',\r\n            title: 'Category',    \r\n        }],        \r\n    }\r\n]\r\n\r\nconst getBottomMostGroup = (groupings) => {\r\n    if (!groupings || !groupings.length) {\r\n        return null;\r\n    }\r\n\r\n    // Just return the last item\r\n    return groupings[groupings.length - 1];\r\n}\r\n\r\n// old\r\nconst formatBarchartDataOld = (groupedData, primaryAxis, secondaryGroup) => {\r\n    let retList = [];\r\n    for (let i = 0; i < groupedData.length; i++) {\r\n        let currGroupedData = groupedData[i];\r\n        let jsonStrObj = JSON.parse(currGroupedData.name);\r\n        let primAxisVal = jsonStrObj[primaryAxis];\r\n        let secondaryName = jsonStrObj[secondaryGroup];\r\n        let secondaryVal = currGroupedData.value;\r\n\r\n        let findItem = retList.find(x => x[primaryAxis] === primAxisVal);\r\n        if (!findItem) {\r\n            findItem = {\r\n                [primaryAxis]: primAxisVal\r\n            }\r\n            retList.push(findItem);\r\n        }\r\n        findItem[`${secondaryName}`] = secondaryVal;\r\n    }\r\n\r\n    return retList;\r\n}\r\n\r\nconst formatBarchartData = (groupedData, primaryAxes, secondaryGroup) => {\r\n    let retList = [];\r\n    let primaryAxis = JSON.stringify(primaryAxes);\r\n    for (let i = 0; i < groupedData.length; i++) {\r\n        let currGroupedData = groupedData[i];\r\n        let jsonStrObj = JSON.parse(currGroupedData.name);\r\n\r\n        // let primAxisVal = jsonStrObj[primaryAxis];\r\n        let secondaryName = jsonStrObj[secondaryGroup];\r\n        let secondaryVal = currGroupedData.value;\r\n\r\n        let primAxisVal = JSON.stringify(filterObj(jsonStrObj, primaryAxes));\r\n\r\n        let findItem = retList.find(x => x[primaryAxis] === primAxisVal);\r\n        if (!findItem) {\r\n            findItem = {\r\n                [primaryAxis]: primAxisVal\r\n            }\r\n            retList.push(findItem);\r\n        }\r\n        findItem[`${secondaryName}`] = secondaryVal;\r\n    }\r\n\r\n    return retList;\r\n}\r\n\r\n// Just add a parent field to the existing metaDimArray\r\n// To make it easier to get the hierarchical value\r\nconst reformatMetaDim = (metaDimArray, parent=null) => {\r\n    if (!metaDimArray) {\r\n        return null;\r\n    }\r\n    \r\n    for(let i = 0; i < metaDimArray.length; i++) {\r\n        let metaNode = metaDimArray[i];\r\n        metaNode.parent = parent;\r\n        reformatMetaDim(metaNode.children, metaNode);\r\n    }\r\n    \r\n    return metaDimArray;\r\n}\r\n\r\nclass TrialPage extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        let reformattedMetaDimPie = reformatMetaDim(metaDimHier4Pie);\r\n        let reformattedMetaDimBar = reformatMetaDim(metaDimHier4Bar);\r\n        let cfData = crossfilter(generateApiData());\r\n        let defaultGrouping = metaDimHier4Pie[0].key;\r\n\r\n        let initialPiechartDim = this.preparePieChartDim([defaultGrouping], cfData);\r\n        let initialBarchartDim = this.prepareBarChartDim([defaultGrouping], cfData);\r\n\r\n        this.state = {\r\n            dimHierMaster: {\r\n                pieChart: reformattedMetaDimPie,\r\n                barChart: reformattedMetaDimBar\r\n            },\r\n            cfData: cfData,\r\n            data: generateApiData(),\r\n            pageFilters: [], // For each control ID, one filter only\r\n            //overallGroupings: [defaultGrouping], // The grouping set in the tree drop down\r\n            groupingBoundVal: {\r\n                pieChart: defaultGrouping, \r\n                barChart: defaultGrouping, \r\n            },\r\n            controlDims: {\r\n                pieChart: [initialPiechartDim],\r\n                barChart: [initialBarchartDim]\r\n            }\r\n        }\r\n\r\n        this.onGroupSelectPie = this.onGroupSelectPie.bind(this);\r\n        this.onGroupSelectBar = this.onGroupSelectBar.bind(this);\r\n    }\r\n\r\n    preparePieChartDim = (defaultGroupings, cfData) => {\r\n        let dim = getDimensionObj(cfData,defaultGroupings);\r\n        return {\r\n            groupingInfo: JSON.stringify(defaultGroupings),\r\n            dimension: dim\r\n        }\r\n\r\n        //return cfData.dimension(d => d.vendor);\r\n    }\r\n\r\n    prepareBarChartDim = (defaultGroupings, cfData) => {\r\n        //let primaryAxis = 'vendor'; // let this be the configurable axis\r\n        let secondaryGroup = 'itemCond';\r\n        let dim = getDimensionObj(cfData,[...defaultGroupings, secondaryGroup]);\r\n        return {\r\n            groupingInfo: '', // TODO, since we haven't implemented grouping for bar chart yet\r\n            dimension: dim\r\n        }\r\n    }\r\n\r\n    renderPageFilters = () => {\r\n        return <div className=\"trialPageFilters\">\r\n            <div><b>Page filters:</b></div>\r\n            {/* {this.state.pageFilters.map()} */}\r\n            {this.state.pageFilters.map(filter => <div>{JSON.stringify(filter)}</div>)}\r\n            <Button size='mini' primary type=\"button\" \r\n                onClick={e => {\r\n                    this.setState({pageFilters:[]});\r\n                    let allControlDims = [...this.state.controlDims.pieChart, ...this.state.controlDims.barChart];\r\n                    allControlDims.forEach(d => {\r\n                        d.dimension.filter(null);\r\n                    })\r\n                }\r\n                }>Clear Filters</Button>\r\n        </div>\r\n    }\r\n\r\n    pieClickHandler = (pieWedgeInfo) => {\r\n        let currGroup = this.state.groupingBoundVal.pieChart;\r\n        let groupings = this.getGroupings(currGroup, 'pieChart');\r\n        let filterObj = {\r\n            filterVal: JSON.parse(pieWedgeInfo.name),\r\n            source: \"pieChart\",\r\n            groupingInfo: JSON.stringify(groupings)\r\n        };\r\n        console.log('pieClickHandler', pieWedgeInfo, filterObj);\r\n\r\n        // Remove any existing filter from pie chart dimension before applying a new one\r\n        // E.g. Previous filter is Vendor:Apple + Model:iPhone\r\n        // If new filter is Vendor: Apple, remove the previous filter first\r\n        // let treeDropdownVal = this.state.groupingBoundVal;\r\n        // let groupStr = JSON.stringify(this.getGroupings(treeDropdownVal));\r\n        // let otherPieDims = this.state.controlDims.pieChart.filter(d => \r\n        //     d.groupingInfo !== groupStr \r\n        //     && d.groupingInfo.length > groupStr.length);\r\n        // otherPieDims.forEach(otherDim => {\r\n        //     // If other dimension is lower (more complex), remove. If higher, retain.\r\n        //     otherDim.dimension.filter(null);\r\n        // })\r\n\r\n        // If the same source && grouping Info, replace the existing one.\r\n        // Else, just push new item\r\n\r\n        // TODO (nice to have): if everything exactly same, remove it instead\r\n        let findSameSourceAndGroupingInfoIndex = this.state.pageFilters.findIndex(f => f.source === 'pieChart' && f.groupingInfo === filterObj.groupingInfo);\r\n        if (findSameSourceAndGroupingInfoIndex >= 0) {\r\n            this.state.pageFilters.splice(findSameSourceAndGroupingInfoIndex, 1);\r\n        }\r\n\r\n        this.setState({\r\n            pageFilters: [...this.state.pageFilters, filterObj]\r\n        });\r\n    }\r\n\r\n    onGroupSelectPie = (value) => {\r\n        let groupings = this.getGroupings(value, 'pieChart');\r\n        let groupingsStr = JSON.stringify(groupings);\r\n\r\n        // Remove the filter from previous lower groups\r\n        // let prevGroup = this.state.groupingBoundVal;\r\n        // let prevGroupStr = JSON.stringify(this.getGroupings(prevGroup));\r\n        debugger\r\n        let lowerDims = this.state.controlDims.pieChart.filter(d => d.groupingInfo.length > groupingsStr.length);\r\n        let removedFilters = [];\r\n        lowerDims.forEach(lowerDim => {\r\n            lowerDim.dimension.filter(null);\r\n            removedFilters.push(lowerDim.groupingInfo);\r\n        });\r\n\r\n        this.setState({\r\n            pageFilters: this.state.pageFilters.filter(f => !removedFilters.includes(f.groupingInfo))\r\n        });\r\n\r\n\r\n        // Update the dimension of the controls also....maybe we need to keep the old dimensions too in case the user switches back to the previous grouping\r\n        // Check if this grouping is already in the state\r\n        // If not, create a new one and push\r\n        let findGrouping = this.state.controlDims.pieChart.find(g => g.groupingInfo === groupingsStr);\r\n\r\n        if (!findGrouping) {\r\n            let newPiechartDim = this.preparePieChartDim(groupings, this.state.cfData);\r\n            this.setState({\r\n                groupingBoundVal: {\r\n                    ...this.state.groupingBoundVal, \r\n                    pieChart: value\r\n                },\r\n                controlDims: {\r\n                    ...this.state.controlDims,\r\n                    pieChart: [...this.state.controlDims.pieChart, newPiechartDim]\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                groupingBoundVal: {\r\n                    ...this.state.groupingBoundVal,\r\n                    pieChart: value\r\n                },\r\n            });\r\n        }      \r\n    }\r\n\r\n    onGroupSelectBar = (value) => {\r\n        let groupings = this.getGroupings(value, 'barChart');\r\n        let groupingsStr = JSON.stringify(groupings);\r\n\r\n        // Remove the filter from previous lower groups\r\n        // let prevGroup = this.state.groupingBoundVal;\r\n        // let prevGroupStr = JSON.stringify(this.getGroupings(prevGroup));\r\n        debugger\r\n        let lowerDims = this.state.controlDims.barChart.filter(d => d.groupingInfo.length > groupingsStr.length);\r\n        let removedFilters = [];\r\n        lowerDims.forEach(lowerDim => {\r\n            lowerDim.dimension.filter(null);\r\n            removedFilters.push(lowerDim.groupingInfo);\r\n        });\r\n\r\n        this.setState({\r\n            pageFilters: this.state.pageFilters.filter(f => !removedFilters.includes(f.groupingInfo))\r\n        });\r\n\r\n\r\n        // Update the dimension of the controls also....maybe we need to keep the old dimensions too in case the user switches back to the previous grouping\r\n        // Check if this grouping is already in the state\r\n        // If not, create a new one and push\r\n        let findGrouping = this.state.controlDims.barChart.find(g => g.groupingInfo === groupingsStr);\r\n\r\n        if (!findGrouping) {\r\n            let newBarchartDim = this.prepareBarChartDim(groupings, this.state.cfData);\r\n            this.setState({\r\n                groupingBoundVal: {\r\n                    ...this.state.groupingBoundVal,\r\n                    barChart: value\r\n                },\r\n                controlDims: {\r\n                    ...this.state.controlDims,\r\n                    barChart: [...this.state.controlDims.barChart, newBarchartDim]\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                groupingBoundVal: {\r\n                    ...this.state.groupingBoundVal, \r\n                    barChart: value\r\n                },\r\n            });\r\n        }      \r\n    }\r\n\r\n    getGroupings = (treeDropdownVal, controlId) => {\r\n        //let  = this.state.groupingBoundVal;\r\n        let treeNodeSel = findNodeByKey(this.state.dimHierMaster[controlId], treeDropdownVal);\r\n        if (!treeNodeSel) {\r\n            return [];\r\n        }\r\n\r\n        let retList = [treeDropdownVal];\r\n        let currParent = treeNodeSel.item.parent;\r\n        while (!!currParent) {\r\n            retList.unshift(currParent.key);\r\n            currParent = currParent.parent;\r\n        }\r\n\r\n        return retList;\r\n    }\r\n\r\n    calculateActiveIndex = (groupData, controlId, groupingsStr, pageFilters) => {\r\n\r\n        let findFilterForControl = pageFilters.find(f => f.source === controlId && f.groupingInfo === groupingsStr);\r\n        if (!findFilterForControl) {\r\n            return null;\r\n        }\r\n\r\n        let dataIndex = groupData.findIndex(data => {\r\n            let nameStr = data.name;\r\n            let nameObj = JSON.parse(nameStr);\r\n\r\n            // This data must satisfy all filter props\r\n            for (let prop in findFilterForControl.filterVal) {\r\n                if (findFilterForControl.filterVal[prop] !== nameObj[prop]) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        if (dataIndex >= 0) {\r\n            return dataIndex;\r\n        }\r\n\r\n        return null;        \r\n    }\r\n\r\n    renderPieChart = () => {\r\n        // [1] Group the data \r\n        // [1A] Get the groupings from the tree dropdown first\r\n        let dimArr = this.state.controlDims.pieChart;\r\n        let treeDropdownVal = this.state.groupingBoundVal.pieChart;\r\n        let groupings = this.getGroupings(treeDropdownVal, 'pieChart');\r\n        let groupingsStr = JSON.stringify(groupings);\r\n        let dimFind = dimArr.find(g => g.groupingInfo === groupingsStr);\r\n        \r\n        let groupedData = getDimGroupCount(dimFind.dimension);\r\n        let activeIndex = this.calculateActiveIndex(groupedData, 'pieChart', groupingsStr, this.state.pageFilters);\r\n    \r\n        // TODO: we need to set the correct active index if there is a filter on this control and group\r\n        // Maybe we can assume that recharts will use the groupedData index as-as.\r\n        // If that's the case we can calculate\r\n        return <div className=\"trialPieContainer\">\r\n            <TreeDropdown \r\n                treeData={metaDimHier4Pie} \r\n                value={this.state.groupingBoundVal.pieChart}\r\n                onSelect={this.onGroupSelectPie}\r\n                treeDefaultExpandAll\r\n                // defaultValue={getBottomMostGroup(this.state.overallGroupings)}\r\n            />\r\n            <PieWithData \r\n                apiData={groupedData}\r\n                pieClickCallback={this.pieClickHandler}\r\n                activeIndex={activeIndex}/>\r\n        </div>\r\n    }\r\n\r\n    renderTable = () => {\r\n        let dimensions = ['deviceId', 'vendor', 'model', 'itemCond', 'category']; // configed by user\r\n        let data = this.state.cfData.allFiltered();\r\n        \r\n        return <div className=\"trialChartContainer trialChartContainer\">\r\n            <b>Num Records: {data.length}</b>\r\n            <table className=\"trialTable\">\r\n            <thead>\r\n                <tr>\r\n                {dimensions.map(d => <th key={`trialTableHeader-${d}`}>{d}</th>)}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {data.map((d, index) => { return <tr key={`trialTableData-${index}`}>\r\n                    {\r\n                        Object.keys(d).map(k => <td key={`trialTableData-${index}-${d[k]}`}>{d[k]}</td>)\r\n                    }\r\n                    </tr>})\r\n                }\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n    }\r\n\r\n    renderBarchart = () => {        \r\n        //let data = dummyBarchartData;\r\n        //let primaryAxis = 'vendor';        \r\n        let treeDropdownVal = this.state.groupingBoundVal.barChart;\r\n        let groupings = this.getGroupings(treeDropdownVal, 'barChart');\r\n\r\n        let secondaryGroup = 'itemCond';\r\n        let groupedData = groupData(this.state.cfData, [...groupings,secondaryGroup]);\r\n        //let groupedData = groupData(this.state.cfData, ['vendor', secondaryGroup]);\r\n        let formattedGroupData = formatBarchartData(groupedData, groupings, secondaryGroup);\r\n        let primaryAxis = JSON.stringify(groupings);\r\n        let secondaryKeyVals = groupedData.map(grpData => {\r\n            let nameJson = grpData.name;\r\n            let keyObj = JSON.parse(nameJson);\r\n            return keyObj[secondaryGroup];\r\n        });\r\n        let uniqSecondaryVals = _.uniq(secondaryKeyVals);\r\n\r\n        return <div className=\"trialPieContainer trialChartContainer\">\r\n            <TreeDropdown \r\n                treeData={metaDimHier4Bar} \r\n                value={this.state.groupingBoundVal.barChart}\r\n                onSelect={this.onGroupSelectBar}\r\n                treeDefaultExpandAll\r\n                // defaultValue={getBottomMostGroup(this.state.overallGroupings)}\r\n            />\r\n            <BarChartWithData\r\n                apiData={formattedGroupData}\r\n                primary={primaryAxis}\r\n                secondaryList={uniqSecondaryVals}\r\n            />\r\n        </div>\r\n    }\r\n\r\n    filterData = () => {\r\n        if (!this.state.pageFilters || !this.state.pageFilters.length) {\r\n            return;\r\n        }\r\n\r\n        debugger\r\n        // let dimObj = this.state.controlDims.pieChart;\r\n        // dimObj.filter('{\"vendor\":\"Apple\"}');  \r\n\r\n        // Apply the filter on the source only\r\n        // E.g. Pie chart applied filter\r\n        // -> Look for the pie chart's dimension from State, then apply the filter on that only\r\n        for (let i = 0; i < this.state.pageFilters.length; i++) {\r\n            let currFilter = this.state.pageFilters[i];\r\n\r\n            // a. Find the source of the filter. It will return an array of dims (one per grouping)\r\n            let filterSource = currFilter.source;\r\n            let filterGroupingInfo = currFilter.groupingInfo;\r\n            let dimArr = this.state.controlDims[filterSource];   \r\n            let dimObj = null;\r\n\r\n            // b. Find the dim based on the current grouping\r\n            if (filterSource === 'pieChart') {\r\n                let currGrouping = this.state.groupingBoundVal[filterSource];\r\n                let groupingVal = this.getGroupings(currGrouping, filterSource);\r\n                let groupingValStr = JSON.stringify(groupingVal);\r\n                if (filterGroupingInfo !== groupingValStr) {\r\n                    // We don't perform filter if the currently selected group is not the same\r\n                    continue;\r\n                }\r\n\r\n                let dimFind = dimArr.find(x => x.groupingInfo === groupingValStr);\r\n                if (!dimFind) {\r\n                    // Not expected to be here\r\n                    debugger\r\n                    continue;\r\n                }\r\n                dimObj = dimFind.dimension;\r\n            }\r\n            else {\r\n                // Not yet implemented filter for bar chart. todo...\r\n            }\r\n\r\n            let currFilterVal = currFilter.filterVal;\r\n\r\n            // c. Iterate through each of the filter and check if the data satisfies each filter\r\n            dimObj.filter( dJsonStr => {\r\n                let jsonObj = JSON.parse(dJsonStr);\r\n                \r\n                for (let prop in currFilterVal) {\r\n                    let jsonObjVal = jsonObj[prop];\r\n                    if (jsonObjVal !== currFilterVal[prop]) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n        }        \r\n\r\n    }\r\n\r\n    \r\n    renderMap = (useOther=null) => {\r\n        return <ImageMap useOther={useOther}/>;\r\n    }\r\n\r\n    testFilter = () => {\r\n        debugger\r\n        let cfData = this.state.cfData;\r\n        let dimPie = cfData.dimension(d => d.vendor);\r\n        let dimBar = cfData.dimension(d => d.itemCond);\r\n\r\n        let grpPie1 = dimPie.group().reduceCount().all();\r\n        let grpBar1 = dimBar.group().reduceCount().all();\r\n        let cfData1 = cfData.allFiltered();\r\n\r\n        dimPie.filter(\"Apple\");\r\n        let grpPie2 = dimPie.group().reduceCount().all();\r\n        let grpBar2 = dimBar.group().reduceCount().all();\r\n        let cfData2 = cfData.allFiltered();\r\n    }\r\n\r\n    render() {\r\n        // Perform filtering if there is a pagefilter\r\n        //this.testFilter();\r\n        this.filterData();\r\n\r\n        return <div className=\"trialPageContainer\">\r\n            {this.renderPageFilters()}\r\n            <div className=\"trialPageCharts\">\r\n            {this.renderMap(true)}\r\n            {this.renderPieChart()}\r\n            {this.renderBarchart()}\r\n            {this.renderTable()}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default TrialPage;\r\n\r\n","import React from 'react';\r\nimport \"../styles/App.css\";\r\nimport \"../styles/MainContent.css\";\r\n//import HomeContent from './homeContent';\r\nimport DashboardContent from './dashboardContent';\r\nimport DesignerContent from './dashboardDesignerContent';\r\nimport FormsDesignerContent from './formsDesignerContent';\r\nimport SettingsContent from './settingsContent';\r\nimport HierarchyDesigner from './hierarchyDesigner';\r\nimport MapViewContent from './mapViewContent';\r\nimport AnalysisViewContent from './analysisViewContent';\r\nimport SpecialTabContent from './specialTabContent';\r\nimport DownloadCenterContent from './downloadCenterContent';\r\nimport {connect} from 'react-redux';\r\nimport {Tab} from 'semantic-ui-react';\r\nimport DataDesignerContent from './dataDesignerContent';\r\nimport DataSourcesContent from './dataSourceContent';\r\nimport TrialPage from './trialPage';\r\nimport ExternalContainer from '../containers/externalContainer';\r\n\r\nconst panes = [\r\n    {\r\n        menuItem: 'MapViewContent',\r\n        pane: (\r\n        <Tab.Pane key='mapView' style={{height: '100%', width: '100%', padding: '0px'}}>\r\n            {/* <MapViewContent/> */}\r\n            <SpecialTabContent hierarchyPropName=\"displayAsMapView\"/>\r\n        </Tab.Pane>\r\n        ),\r\n    },\r\n    {\r\n      menuItem: 'AnalysisViewContent',\r\n      pane: (\r\n      <Tab.Pane key='analysisView' style={{height: '100%', width: '100%', padding: '0px'}}>\r\n          {/* <AnalysisViewContent/> */}\r\n          <SpecialTabContent hierarchyPropName=\"displayAsAnalysisView\"/>\r\n      </Tab.Pane>\r\n      ),\r\n  },\r\n    {\r\n        menuItem: 'Home',\r\n        pane: (\r\n        <Tab.Pane key='home' style={{height: '100%', width: '100%', padding: '0px'}}>\r\n            {/* <HomeContent/> */}\r\n            <DashboardContent defaultSizes={[15, 85]}/>\r\n        </Tab.Pane>\r\n        ),\r\n    },\r\n    {\r\n      menuItem: 'DownloadCenterContent',\r\n      pane: (\r\n      <Tab.Pane key='downloadCenter' style={{height: '100%', width: '100%', padding: '0px'}}>\r\n          <DownloadCenterContent/>\r\n      </Tab.Pane>\r\n      ),\r\n  },\r\n    {\r\n        menuItem: 'formsDesigner',\r\n        pane: (\r\n          <Tab.Pane key='formsDesigner' style={{height: '100%', width: '100%', padding: '0px'}}>\r\n            <FormsDesignerContent defaultSizes={[25, 75]}/>\r\n          </Tab.Pane>\r\n        ),\r\n      },\r\n      {\r\n        menuItem: 'HierarchyDesigner',\r\n        pane: (\r\n          <Tab.Pane key='hierarchyDesigner' style={{height: '100%', width: '100%', padding: '0px'}}>\r\n            <HierarchyDesigner/>\r\n          </Tab.Pane>\r\n        ),\r\n      },          \r\n      // {\r\n      //   menuItem: 'dataSources',\r\n      //   pane: (\r\n      //     <Tab.Pane key='dataSources' style={{height: '100%', width: '100%', padding: '0px'}}>\r\n      //       <DataSourcesContent/>\r\n      //     </Tab.Pane>\r\n      //   ),\r\n      // },          \r\n      {\r\n        menuItem: 'affiliate',\r\n        pane: (\r\n          <Tab.Pane key='affiliate' style={{height: '100%', width: '100%', padding: '0px'}}>\r\n            <ExternalContainer/>\r\n          </Tab.Pane>\r\n        ),\r\n      },\r\n      // {\r\n      //   menuItem: 'dashboardDesigner',\r\n      //   pane: (\r\n      //     <Tab.Pane key='dashboardDesigner' style={{height: '100%', width: '100%', padding: '0px'}}>\r\n      //       <DesignerContent/>\r\n      //     </Tab.Pane>\r\n      //   ),\r\n      // },\r\n      // {\r\n      //   menuItem: 'dataDesigner',\r\n      //   pane: (\r\n      //     <Tab.Pane key='dataDesigner' style={{height: '100%', width: '100%', padding: '0px'}}>\r\n      //       <DataDesignerContent/>\r\n      //     </Tab.Pane>\r\n      //   ),\r\n      // },    \r\n      // {\r\n      //   menuItem: 'trialPage',\r\n      //   pane: (\r\n      //     <Tab.Pane key='trialPage' style={{height: '100%', width: '100%', padding: '0px'}}>\r\n      //       <TrialPage/>\r\n      //     </Tab.Pane>\r\n      //   ),\r\n      // },               \r\n      {\r\n        menuItem: 'Settings',\r\n        pane: (\r\n          <Tab.Pane key='settings' style={{height: '100%', width: '100%', padding: '0px'}}>\r\n            <SettingsContent/>\r\n          </Tab.Pane>\r\n        ),\r\n      },\r\n  ]\r\n\r\nconst MainContent = (props) => {\r\n    // Decide which content to show as active, based on selected item from NavBar (stored in the redux store)    \r\n    return <div id=\"mainContent\">\r\n        <Tab id=\"mainTab\" panes={panes} renderActiveOnly={false} style={{height: '100%'}} activeIndex={props.mainAppState.tabIndex}/>\r\n    </div>;\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        mainAppState: state.mainApp\r\n    };\r\n  }\r\n\r\n//export default MainContent;\r\nexport default connect(mapStateToProps)(MainContent);","import React from 'react';\r\nimport ReportForm from './components/reportForm';\r\nimport {connect} from 'react-redux';\r\nimport './ReportApp.css'\r\nimport {findInheritedPage} from './containers/hierarchyConfigPanel';\r\nimport {findNodeByKey} from './helper/treefilter';\r\nimport {uuidv4, getMonthEndDate, getMonthStartDate} from './helper/util';\r\n\r\nconst ReportApp = ({layoutData, layout, metadata, hierarchyView, masterLayouts}) => {\r\n\r\n    const getLayoutName = (findUserSetting, currNode) => {\r\n        if (!findUserSetting) {\r\n            return null;\r\n        }\r\n\r\n        if (findUserSetting.inherit === false) {\r\n            return findUserSetting.pageAssoc;\r\n        }\r\n        else {\r\n            // otherwise, use the inherited page\r\n            let findNode = findNodeByKey(treeData, currNode.key);\r\n            if (!!findNode && findNode.item) {\r\n                return findInheritedPage(findNode.item, userSettings);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // Returns an array of layouts\r\n    const extractLayouts = (nodesArr) => {\r\n        if (!Array.isArray(nodesArr) || !Array.isArray(userSettings)) {\r\n            return null;\r\n        }\r\n\r\n        let retList = [];\r\n        for (let i=0; i < nodesArr.length; i++) {\r\n            let currNode = nodesArr[i];\r\n            // Find the corresponding userSetting and layoutObj\r\n            // We cannot call continue in the loop if cannot find the setting/layout, because we still need to process the children\r\n            let findUserSetting = userSettings.find(u => u.key === currNode.key);\r\n            if (findUserSetting && findUserSetting.displayReport === true) {\r\n                let layoutName = getLayoutName(findUserSetting, currNode);\r\n                let findNodeLayout = masterLayouts.find(m => m.name === layoutName);\r\n                if (findNodeLayout) {\r\n                    let controlsArr = findNodeLayout.layoutJson && JSON.parse(findNodeLayout.layoutJson);\r\n                    let pageApiData = findNodeLayout.pageApiData && JSON.parse(findNodeLayout.pageApiData);\r\n                    retList.push({\r\n                        layoutName: layoutName,\r\n                        controls: controlsArr,\r\n                        pageApiData: pageApiData\r\n                    });\r\n                    console.log(\"[extractLayouts] Adding: \", layoutName);\r\n                }\r\n            }\r\n\r\n            // process the node's children (always process the children no matter what)\r\n            let childrenControls = extractLayouts(currNode.children);\r\n            if (Array.isArray(childrenControls) && childrenControls.length > 0) {\r\n                retList = retList.concat(childrenControls);\r\n            }\r\n        }\r\n\r\n        return retList;\r\n    }\r\n\r\n    const adjustControlCoords = (currLayoutControls, currRowOffset, currLayoutName) => {\r\n        let retVal = {\r\n            lastNonEmptyRow: 0,\r\n            adjustedControls: []\r\n        };\r\n        \r\n        for (let i=0; i < currLayoutControls.length; i++) {\r\n            let currControl = currLayoutControls[i];\r\n            let newY = currControl.y + currRowOffset;\r\n            let bottom = newY + currControl.h;\r\n            retVal.adjustedControls.push({\r\n                ...currControl,\r\n                y: newY,\r\n                layoutName: currLayoutName // needed for external API data mapping\r\n            })\r\n\r\n            if (bottom > retVal.lastNonEmptyRow) {\r\n                retVal.lastNonEmptyRow = bottom;\r\n            }\r\n        }\r\n\r\n        return retVal;\r\n    }\r\n\r\n    const mergeLayoutControls = (allLayouts) => {\r\n        if (!Array.isArray(allLayouts)) {\r\n            return [];\r\n        }\r\n\r\n        let retVal = {\r\n            controls: [],\r\n            lastNonEmptyRow: 0,\r\n            apiDataMap:  {}\r\n        };\r\n        let currRowOffset = 0;\r\n        for (let iLayout = 0; iLayout < allLayouts.length; iLayout++) {\r\n            let currLayoutName = allLayouts[iLayout].layoutName;\r\n            let currLayoutControls = allLayouts[iLayout].controls;\r\n            let currApiData = allLayouts[iLayout].pageApiData;\r\n            if (currApiData) {\r\n                retVal.apiDataMap[currLayoutName] = currApiData;\r\n            }\r\n            \r\n            let reformattedControls = adjustControlCoords(currLayoutControls, currRowOffset, currLayoutName);\r\n            console.log('[mergeLayoutControls], layout: ', currLayoutName, 'last empty row', reformattedControls.lastNonEmptyRow, \"currRowOffset:\", currRowOffset);\r\n            // Add a pagebreak\r\n            reformattedControls.adjustedControls.push({\r\n                i: 'ctrl-pagebreak-report'+uuidv4(),\r\n                x: 0,\r\n                y: reformattedControls.lastNonEmptyRow+1,\r\n                w: 12,\r\n                h: 1,\r\n                ctrlType: 'pagebreak',\r\n                data: {}\r\n            });\r\n\r\n            currRowOffset = reformattedControls.lastNonEmptyRow + 2; // +1 for the page break we added just now\r\n            retVal.controls = retVal.controls.concat(reformattedControls.adjustedControls);\r\n        }\r\n\r\n        retVal.lastNonEmptyRow = currRowOffset;\r\n\r\n        return retVal;\r\n    }\r\n\r\n    const gatherAllControls = () => {        \r\n        if (!treeData || treeData.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        // Extract all layouts first\r\n        let allLayouts = extractLayouts(treeData);\r\n\r\n        // Stitch together all controls, but need to readjust the x, y coordinates\r\n        // and put a page break control in between each layout\r\n        return mergeLayoutControls(allLayouts);\r\n    }\r\n\r\n    // For now, we hardcode that if report parameters include \"start\" and \"end\", it is for Analysis Period\r\n    // Since Analysis Period is already part of the DashboardContent's state.pageFilters, we just mimic the format.\r\n    // Future: may include report name, or username\r\n    const getRequestParamsOld = () => {\r\n        let url = new URL(document.URL);\r\n        let searchParams = url.searchParams;\r\n        const start = searchParams.get('start');\r\n        const end = searchParams.get('end');\r\n        let pageFilters = [];\r\n\r\n        // TODO: Not sure if backend server can understand the start and end date format\r\n        if (start && end) {\r\n            pageFilters.push({\r\n                name: \"AnalysisPeriod\", \r\n                value: \"CustomRange\", \r\n                startDate: start,\r\n                endDate: end\r\n            });\r\n        }\r\n\r\n        return pageFilters;\r\n    }\r\n\r\n    // For now, we hardcode that the request parameter shall be the Exec Report UUID, start and end MONTH\r\n    // Since Analysis Period is already part of the DashboardContent's state.pageFilters, we just mimic the format.\r\n    // Future: may include report name, or username\r\n    const getRequestParams = () => {\r\n        let url = new URL(document.URL);\r\n        let searchParams = url.searchParams;\r\n        const start = searchParams.get('start');\r\n        const end = searchParams.get('end');\r\n        const uuid = searchParams.get('uuid');\r\n        let pageFilters = [];\r\n\r\n        if (uuid) {\r\n            pageFilters.push({\r\n                name: 'uuid',\r\n                value: uuid\r\n            });\r\n        }\r\n        if (start && end) {\r\n            pageFilters.push({\r\n                name: \"AnalysisPeriod\", \r\n                value: \"CustomRange\", \r\n                startDate: getMonthStartDate(new Date(start)),\r\n                endDate: getMonthEndDate(new Date(end))\r\n            });\r\n        }\r\n\r\n        return pageFilters;\r\n    }\r\n\r\n    // temp function\r\n    const getFirstVal = (obj) => {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n\r\n        let vals = Object.values(obj);\r\n        if (vals && vals.length > 0) {\r\n            return vals[0];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // Gather all controls from all layouts in the hierarchy and pass them as controls and layoutData\r\n    let treeData = hierarchyView && JSON.parse(hierarchyView.hierarchyJson);\r\n    let userSettings = hierarchyView && JSON.parse(hierarchyView.nodeSettingsJson);\r\n    \r\n    let allControls = gatherAllControls();\r\n    let allControlsLayoutData = {\r\n        columns: 12,\r\n        rows: allControls.lastNonEmptyRow + 1,\r\n        // TODO: For now, don't send the whole apiDataMap first. Assume in all layouts selected, only one of them has external API Data\r\n        pageApiData: getFirstVal(allControls.apiDataMap)\r\n    };\r\n\r\n    // Parse the URL for the query string\r\n    let requestParams = getRequestParams();\r\n    console.log('requestParams: ', requestParams);\r\n\r\n    return <div className=\"ReportApp\">\r\n        <ReportForm \r\n            containerWidth={window.innerWidth}\r\n            // layoutData={layoutData}\r\n            // controls={layout}\r\n            layoutData={allControlsLayoutData}\r\n            controls={allControls.controls}            \r\n            metadata={metadata}\r\n            pageFilters={requestParams}\r\n            />\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => {    \r\n    let masterHierarchyViews = state.mainApp.masterHierarchyViews;\r\n    let defaultView = masterHierarchyViews && masterHierarchyViews[0];\r\n\r\n    return {\r\n        layout: state.reportApp.layout,\r\n        layoutData: state.reportApp.layoutData,\r\n        metadata: state.mainApp.masterMetadata,\r\n        hierarchyView: defaultView,\r\n        masterLayouts: state.mainApp.masterLayouts,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(ReportApp);","import React from 'react';\r\n\r\n// Project imports\r\nimport Navbar from '../src/components/navbar';\r\nimport MainContent from './containers/mainContent';\r\nimport \"../src/styles/App.css\";\r\n//import masterData from './api/masterData';\r\nimport {fetchHierarchy, \r\n    fetchSavedLayouts, \r\n    fetchHierarchyViews, \r\n    fetchDimensions,\r\n    fetchHierarchyKpi,\r\n    fetchHierarchyConso,\r\n    fetchImages} from './actions';\r\nimport {connect} from 'react-redux';\r\n\r\nimport TouchBackend from 'react-dnd-touch-backend';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport { DndProvider } from 'react-dnd'\r\nimport ShowMessage, {NotifType} from '../src/helper/notification';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport ReportApp from './ReportApp';\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        console.log('[App][componentDidMount] fetch master data...');\r\n        // Fetch master data:\r\n        // Hierarchy, layouts, saved data\r\n\r\n        // POC: No need to fetch the hierarchy. User will manually build the hierarchy.\r\n        //this.props.fetchHierarchyConso();\r\n        //this.props.fetchHierarchy()\r\n            // Fetch the view after fetching the real hierarchy. Because the user may not necessarily have saved\r\n            // a user hierarchy. In that case, we show the real hierarchy.\r\n            // Is there a guarantee that when the Reducer starts processing the hierarchy view, the hierarchy was already finished?\r\n            // Note: we are using redux thunk...Will the then() function be executed after network fetch or after reducer is done?\r\n            //.then(() => this.props.fetchHierarchyViews())\r\n            //.catch( err => ShowMessage(\"Unable to fetch hierarchy\", NotifType.danger, err.message));\r\n        //this.props.fetchHierarchyKpi();\r\n        //this.props.fetchDimensions();\r\n        this.props.fetchHierarchyViews();\r\n        this.props.fetchSavedLayouts();\r\n        this.props.fetchImages();\r\n    }\r\n\r\n    render() {\r\n        var isTouch = ('ontouchstart' in document.documentElement);\r\n        console.log('[App] render(), touch?', isTouch);\r\n        console.log('URL Params', document.URL);\r\n\r\n        if (document.URL.toLowerCase().includes('reporting')) {\r\n            return <DndProvider backend={HTML5Backend}>\r\n                <div id=\"reportApp\">\r\n                <ReportApp/>\r\n                </div>\r\n            </DndProvider>\r\n        }\r\n        else {\r\n            return(<DndProvider backend={isTouch? TouchBackend : HTML5Backend}>\r\n                <div id=\"app\" style={{height: 'calc(100%)'}}>\r\n                    <ReactNotification />\r\n                    <Navbar>        \r\n                        <MainContent/>\r\n                    </Navbar>\r\n                </div>\r\n                </DndProvider>)        \r\n        }\r\n    }\r\n}\r\n\r\n//dndBackend = DragDropContext(TouchBackend);\r\nexport default connect(null, {fetchHierarchy, \r\n    fetchSavedLayouts, \r\n    fetchHierarchyViews, \r\n    fetchHierarchyKpi, \r\n    fetchHierarchyConso,\r\n    fetchDimensions,\r\n    fetchImages})(App);\r\n","// React imports\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// Redux imports\r\nimport { createStore,applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducers from \"./reducers\";\r\nimport App from './App';\r\nimport \"draft-js-linkify-plugin/lib/plugin.css\";\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nconst main = () => {\r\n    return (<Provider store={store}>\r\n            <App/>\r\n        </Provider>);\r\n}\r\n\r\nReactDOM.render(main(), document.getElementById('root'))"],"sourceRoot":""}